#+PROPERTY: header-args :results silent
#+OPTIONS:  toc:2
#+STARTUP:  overview noindent

* Encryption
** pinentry
#+begin_src emacs-lisp
(use-package pinentry :straight t :config (pinentry-start))
#+end_src

* Imports
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
(defvar import-file (expand-file-name "private/config.el" user-emacs-directory))
(when (file-readable-p import-file) (load import-file))
#+end_src

* Text edit settings
** Defaults
#+begin_src emacs-lisp
(setq-default c-basic-offset 4
              c-default-style "linux"
              create-lockfiles nil
              completion-cycle-threshold 3)

(global-display-line-numbers-mode -1)
(setq-default display-line-numbers-width 4)
(setq confirm-kill-emacs 'y-or-n-p)
(setq ring-bell-function 'ignore)
(add-hook 'window-setup-hook 'delete-other-windows)
(setq create-lockfiles nil)

(setq backup-directory-alist '(("." . "~/.cache/emacs/backup"))
      auto-save-file-name-transforms '((".*" "~/.cache/emacs/auto-save/" t))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5
      create-lockfiles nil)

(setq-default column-number-mode t)
#+end_src

** Indentation rules
#+begin_src emacs-lisp
(setq-default evil-auto-indent t
              indent-line-function 'evil-indent-line
              indent-tabs-mode nil
              tab-width 4
              org-src-tab-acts-natively t
              org-edit-src-content-indentation 0
              org-indent-indentation-per-level 2
              org-indent-mode-turns-on-hiding-stars nil)

(defun indent-tabs-hook ()
  (setq tab-width 4
        indent-tabs-mode t
        evil-auto-indent t
        c-basic-offset tab-width))

(dolist (hook '(c++-mode-hook c-mode-hook c++-ts-mode-hook c-ts-mode-hook)) (add-hook hook 'indent-tabs-hook))
#+end_src

** Clean up trailing whitespace
#+begin_src emacs-lisp
(setq org-src-strip-leading-and-trailing-blank-lines t)

(add-hook 'prog-mode-hook
          (lambda ()
            (if (version< emacs-version "24.4")
                (visual-wrap-prefix-mode))
            (display-line-numbers-mode -1)
            (setq show-trailing-whitespace t)
            (diminish 'eldoc-mode)
            (add-hook 'before-save-hook 'delete-trailing-whitespace)))
#+end_src

** recentf
#+begin_src emacs-lisp
(recentf-mode 1)
(setq history-length 9999
      history-delete-duplicates t
      recentf-max-saved-items 1000
      recentf-auto-cleanup 'never
      recentf-auto-save-timer (run-with-idle-timer 600 t 'recentf-save-list))
#+end_src

** yes-or-no-p
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Scrolling behavior
#+begin_src emacs-lisp
(setq-default maximum-scroll-margin 1
              scroll-margin 0
              scroll-conservatively 5
              compilation-scroll-output t
              scroll-preserve-screen-position t)
#+end_src

*** ultra-scroll
#+begin_src emacs-lisp
(use-package elfeed-summary :straight t)
(use-package ultra-scroll
  :straight (ultra-scroll :type git :host github :repo "jdtsmith/ultra-scroll")
  :config
  (ultra-scroll-mode))

#+end_src

** Hide buffers
#+begin_src emacs-lisp
(setq inhibit-startup-buffer-menu t)
#+end_src

** Clipboard
#+begin_src emacs-lisp
(use-package simpleclip
  :straight t
  :config
  (setq interprogram-cut-function 'simpleclip-set-contents
        interprogram-paste-function 'simpleclip-get-contents)
  (simpleclip-mode 1))
#+end_src

** save-place
#+begin_src emacs-lisp
(save-place-mode +1)
#+end_src

** Indent guide
#+begin_src disabled
(use-package indent-guide
  :straight t
  :defer t
  :config
  (set-face-attribute 'indent-guide-face nil :foreground 'unspecified :inherit 'font-lock-comment-face)
  (setq indent-guide-char ">")
  (add-hook 'prog-mode-hook 'indent-guide-mode))
#+end_src

* Customization
** Colors
#+begin_src emacs-lisp
(require 'color-operations)
#+end_src

** GUI settings
*** -
#+begin_src emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)

(global-visual-line-mode t)
(diminish 'visual-line-mode)
(global-hl-line-mode -1)
#+end_src

*** Cursor
#+begin_src emacs-lisp
(setq blink-cursor-interval 0.6)
(setq blink-cursor-blinks 0)
(blink-cursor-mode 1)
(setq fringes-outside-margins t)

(setq-default left-fringe-width 12
              right-fringe-width 12)
#+end_src

*** Window management
**** help-window-select
Always move cursor to help window.
#+begin_src emacs-lisp
(setq help-window-select t)
#+end_src

**** winner-mode
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

*** tab-bar-echo-area
#+begin_src emacs-lisp
(use-package tab-bar-echo-area
  :straight t
  :config
  (setq-default tab-bar-show nil)
  (tab-bar-echo-area-mode 1))
#+end_src

** Theme
*** Load themes
#+begin_src emacs-lisp
(load (expand-file-name "lisp/theme-packages.el" user-emacs-directory))
(load-theme 'modus-operandi)
#+end_src
*** Faces
#+begin_src emacs-lisp
(defun niva/theme-is-active (theme-name)
  (cl-some (lambda (theme) (string-match-p theme-name (symbol-name theme)))
           custom-enabled-themes))

(defun niva/update-theme-faces ()
  (interactive)
  (ignore-errors
    (when (null custom-enabled-themes)
      (custom-set-faces '(org-block            ((t (:inherit 'default))))
                        '(org-block-begin-line ((t (:inherit 'org-block :extend t :overline t   :underline nil))))
                        '(org-block-end-line   ((t (:inherit 'org-block :extend t :overline nil :underline t))))))

    (when (niva/theme-is-active "ryerson")
      (custom-set-faces '(font-lock-comment-face ((t (:inherit 'unspecified :foreground "lightblue"))))
                        '(org-block              ((t (:inherit 'default :foreground 'unspecified))))))

    (when (niva/theme-is-active "less")
      (custom-set-faces '(elfeed-search-unread-title-face ((t :inherit 'default :foreground 'unspecified)))
                        '(elfeed-search-title-face        ((t (:inherit 'shadow :foreground "darkgray"))))
                        '(elfeed-search-feed-face         ((t (:inherit 'shadow :foreground "darkgray"))))
                        '(elfeed-search-tag-face          ((t (:inherit 'shadow :foreground "darkgray"))))))

    (when (niva/theme-is-active "naysayer")
      (custom-set-faces '(mode-line-inactive   ((t (:box t))))
                        '(mode-line            ((t (:box t))))
                        '(default              ((t (:foreground "#DACAAE"))))
                        '(header-line          ((t (:foreground unspecified :background unspecified :inherit 'mode-line-inactive :box t))))
                        '(flymake-error-echo   ((t (:background "black" :box t :inverse-video nil :bold t))))
                        '(flymake-warning-echo ((t (:background "black" :box t :inverse-video nil :bold t))))
                        '(flymake-note-echo    ((t (:background "black" :box t :inverse-video nil :bold t))))
                        '(link                 ((t (:inherit 'font-lock-comment-face))))))

    (when (niva/theme-is-active "sitaramv-solaris")
      (custom-set-faces '(org-block                       ((t (:inherit 'default :background "black"))))
                        '(org-block-begin-line            ((t (:background "black"))))
                        '(font-lock-comment-face          ((t (:inherit 'font-lock-builtin-face :slant unspecified :foreground unspecified))))
                        '(font-lock-string-face           ((t (:foreground "cyan"))))
                        '(font-lock-function-name-face    ((t (:foreground "yellow"))))
                        '(elfeed-search-title-face        ((t (:foreground "darkgray"))))
                        '(elfeed-search-unread-title-face ((t (:foreground "white"))))
                        '(font-lock-preprocessor-face     ((t (:foreground "green"))))))

    (when (niva/theme-is-active "doom-tomorrow-night")
      (custom-set-faces '(font-lock-number-face       ((t (:foreground unspecified :inherit 'font-lock-builtin-face))))
                        '(font-lock-variable-use-face ((t (:foreground unspecified :inherit 'default))))
                        '(font-lock-constant-face     ((t (:foreground unspecified :inherit 'font-lock-number-face))))
                        '(warning                     ((t (:foreground unspecified :inherit 'font-lock-builtin-face))))
                        '(font-lock-type-face         ((t (:foreground unspecified :inherit 'font-lock-builtin-face))))))

    (when (or (niva/theme-is-active "nofrils-acme") (niva/theme-is-active "acme"))
      (custom-set-faces '(org-block            ((t (:background "#FFFFDC")))))
      '(org-block-begin-line ((t (:extend t :overline t :underline nil :background "#FFFFDC"))))
      '(org-block-end-line   ((t (:extend t :overline nil :underline t :background "#FFFFDC")))))

    (when (or (niva/theme-is-active "wombat") (niva/theme-is-active "naysayer"))
      (custom-set-faces '(org-block            ((t (:background "#182C32"))))
                        '(org-block-begin-line ((t (:inherit 'default :extend t :overline t :underline nil :background "#182C32"))))
                        '(org-block-end-line   ((t (:inherit 'default :extend t :overline nil :underline t :background "#182C32"))))))

    (niva/diff-hl-fix))
  (custom-set-faces '(help-key-binding nil :box nil :background 'unspecified :foreground (face-attribute 'default :foreground))))
(niva/update-theme-faces)
#+end_src



** Display time
#+begin_src emacs-lisp
(setq display-time-format " %H:%M ")
(setq display-time-interval 60)
(setq display-time-default-load-average nil)

(setq display-time-string-forms
      '((propertize
         (format-time-string display-time-format now)
         'help-echo (format-time-string "%a %b %e, %Y" now))
        " "))
(display-time-mode -1)
#+end_src

** Font

*** Reset
#+begin_src emacs-lisp
(set-face-attribute 'fixed-pitch nil :family 'unspecified)
#+end_src

*** Remove font weight
#+begin_src emacs-lisp
(defun niva/remove-font-weight ()
  "Set weights to regular on common faces"
  (interactive)

  (set-face-attribute 'bold               nil :weight 'unspecified)
  (set-face-attribute 'buffer-menu-buffer nil :weight 'unspecified)
  (set-face-attribute 'compilation-error  nil :weight 'unspecified)
  (set-face-attribute 'default            nil :weight 'unspecified)
  (set-face-attribute 'help-key-binding   nil :weight 'unspecified :family 'unspecified :box 'unspecified :inherit 'default)
  (set-face-attribute 'outline-1          nil :weight 'unspecified)
  (set-face-attribute 'outline-2          nil :weight 'unspecified)
  (set-face-attribute 'outline-3          nil :weight 'unspecified)
  (set-face-attribute 'tooltip            nil :inherit 'default))
;; (add-hook 'prog-mode-hook 'niva/remove-font-weight)
#+end_src

** Solaire
#+begin_src emacs-lisp
(use-package solaire-mode
  :straight t
  :config
  (solaire-global-mode t)
  (solaire-mode-reset))
(setq solaire-global-mode-hook nil)

(add-hook 'compilation-mode-hook (lambda () (solaire-mode t) (solaire-mode-reset)))
(add-hook 'eshell-mode-hook      (lambda () (solaire-mode t) (solaire-mode-reset)))
(add-hook 'gptel-mode-hook       (lambda () (solaire-mode t) (solaire-mode-reset)))
(add-hook 'read-only-mode-hook   (lambda () (solaire-mode t) (solaire-mode-reset)))
#+end_src

* Controls
** Evil mode
*** evil-mode
#+begin_src emacs-lisp
(use-package evil
  :straight t
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-want-C-u-scroll t
        evil-undo-system 'undo-fu
        evil-scroll-count 8
        evil-respect-visual-line-mode t
        evil-mode-line-format nil)
  (evil-mode))

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

*** general
#+begin_src emacs-lisp
(use-package general
  :straight t
  :config (general-evil-setup t))
#+end_src

*** Evil collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :straight t
  :diminish evil-collection-unimpaired-mode
  :delight
  :config
  (setq evil-collection-setup-minibuffer t)
  (evil-collection-init)
  (evil-set-initial-state 'dired-mode 'normal))

#+end_src

** savehist
#+begin_src emacs-lisp
(use-package savehist
  :straight t
  :init
  (savehist-mode))
#+end_src

** Window management
*** transpose-frame
#+begin_src emacs-lisp
(use-package transpose-frame :straight t)
#+end_src

** Keybindings
*** -

#+begin_src emacs-lisp
(use-package bind-key :straight t)
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "C-j")  nil)
(global-set-key (kbd "<f1>") nil)
(global-set-key (kbd "<f2>") nil)
(global-set-key (kbd "<f3>") nil)
(global-set-key (kbd "<f4>") nil)
#+end_src

#+begin_src emacs-lisp
(global-set-key                   (kbd "€")       (kbd "$"))
(global-set-key                   (kbd "s-n")     (kbd "M-n"))
(global-set-key                   (kbd "s-p")     (kbd "M-p"))
(global-set-key                   (kbd "s-f")     (kbd "M-f"))
(global-set-key                   (kbd "s-b")     (kbd "M-b"))
(global-set-key                   (kbd "s-m")     nil)


(with-eval-after-load 'evil-maps  
  (define-key evil-normal-state-map (kbd "C-<return>")   'eldoc-doc-buffer)
  (define-key evil-normal-state-map (kbd "C-x k")   'kill-current-buffer)
  (define-key evil-normal-state-map (kbd "C-x K")   'kill-buffer)
  (define-key evil-normal-state-map (kbd "C-w C-x") 'delete-window)
  (define-key evil-normal-state-map (kbd "s-e")     'eshell)
  (define-key evil-normal-state-map (kbd "M-e")     'eshell)
  (define-key evil-normal-state-map (kbd "C-n") 'next-line)
  (define-key evil-normal-state-map (kbd "C-p") 'previous-line)
  (define-key evil-insert-state-map (kbd "C-n") 'nil)
  (define-key evil-insert-state-map (kbd "C-p") 'nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-normal-state-map (kbd "C-p") 'previous-line)
  (define-key evil-insert-state-map (kbd "C-n") 'nil)
  (define-key evil-normal-state-map (kbd "C-.") 'nil)
  (define-key evil-normal-state-map (kbd "C-w n")     'tab-next)
  (define-key evil-normal-state-map (kbd "C-w c")     'tab-new)
  (define-key evil-normal-state-map (kbd "C-<tab>")   'tab-next)
  (define-key evil-normal-state-map (kbd "C-S-<tab>") 'tab-previous))
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "s-q")        'save-buffers-kill-terminal)
(global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
(global-set-key (kbd "s-t")        'tab-new)
(global-set-key (kbd "s-w")        'tab-close)
(global-set-key (kbd "s-z")        nil)

(global-set-key (kbd "C-c bbl") 'niva/toggle-bing-bong-light)
(global-set-key (kbd "C-c bbd") 'niva/toggle-bing-bong-dark)
(global-set-key (kbd "C-c ct")  'consult-theme)
#+end_src

*** Window management
**** -
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  ;; -- use c-x instead --
  ;; (define-key evil-normal-state-map (kbd "C-w -")   'evil-window-split)
  ;; (define-key evil-normal-state-map (kbd "C-w |")   'evil-window-vsplit)
  ;; (define-key evil-normal-state-map (kbd "C-w _")   'evil-window-vsplit)
  ;; (define-key evil-normal-state-map (kbd "C-w S--") 'evil-window-vsplit)
  ;; (define-key evil-normal-state-map (kbd "C-w C--") 'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w SPC") 'transpose-frame)
  (define-key evil-normal-state-map (kbd "C-w H") 'buf-move-left)
  (define-key evil-normal-state-map (kbd "C-w J") 'buf-move-down)
  (define-key evil-normal-state-map (kbd "C-w K") 'buf-move-up)
  (define-key evil-normal-state-map (kbd "C-w L") 'buf-move-right)
  (define-key evil-normal-state-map (kbd "M-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "M->") 'ns-prev-frame)
  (define-key evil-normal-state-map (kbd "s-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "s->") 'ns-prev-frame))
#+end_src

**** Move to next frame if windmove fails
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map (kbd "C-w h") (lambda() (interactive)
                                                    (condition-case nil
                                                        (windmove-left)
                                                      (error (ns-next-frame)))))

  (define-key evil-normal-state-map (kbd "C-w l") (lambda() (interactive)
                                                    (condition-case nil
                                                        (windmove-right)
                                                      (error (ns-prev-frame))))))
#+end_src

**** Project
Don't prompt project switch action
#+begin_src emacs-lisp
(setq project-switch-commands 'project-find-file)
#+end_src

** which-key
#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :after evil
  :diminish
  :config
  (setq-default which-key-popup-type 'side-window)
  (which-key-mode))

(nvmap :keymaps 'override :prefix "SPC"
  ;; "SPC"   '(execute-extended-command          :which-key "M-x")
  "B"     '(consult-buffer-other-window       :which-key "consult-buffer-other-window")
  "b"     '(consult-buffer                    :which-key "consult-buffer")
  "c C"   '(recompile                         :which-key "recompile")
  "c a"   '(eglot-code-actions                :which-key "eglot-code-actions")
  "c c"   '(project-compile                   :which-key "project-compile")
  "c e"   '(consult-compile-error             :which-key "consult-compile-error")
  "c T"   '(niva/run-test-command             :which-key "niva/run-test-command")
  "p d"   '(project-dired                     :which-key "project-dired")
  "d d"   '(dired                             :which-key "dired")
  "d l"   '(devdocs-lookup                    :which-key "devdocs-lookup")
  "d r"   '(niva/deobfuscate-region           :which-key "niva/deobfuscate-region")
  "d u"   '(magit-diff-unstaged               :which-key "magit-diff-unstaged")
  "e r"   '(eval-region                       :which-key "eval-region")
  "e i"   '(eglot-inlay-hints-mode            :which-key "eglot-inlay-hints-mode")
  "f f"   '(find-file                         :which-key "find-file")
  "f m"   '(consult-flymake                   :which-key "consult-flymake")
  "h p"   '(ff-get-other-file                 :which-key "ff-get-other-file")
  "h g"   '(niva-guards                       :which-key "niva-guards")
  "h h"   '(consult-history                   :which-key "consult-history")
  "i m"   '(consult-imenu-multi               :which-key "consult-imenu")
  "L n"   '(global-display-line-numbers-mode  :which-key "global-display-line-numbers-mode")
  "l n"   '(display-line-numbers-mode         :which-key "display-line-numbers-mode")
  "o r"   '(niva/obfuscate-region             :which-key "niva/obfuscate-region")
  "p e"   '(profiler-stop                     :which-key "profiler-stop")
  "p f"   '(project-find-file                 :which-key "project-find-file")
  "p p"   '(project-switch-project            :which-key "project-switch-project")
  "p r"   '(profiler-report                   :which-key "profiler-report")
  "p s"   '(profiler-start                    :which-key "profiler-start")
  "r o"   '(read-only-mode                    :which-key "read-only-mode")
  "s h"   '(git-gutter:stage-hunk             :which-key "git-gutter:stage-hunk")
  "t r"   '(treemacs                          :which-key "treemacs")
  "t t"   '(toggle-truncate-lines             :which-key "Toggle truncate lines")
  "w U"   '(winner-redo                       :which-key "winner-redo")
  "w u"   '(winner-undo                       :which-key "winner-undo")
  "p b"   '(consult-project-buffer            :which-key "project-list-buffers")

  "gpt"   '(niva/gptel-common-buffer          :which-key "niva/gptel-common-buffer")
  "cmd"   '(project-async-shell-command       :which-key "project-async-shell-command")
  "elf"   '(elfeed                            :which-key "elfeed")
  "eww"   '(eww                               :which-key "eww")
  "rec"   '(consult-recent-file               :which-key "consult-recent-file")
  "rip"   '(niva/consult-ripgrep-in-directory :which-key "niva/consult-ripgrep-in-directory")
  "cir"   '(circe                             :which-key "circe")
  "ir"    '(niva/switch-irc-buffers           :which-key "niva/switch-irc-buffers")
  "SCR"   '(scratch-buffer                    :which-key "scratch-buffer")
  "tsfll" '(niva/prompt-treesit-level         :which-key "niva/prompt-treesit-level"))

(global-set-key (kbd "C-c early") (lambda () (interactive) (find-file "~/.config/emacs/early-init.el")))
(global-set-key (kbd "C-c scr")  (lambda () (interactive) (find-file "~/dev/stuff/persist-scratch.org")))
(global-set-key (kbd "C-c conf") (lambda () (interactive) (find-file "~/.config/emacs/config.org")))
(global-set-key (kbd "C-c ff")  'find-file)
#+end_src

** Undo
*** undo-fu
#+begin_src emacs-lisp
(use-package undo-fu
  :straight t
  :config
  (setq undo-fu-allow-undo-in-region t)
  (global-set-key (kbd "s-z")  'undo-fu-only-undo)
  (global-set-key (kbd "s-Z")  'undo-fu-only-redo)
  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "u") 'undo-fu-only-undo)
    (define-key evil-normal-state-map (kbd "U") 'undo-fu-only-redo)))
#+end_src

*** undo-fu-session
#+begin_src emacs-lisp
(use-package undo-fu-session
  :straight t
  :config
  (setq undo-fu-session-incompatible-files '(".cache/*" "/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  (global-undo-fu-session-mode))
#+end_src

*** vundo
#+begin_src emacs-lisp
(use-package vundo
  :straight t
  :config
  (setq vundo-glyph-alist vundo-unicode-symbols
        vundo-window-max-height 5
        vundo-compact-display t))
#+end_src

** buffer-move

#+begin_src emacs-lisp
(use-package buffer-move
  :straight t)
#+end_src

** Hydra

#+begin_src emacs-lisp
(use-package hydra
  :straight t
  :config
  (setq hydra-is-helpful nil)
  (with-eval-after-load 'evil-maps
    (defhydra hydra-win-resize (evil-normal-state-map "C-w")
      "Resize window"
      ("C-j" (lambda () (interactive) (evil-window-decrease-height 4)))
      ("C-k" (lambda () (interactive) (evil-window-increase-height 4)))
      ("C-h" (lambda () (interactive) (evil-window-decrease-width 8)))
      ("C-l" (lambda () (interactive) (evil-window-increase-width 8))))))

#+end_src

** imenu
#+begin_src emacs-lisp
(use-package imenu
  :straight (:type built-in)
  :defer t
  :config
  (setq org-imenu-depth 8))
#+end_src

** zoom
#+begin_src emacs-lisp
;; (global-unset-key (kbd "s-+"))
;; (global-unset-key (kbd "s--"))
;; (global-unset-key (kbd "s-0"))

(global-set-key (kbd "s-O") 'global-text-scale-adjust)
#+end_src

** embark
#+begin_src emacs-lisp
(use-package embark
  :straight t
  :bind (("C-." . embark-act)
         ("M-." . embark-dwim)
         :map minibuffer-local-map
         ("C-d" . embark-act)
         :map embark-region-map
         ("D" . denote-region)))

(use-package embark-consult
  :straight t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
* Completion
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :config
  (setq-default vertico-count 10
                vertico-resize t
                vertico-cycle t))

(use-package vertico-multiform
  :straight nil
  :load-path "straight/repos/vertico/extensions"
  :after vertico
  :config
  (setq-default vertico-sort-function #'vertico-sort-history-alpha
                vertico-multiform-commands
                '((consult-theme (vertico-sort-function . vertico-sort-alpha))))

  (vertico-mode)
  (vertico-multiform-mode))

(use-package vertico-mouse
  :straight nil
  :load-path "straight/repos/vertico/extensions"
  :after vertico
  :config
  (vertico-mouse-mode +1))
#+end_src

** Consult
#+begin_src emacs-lisp
(use-package consult
  :straight t
  :config
  (consult-customize
   consult-theme
   :preview-key '("M-." "C-SPC" :debounce 0.5 any))
  (setq consult-ripgrep-args "rg \
            --null \
            --line-buffered \
            --color=never \
            --max-columns=1000 \
            --path-separator / \
            --smart-case \
            --no-heading \
            --with-filename \
            --line-number \
            --hidden \
            --follow \
            --glob \"!.git/*\"")

  (defun niva/consult-ripgrep-in-directory ()
    (interactive)
    (let ((directory-to-search (read-directory-name "Search in directory: " nil nil t)))
      (consult-ripgrep (expand-file-name "." directory-to-search)))))
#+end_src

** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :init
  (marginalia-mode))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-modules 'org-tempo t)
(use-package yasnippet-snippets :straight t :defer t)

(use-package yasnippet
  :straight t
  :defer t
  :diminish yas-minor-mode
  :config (yas-global-mode 1))
#+end_src

** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-echo-documentation t
        corfu-preselect 'prompt
        corfu-auto-prefix 2
        corfu-count 5
        corfu-bar-width 0.0)

  (global-corfu-mode t)
  (corfu-popupinfo-mode))

(add-hook 'eshell-mode-hook (lambda () (setq-local corfu-auto t) (setq-local corfu-preselect 'prompt)))

(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

(use-package cape
  :straight t
  :config
  (setq cape-elisp-symbol-wrapper nil
        cape-dabbrev-min-length 4)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  (add-to-list 'completion-at-point-functions #'cape-keyword))

(use-package kind-icon
  :straight t
  :after corfu
  :defer t
  :config
  (setq kind-icon-use-icons t
        kind-icon-default-face 'corfu-default
        kind-icon-blend-background nil
        kind-icon-blend-frac 0.08
        kind-icon-default-style '(:padding -1 :stroke 0 :margin 0 :radius 0 :height 1.0 :scale 1.0)
        kind-icon-formatted 'variable)
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

* File management
** Dired
#+begin_src emacs-lisp
(use-package dirtree :straight t :defer t)
(use-package dired-subtree :straight t
  :after dired
  :defer t
  :hook ((dired-mode . dired-hide-details-mode))
  :config
  (setq dired-subtree-use-backgrounds nil
        dired-subtree-line-prefix "  │"
        dired-kill-when-opening-new-dired-buffer t)

  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map))

(use-package dired-collapse
  :straight t
  :after dired
  :defer t
  :init
  (with-eval-after-load 'evil-maps
    (evil-define-key 'normal dired-mode-map (kbd "H") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "L") 'dired-find-file))
  (add-hook 'dired-mode-hook 'dired-collapse-mode))

(use-package async :straight t
  :config
  (autoload 'dired-async-mode "dired-async.el" nil t)
  (dired-async-mode 1))
#+end_src


** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :straight t
  :defer t
  :config
  (setq treemacs-no-png-images t
        treemacs-file-follow-delay 0.03)
  (set-face-attribute 'treemacs-root-face nil :height 'unspecified :weight 'unspecified)
  (treemacs-hide-gitignored-files-mode t)
  (global-set-key (kbd "C-c t") 'treemacs))
#+end_src

#+begin_src emacs-lisp
(setq-default mac-escape-modifier nil
              mac-option-modifier 'meta
              mac-right-command-modifier 'meta
              mac-right-option-modifier 'nil)

(global-set-key (kbd "s-,") 'menu-set-font)
(global-set-key (kbd "M-,") 'menu-set-font)
#+end_src


** Other
#+begin_src emacs-lisp
(global-auto-revert-mode t)
(setq vc-follow-symlinks t)
#+end_src

* Performance
** Native compilation
#+begin_src emacs-lisp
(setq warning-minimum-level :error)
#+end_src

** Garbage collection
#+begin_src emacs-lisp
(setq-default garbage-collection-messages t
              gc-cons-threshold (* 16 1024 1024 1024))

(defvar niva/gc-timer nil)

(defun niva/garbage-collect-on-focus-lost ()
  (if (frame-focus-state)
      (when (timerp niva/gc-timer)
        (cancel-timer niva/gc-timer))
    (setq my/gc-timer (run-with-idle-timer 180 nil #'garbage-collect))))

(add-function :after after-focus-change-function #'niva/garbage-collect-on-focus-lost)
#+end_src

* Development
** C++
*** Other file
#+begin_src emacs-lisp
(setq cc-other-file-alist
      '(("\\.h\\'" (".cpp" ".c"))
        ("\\.hpp\\'" (".cpp" ".tpp"))
        ("\\.c\\'" (".h"))
        ("\\.cpp\\'" (".h" ".hpp" ".tpp"))
        ("\\.tpp\\'" (".hpp" ".cpp"))))
#+end_src

*** Mode extension
#+begin_src emacs-lisp
(dolist (pair '(("\\.tpp\\'" . c++-mode)
                ("\\.kts\\'" . java-mode)))
  (push pair auto-mode-alist))
#+end_src

*** Header guards
#+begin_src emacs-lisp
(require 'niva-guards)
(global-set-key (kbd "C-c h g") 'niva-guards)
#+end_src

** Python
*** Editing
#+begin_src emacs-lisp
(setq-default python-indent-block-paren-deeper t)
(setq-default python-indent-guess-indent-offset nil)
(setq-default python-indent-guess-indent-offset-verbose nil)
(setq-default python-indent-offset 4)
#+end_src

*** zmq
#+begin_src emacs-lisp
(use-package zmq
  :straight (zmq :host github :repo "nnicandro/emacs-zmq"))
#+end_src
*** jupyter
#+begin_src emacs-lisp
(use-package jupyter
  :straight (jupyter :type git :host github :repo "emacs-jupyter/jupyter")
  :defer t
  :bind ("C-c j p" . tempo-template-org-src-jupyter-:session-py))
;; Copied from nowislewis/nowisemacs
(defun my/org-babel-execute-src-block (&optional _arg info _params)
  "Load language if needed"
  (let* ((lang (nth 0 info))
         (sym (cond ((member (downcase lang) '("c" "cpp" "c++")) 'C)
                    ((member (downcase lang) '("jupyter-python")) 'jupyter)
                    ((member (downcase lang) '("sh" "bash" "zsh")) 'shell)
                    (t (intern lang))))
         (backup-languages org-babel-load-languages))
    (unless (assoc sym backup-languages)
      (condition-case err
          (progn
            (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t)))
            (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages)))
        (file-missing
         (setq-default org-babel-load-languages backup-languages)
         err)))))
(advice-add 'org-babel-execute-src-block :before #'my/org-babel-execute-src-block )

(setq org-babel-default-header-args:jupyter '((:kernel . "python") (:async . "yes")))
(add-to-list 'org-src-lang-modes '("jupyter" . python))
(setq-default org-confirm-babel-evaluate nil)
#+end_src

#+begin_src emacs-lisp
(use-package pyenv :straight t :defer t)
#+end_src

** Eldoc
#+begin_src emacs-lisp
(use-package eldoc
  :straight (:type built-in)
  :diminish
  :defer t
  :config
  (setq-default eldoc-idle-delay 0.4
                eldoc-echo-area-use-multiline-p t
                eldoc-echo-area-prefer-doc-buffer t
                eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)


  (diminish 'eldoc-mode))
(diminish 'abbrev-mode)
#+end_src

** Language server
*** Eglot
#+begin_src emacs-lisp
(use-package eglot
  :straight (:type built-in)
  :defer t
  :config
  (setq-default eglot-autoshutdown t)
  (setq-default eglot-sync-connect nil)
  (fset #'jsonrpc--log-event #'ignore)
  (setq-default eglot-events-buffer-size 0)
  (setq-default eglot-events-buffer-config '(:size 0))
  (setq-default eglot-extend-to-xref t)
  (setq-default eglot-report-progress 'messages)
  (setq-default eglot-send-changes-idle-time 5.0)

  (add-to-list 'eglot-server-programs '((c-mode c++-mode c++-ts-mode) .
                                        ("/opt/homebrew/bin/clangd"
                                         "--query-driver=/Applications/ARM/bin/arm-none-eabi-*"
                                         "--clang-tidy"
                                         "--completion-style=detailed"
                                         "--pch-storage=memory"
                                         "--header-insertion=never"
                                         "--background-index-priority=background"
                                         "-j=8"
                                         "--log=error"
                                         "--function-arg-placeholders"
                                         )))

  (add-to-list 'eglot-server-programs '((python-mode python-ts-mode)
                                        "basedpyright-langserver"
                                        "--stdio")))

(setq-default eglot-workspace-configuration `((:basedpyright . (:typeCheckingMode "basic"))))

(dolist (hook '(c-mode-hook c++-mode-hook c-ts-mode-hook c++-ts-mode-hook python-mode-hook python-ts-mode-hook))
  (add-hook hook 'eglot-ensure))

(advice-add 'eglot--mode-line-format :override (lambda () ""))

(with-eval-after-load 'eglot
  (add-hook 'eglot-managed-mode-hook (lambda () (eglot-inlay-hints-mode -1)))
  (set-face-attribute 'eglot-mode-line nil :inherit 'unspecified)

  (defun eglot--format-markup (markup)
    "Format MARKUP according to LSP's spec."
    (pcase-let ((`(,string ,mode)
                 (if (stringp markup) (list markup 'gfm-view-mode)
                   (list (plist-get markup :value)
                         (pcase (plist-get markup :kind)
                           ("markdown" 'gfm-view-mode)
                           ("plaintext" 'text-mode)
                           (_ major-mode))))))
      (with-temp-buffer
        (setq-local markdown-fontify-code-blocks-natively t)
        ;; >>> start of change >>>
        (setq string (replace-regexp-in-string "\n---" "  " string))
        ;; <<< end of change <<<
        (insert string)
        (let ((inhibit-message t)
              (message-log-max nil)
              match)
          (ignore-errors (delay-mode-hooks (funcall mode)))
          (font-lock-ensure)
          (goto-char (point-min))
          (let ((inhibit-read-only t))
            (when (fboundp 'text-property-search-forward)
              (while (setq match (text-property-search-forward 'invisible))
                (delete-region (prop-match-beginning match)
                               (prop-match-end match)))))
          (string-trim (buffer-string)))))))
#+end_src

#+begin_src emacs-lisp
(use-package eglot-booster
  :after eglot
  :straight (eglot-booster :type git :host github :repo "jdtsmith/eglot-booster")
  :config
  (setq-default eglot-booster-io-only t)
  (eglot-booster-mode))
#+end_src

** Flymake
#+begin_src emacs-lisp
(use-package flymake
  :straight (:type built-in)
  :config
  (setq flymake-start-on-save-buffer t
        flymake-no-changes-timeout 1
        flymake-fringe-indicator-position nil
        flymake-mode-line-lighter nil)

  (add-hook 'sh-mode-hook 'flymake-mode)
  (add-hook 'prog-mode-hook 'flymake-mode)
  (add-hook 'text-mode-hook 'flymake-mode))

(use-package flymake-cursor
  :straight t
  :config
  (setq-default flymake-cursor-number-of-errors-to-display 3))

(set-face-attribute 'compilation-error nil   :weight 'unspecified :background nil)
(set-face-attribute 'compilation-warning nil :weight 'unspecified :background nil)
;; (set-face-attribute 'warning nil             :weight 'unspecified :foreground 'unspecified :underline '(:color "orange" :style wave))
;; (set-face-attribute 'error nil               :weight 'unspecified :foreground 'unspecified :underline '(:color "red" :style wave))
(set-face-attribute 'flymake-warning nil     :weight 'unspecified :underline  '(:color "orange" :style wave))
(set-face-attribute 'flymake-error nil       :weight 'unspecified :underline  '(:color "red" :style wave))
(set-face-attribute 'compilation-info nil    :inherit nil :foreground "green" :weight 'unspecified)

(set-face-attribute 'warning nil             :weight 'unspecified :foreground "orange")
(set-face-attribute 'error nil               :weight 'unspecified :foreground "red")
(set-face-attribute 'compilation-info nil    :weight 'normal :background 'unspecified :foreground (face-attribute 'ansi-color-green :foreground))
(set-face-attribute 'warning nil             :weight 'normal :background 'unspecified :foreground (face-attribute 'ansi-color-yellow :foreground))
(set-face-attribute 'error nil               :weight 'normal :background 'unspecified :foreground (face-attribute 'ansi-color-red :foreground))
(set-face-attribute 'compilation-error nil   :weight 'unspecified)
(set-face-attribute 'compilation-warning nil :weight 'unspecified)
;; (set-face-attribute 'warning nil             :weight 'normal :background 'unspecified :foreground (face-attribute 'ansi-color-yellow :foreground))
#+end_src

** Tree-sitter
#+begin_src emacs-lisp
(use-package treesit
  :straight (:type built-in)
  :ensure t
  :config
  (add-to-list 'treesit-extra-load-path "~/.cache/emacs/tree-sitter")
  (setq-default c-ts-mode-indent-offset   tab-width
                json-ts-mode-indent-offset 4
                treesit-language-source-alist '((bash         "https://github.com/tree-sitter/tree-sitter-bash")
                                                (c            "https://github.com/tree-sitter/tree-sitter-c")
                                                (cpp          "https://github.com/tree-sitter/tree-sitter-cpp")
                                                (cmake        "https://github.com/uyha/tree-sitter-cmake")
                                                (js           "https://github.com/tree-sitter/tree-sitter-javascript")
                                                (json         "https://github.com/tree-sitter/tree-sitter-json")
                                                (python       "https://github.com/tree-sitter/tree-sitter-python")
                                                (tsx          "https://github.com/tree-sitter/tree-sitter-typescript")
                                                (typescript   "https://github.com/tree-sitter/tree-sitter-typescript")
                                                (rust         "https://github.com/tree-sitter/tree-sitter-rust")
                                                (yaml         "https://github.com/ikatyang/tree-sitter-yaml")))

  (dolist (pair '(("\\.sh\\'"           . bash-ts-mode)
                  ("\\.c\\'"            . c-ts-mode)
                  ("\\.h\\'"            . c-ts-mode)
                  ("\\.cpp\\'"          . c++-ts-mode)
                  ("\\.hpp\\'"          . c++-ts-mode)
                  ("\\.tpp\\'"          . c++-ts-mode)
                  ("\\.java\\'"         . java-ts-mode)
                  ("\\.js\\'"           . js-ts-mode)
                  ("\\.md\\'"           . json-ts-mode)
                  ("\\.json\\'"         . json-ts-mode)
                  ("\\.ts\\'"           . typescript-ts-mode)
                  ("\\.tsx\\'"          . tsx-ts-mode)
                  ("\\.css\\'"          . css-ts-mode)
                  ("\\.cmake\\'"        . cmake-ts-mode)
                  ("\\.py\\'"           . python-ts-mode)
                  ("\\.yaml\\'"         . yaml-ts-mode)
                  ("\\.clangd\\'"       . yaml-ts-mode)
                  ("\\.yml\\'"          . yaml-ts-mode)
                  ("\\.clang-format\\'" . yaml-ts-mode)
                  ("\\.clang-tidy\\'"   . yaml-ts-mode)))
    (push pair auto-mode-alist)))

(defun niva/prompt-treesit-level () (interactive)
       (setq treesit-font-lock-level (string-to-number (consult--prompt :prompt "treesit-font-lock-level: ")))
       (funcall major-mode))
#+end_src

** Formatting
*** Apheleia
#+begin_src emacs-lisp
(use-package apheleia
  :straight t
  :config
  (setq-default apheleia-mode-lighter nil)
  (setf (alist-get 'ruff apheleia-formatters)           '("ruff" "format" "--silent" "-"))
  (setf (alist-get 'ruff-isort apheleia-formatters)     '("ruff" "check" "--fix" "--select" "I" "-"))

  (setf (alist-get 'python-mode apheleia-mode-alist)    '(ruff ruff-isort))
  (setf (alist-get 'python-ts-mode apheleia-mode-alist) '(ruff ruff-isort))
  (setf (alist-get 'sh-mode apheleia-mode-alist)        '(shfmt))
  (setf (alist-get 'bash-ts-mode apheleia-mode-alist)   '(shfmt))
  (setf (alist-get 'c++-ts-mode apheleia-mode-alist)    '(clang-format))
  (setf (alist-get 'c++-mode apheleia-mode-alist)       '(clang-format))
  (setf (alist-get 'cmake-mode apheleia-mode-alist)     '(cmake-format))
  (setf (alist-get 'cmake-ts-mode apheleia-mode-alist)  '(cmake-format))
  (setf (alist-get 'c-ts-mode apheleia-mode-alist)    nil)
  (setf (alist-get 'c-mode apheleia-mode-alist)       nil)
  (apheleia-global-mode +1))
#+end_src


*** Delete empty lines
#+begin_src emacs-lisp
(defun niva/delete-empty-lines-at-top ()
  "Delete topmost lines if they contain no characters"
  (interactive)
  (save-excursion
    (when (> (count-lines (point-min) (point-max)) 1)
      (goto-char (point-min))
      (while (and (looking-at "^$") (> (count-lines (point-min) (point-max)) 1))
        (message "Removing empty first line")
        (delete-region (point) (progn (forward-line 1) (point)))))))

(add-hook 'before-save-hook #'niva/delete-empty-lines-at-top)
#+end_src

** Version control
*** diff-hl
#+begin_src emacs-lisp
(defun niva/diff-hl-fix ()
  (interactive)
  ;; (set-face-attribute 'diff-hl-change nil :inherit 'unspecified :background 'unspecified :foreground "blue3")
  ;; (set-face-attribute 'diff-hl-insert nil :inherit 'unspecified :background 'unspecified :foreground "green3")
  ;; (set-face-attribute 'diff-hl-delete nil :inherit 'unspecified :background 'unspecified :foreground "red3")
  (set-face-attribute 'diff-hl-change nil :inherit 'unspecified :background 'unspecified)
  (set-face-attribute 'diff-hl-insert nil :inherit 'unspecified :background 'unspecified)
  (set-face-attribute 'diff-hl-delete nil :inherit 'unspecified :background 'unspecified))

(use-package diff-hl
  :straight t
  :config

  (defun my-diff-hl-fringe-bmp-function (_type _pos)
    "Fringe bitmap function for use as `diff-hl-fringe-bmp-function'."
    (define-fringe-bitmap 'my-diff-hl-bmp
      (vector
       #b10000000
       #b00000000
       )
      2 8
      '(center t)))

  (setq diff-hl-fringe-bmp-function #'my-diff-hl-fringe-bmp-function)

  (setq diff-hl-draw-borders t
        diff-hl-side 'left
        diff-hl-margin-symbols-alist '((change . "[") ;"="
                                       (delete . "[") ;"-"
                                       (ignored . " ") ;"!"
                                       (insert . "[") ;"+"
                                       (unknown . " ") ;"?"
                                       ))
  (add-hook 'prog-mode-hook 'niva/diff-hl-fix)
  ;; (diff-hl-margin-mode)
  (global-diff-hl-mode))
#+end_src

*** magit
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :defer t
  :config
  (setq ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain
        magit-no-confirm nil)

  (setq magit-section-initial-visibility-alist
        '((stashes . hide) (untracked . hide) (unpushed . hide) ([unpulled status] . show)))

  (defun disable-y-or-n-p (orig-fun &rest args)
    (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
      (apply orig-fun args)))

  (advice-add 'ediff-quit :around #'disable-y-or-n-p))
#+end_src
** Documentation
*** markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :config
  (setq markdown-list-item-bullets '(""))
  (set-face-attribute 'markdown-code-face nil :background 'unspecified)
  (set-face-attribute 'markdown-line-break-face nil :underline 'unspecified)
  (setq markdown-hr-display-char nil))
#+end_src

*** helpful
#+begin_src emacs-lisp
(use-package helpful
  :straight (:host github :repo "wilfred/helpful")
  :bind (("C-h f" . helpful-callable)
		 ("C-h v" . helpful-variable)
		 ("C-h k" . helpful-key)
		 ("C-h F" . helpful-function)
		 ("C-h C" . helpful-command)
		 ("C-c C-d" . helpful-at-point)))
#+end_src

*** devdocs
#+begin_src emacs-lisp
(use-package devdocs
  :straight t
  :init
  (defvar lps/devdocs-alist
    '((python-ts-mode-hook     . "python~3.12")
      (c-ts-mode-hook          . "c")
      (c++-mode-hook           . "cpp")
      (c++-ts-mode-hook        . "cpp")
      (org-mode-hook           . "elisp")
      (emacs-lisp-mode-hook    . "elisp")
      (sh-mode-hook            . "bash")))

  (setq devdocs-window-select t)

  (dolist (pair lps/devdocs-alist)
    (let ((hook (car pair))
          (doc (cdr pair)))
      (add-hook hook `(lambda () (setq-local devdocs-current-docs (list ,doc))))))

  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "SPC g d")
                (lambda ()
                  (interactive)
                  (devdocs-lookup nil (thing-at-point 'symbol t))))))
#+end_src

** Running tests
#+begin_src emacs-lisp
(defun niva/run-test-command ()
  "Run command for testing"
  (interactive)
  (let* ((command-history (symbol-value 'my-run-test-project-command-history))
         (last-command (car command-history))
         (command (read-shell-command "Test command: " last-command 'my-run-test-project-command-history)))
    (compile command)))
(defvar niva/run-test-command-history nil)
#+end_src

* Terminal
** eshell
*** -
#+begin_src emacs-lisp
(use-package eshell
  :straight (:type built-in)
  :defer t
  :defines eshell-prompt-function
  :config
  (defalias 'ff 'find-file)
  (add-hook 'shell-mode-hook 'with-editor-export-editor)
  (add-hook 'eshell-mode-hook
            (lambda ()
              (define-key eshell-hist-mode-map (kbd "C-c C-l") nil)
              (define-key eshell-hist-mode-map (kbd "M-s")     nil)
              (define-key eshell-mode-map      (kbd "C-a")     'eshell-bol)
              (define-key eshell-mode-map      (kbd "C-l")     'eshell/clear)
              (define-key eshell-mode-map      (kbd "C-r")     'eshell-isearch-backward)
              (define-key eshell-mode-map      (kbd "C-u")     'eshell-kill-input)))

  (setq eshell-ask-to-save-history 'always
        eshell-banner-message ""
        eshell-cmpl-cycle-completions t
        eshell-cmpl-ignore-case t
        eshell-destroy-buffer-when-process-dies nil
        eshell-error-if-no-glob t
        eshell-glob-case-insensitive t
        eshell-hist-ignoredups t
        eshell-history-size 65535
        eshell-input-filter (lambda (input) (not (string-match-p "\\`\\s-+" input)))
        eshell-kill-processes-on-exit t
        eshell-scroll-to-bottom-on-input 'this
        eshell-scroll-to-bottom-on-output nil))

(setq system-name (car (split-string system-name "\\.")))
(setq eshell-prompt-regexp "^.+@.+:.+> ")
(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize (user-login-name) 'face 'font-lock-keyword-face)
         (propertize (format "@%s" (system-name)) 'face 'default)
         (propertize ":" 'face 'font-lock-doc-face)
         (propertize (abbreviate-file-name (eshell/pwd)) 'face 'font-lock-type-face)
         (propertize " $" 'face 'font-lock-doc-face)
         (propertize " " 'face 'default))))

(advice-add 'eshell/clear :override
            (defun niva--eshell/clear (&optional scrollback)
              (interactive)
              (let ((inhibit-read-only t))
                (erase-buffer)
                (eshell-send-input))))
#+end_src

*** eshell-syntax-highlighting
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :defer t
  :straight t
  :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

*** Kill buffer on quit
#+begin_src emacs-lisp
(defun niva/term-handle-exit (&optional process-name msg)
  "Kill buffer on quit"
  (kill-buffer (current-buffer)))

(advice-add 'term-handle-exit :after 'niva/term-handle-exit)
#+end_src

*** Log coloring
#+begin_src disabled
  (defun niva/font-lock-comment-annotations ()
    "Colorize keywords in eshell buffers"
    (interactive)
    (font-lock-add-keywords
     nil
     '(("\\<\\(.*ERR.*\\)"                                            1 'compilation-error   t)
       ("\\<\\(.*INFO.*\\)"                                           1 'compilation-info    t)
       ("\\<\\(.*DEBUG.*\\)"                                          1 'compilation-info    t)
       ("\\<\\(.*WARN.*\\)"                                           1 'compilation-warning t)
       ("\\<\\(.*DEBUG: --- CMD: POLL(60) REPLY: ISTATR(49) ---.*\\)" 1 'completions-common-part t)
       ("\\<\\(.*DEBUG: --- CMD: OUT(68) REPLY: ACK(40) ---.*\\)"     1 'completions-common-part t))))

  (add-hook 'eshell-mode-hook 'niva/font-lock-comment-annotations)
#+end_src

*** Alias
#+begin_src emacs-lisp
(defalias 'ff    "for i in ${eshell-flatten-list $*} {find-file $i}")
(defalias 'emacs "ff")
(defalias 'fo    "find-file-other-window $1")
(defalias 'ts    "ts '[%Y-%m-%d %H:%M:%S]'")
#+end_src

** exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :straight t
  :init (exec-path-from-shell-initialize))
#+end_src

* Compilation mode
#+begin_src emacs-lisp
(use-package xterm-color
  :straight t
  :config
  (defun from-face (face)
    (face-attribute face :foreground))
  (setq xterm-color-names
        `[,(from-face 'default)
          ,(from-face 'ansi-color-red)
          ,(from-face 'ansi-color-green)
          ,(from-face 'ansi-color-yellow)
          ,(from-face 'ansi-color-blue)
          ,(from-face 'ansi-color-magenta)
          ,(from-face 'ansi-color-cyan)
          ,(from-face 'ansi-color-white)
          ]))

(add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
(defun niva/advice-compilation-filter (f proc string)
  (funcall f proc (xterm-color-filter string)))

(use-package compile
  :straight (:type built-in)
  :config
  (setq compilation-error-regexp-alist (delete 'gnu compilation-error-regexp-alist))

  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-warning
                 "\\[Warning\\] \\(.*?\\):\\([0-9]+\\)"
                 1 2 3
                 0 1))

  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-error
                 "\\[Error\\] \\(.*?\\):\\([0-9]+\\):?\\([0-9]+\\)?"
                 1 2 3
                 1 1))

  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-mbed-error
                 "\\[mbed\\] ERROR: \"\\(.*?\\)\""
                 1 nil nil
                 1 1))

  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-include
                 "^\\(?:In file included \\|                 \\|\t\\)from \ \\([0-9]*[^0-9\n]\\(?:[^\n :]\\| [^-/\n]\\|:[^ \n]\\)*?\\):\ \\([0-9]+\\)\\(?::\\([0-9]+\\)\\)?\\(?:\\([:,]\\|$\\)\\)?"
                 1 2 3
                 (0 . 0) 1))

  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-include2
                 "\\[ERROR\\] In file included from \\(.*?\\):\\([0-9]+\\),"
                 1 2 nil
                 1 1))

  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-gcc-warning
                 "^\\(\\.\\/.*?\\|\\/.*?\\):\\([0-9]+\\)?:?\\([0-9]+\\)?: warning:"
                 1 2 3
                 1 1))

  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-gcc-required
                 "^\\(\\.\\/.*?\\|\\/.*?\\):\\([0-9]+\\)?:?\\([0-9]+\\)?: +required"
                 1 2 3
                 1 1))


  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-gcc-note
                 "^\\(\\.\\/.*?\\|\\/.*?\\):\\([0-9]+\\)?:?\\([0-9]+\\)?: note:" 1 2 3
                 0 1))

  (add-to-list 'compilation-error-regexp-alist-alist
               '(niva--compile-gcc-error
                 "^\\(\\.\\/.*?\\|\\/.*?\\):\\([0-9]+\\)?:?\\([0-9]+\\)?: error:"
                 1 2 3
                 nil 1))

  (setq compilation-error-regexp-alist nil)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-warning)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-error)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-mbed-error)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-include)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-include2)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-gcc-required)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-gcc-warning)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-gcc-note)
  (add-to-list 'compilation-error-regexp-alist 'niva--compile-gcc-error)

  (advice-add 'compilation-filter :around #'niva/advice-compilation-filter))
#+end_src

* Org Mode
#+begin_src emacs-lisp
(dolist (face '(org-level-1 org-level-2 org-level-3 org-level-4 org-level-5
                            org-level-6 org-level-7 org-level-8 org-ellipsis)))
#+end_src

** org
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t
      org-fontify-quote-and-verse-blocks t
      org-ellipsis " .."
      org-use-sub-superscripts nil)
(set-face-attribute 'org-ellipsis nil :foreground 'unspecified :underline 'unspecified)

(setq org-todo-keywords
      '((sequence "TODO" "STARTED" "REVIEW" "|" "DONE" "CANCELED")))

(setq org-todo-keyword-faces
      '(("TODO" . org-todo)
        ("STARTED" . (:foreground "darkorange3" :weight bold))
        ("REVIEW" . (:foreground "darkblue" :weight bold))))
#+end_src

** scratch
Use org mode in scratch buffer
#+begin_src emacs-lisp
(setq-default initial-major-mode 'org-mode)
#+end_src

** org-tempo
#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-modules 'org-tempo)
(dolist (pair '(("sh"   . "src sh")
                ("el"   . "src emacs-lisp")
                ("els"  . "src emacs-lisp :results silent")
                ("sc"   . "src scheme")
                ("ts"   . "src typescript")
                ("py"   . "src python")
                ("go"   . "src go")
                ("yaml" . "src yaml")
                ("json" . "src json")
                ("jp"   . "src jupyter :session py")
                ("cpp"  . "src cpp")))
  (add-to-list 'org-structure-template-alist pair))
#+end_src

** ob-async
#+begin_src emacs-lisp
(use-package ob-async
  :straight t
  :config
  (setq ob-async-no-async-languages-alist '("jupyter")))
#+end_src

** org code blocks
#+begin_src emacs-lisp
(defun ek/babel-ansi ()
  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
    (save-excursion
      (goto-char beg)
      (when (looking-at org-babel-result-regexp)
        (let ((end (org-babel-result-end))
              (ansi-color-context-region nil))
          (ansi-color-apply-on-region beg end))))))
(add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)

#+end_src

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

#+begin_src emacs-lisp
(defun narrow-to-region-indirect (start end)
  "Restrict editing in this buffer to the current region, indirectly."
  (interactive "r")
  (deactivate-mark)
  (let ((buf (clone-indirect-buffer nil nil)))
    (with-current-buffer buf
      (narrow-to-region start end))
    (switch-to-buffer buf)))
#+end_src

#+begin_src emacs-lisp
;; Disable < matching with (
(defun niva/org-syntax-remove-angle-bracket-match ()
  "Disable < matching with ("
  (interactive)
  (modify-syntax-entry ?< "." org-mode-syntax-table)
  (modify-syntax-entry ?> "." org-mode-syntax-table))

(add-hook 'org-mode-hook #'niva/org-syntax-remove-angle-bracket-match)
#+end_src

** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :defer t
  :straight t
  :config
  (when (fboundp 'niva/setup-org-roam)
    (niva/setup-org-roam))
  (org-roam-db-autosync-enable)
  (global-set-key (kbd "C-c z z") 'org-roam-capture))

(with-eval-after-load 'evil-maps
  (defun my/org-roam-open-link ()
    (interactive)
    (if (and (eq major-mode 'org-mode) (string-match-p org-link-any-re (thing-at-point 'line)))
        (call-interactively #'org-roam-node-find)
      (evil-ret)))
  (evil-define-key 'normal org-mode-map (kbd "RET") #'my/org-roam-open-link))
#+end_src

*** websocket

#+begin_src emacs-lisp
(use-package websocket
  :straight t
  :after org-roam)
#+end_src

*** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight t
  :after org-roam
  ;; :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-open-on-start nil
        org-roam-ui-update-on-save t))
#+end_src

** visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :straight t)
#+end_src

** adaptive-wrap
#+begin_src emacs-lisp
(use-package adaptive-wrap :straight t)
#+end_src

* Web
** shr
*** shr
#+begin_src emacs-lisp
(use-package shr
  :straight (:type built-in)
  :config
  (setq shr-use-fonts nil)
  (setq shr-max-width nil)
  (setq shr-fill-text nil)
  (setq shr-use-colors nil)

  (defun niva/create-image-content (spec size content-type flags)
    (let ((data (if (consp spec)
                    (car spec)
                  spec)))
      (cond
       ((eq size 'original)
        (create-image data nil t :ascent 100 :format content-type))
       ((eq content-type 'image/svg+xml)
        (create-image data 'svg t :ascent 100))
       (t
        (ignore-errors
          (shr-rescale-image data content-type
                             (plist-get flags :width)
                             (plist-get flags :height)))))))

  (setq niva--image-slice-divisor 1)
  (defun niva/handle-image-params (image alt start size)
    (let* ((image-pixel-cons (image-size image t))
           (image-pixel-width (car image-pixel-cons))
           (image-pixel-height (cdr image-pixel-cons))
           (image-scroll-rows (/ (round (/ image-pixel-height (default-font-height))) niva--image-slice-divisor)))
      ;; (when (and (> (current-column) 0) (> image-pixel-width 400))
      ;;   (insert "\n"))
      (insert-sliced-image image (or alt "*") nil image-scroll-rows 1)
      (put-text-property start (point) 'image-size size)
      (when (and shr-image-animate
                 (cond ((fboundp 'image-multi-frame-p)
                        (cdr (image-multi-frame-p image)))
                       ((fboundp 'image-animated-p)
                        (image-animated-p image))))
        (image-animate image nil 60))
      image))

  (advice-add 'shr-put-image :override
              (defun niva/shr-put-image (spec alt &optional flags)
                (if (display-graphic-p)
                    (let* ((size (cdr (assq 'size flags)))
                           (content-type (and (consp spec)
                                              (cadr spec)))
                           (start (point))
                           (image (niva/create-image-content spec size content-type flags)))
                      (if image
                          (niva/handle-image-params image alt start size)))
                  (insert (or alt "")))))


  (defun niva/shr-remove-underline-from-images (dom &optional url)
    (let ((start (point)))
      (shr-tag-img dom url)
      (put-text-property start (point) 'face '(:underline nil))))
  (setq shr-external-rendering-functions '((img . niva/shr-remove-underline-from-images)))

  ;; (setq image-transform-fit-width 500)

  )
#+end_src

*** shr-face
#+begin_src emacs-lisp
(use-package shr-tag-pre-highlight
  :straight t
  :init
  (defun shrface-shr-tag-pre-highlight (pre)
    "Highlighting code in PRE."
    (let* ((shr-folding-mode 'none)
           (shr-current-font 'default)
           (code (with-temp-buffer
                   (shr-generic pre)
                   (buffer-string)))
           (lang (or (shr-tag-pre-highlight-guess-language-attr pre)
                     (let ((sym (language-detection-string code)))
                       (and sym (symbol-name sym)))))
           (mode (and lang
                      (shr-tag-pre-highlight--get-lang-mode lang))))
      (shr-ensure-newline)
      (shr-ensure-newline)
      (setq start (point))
      (insert
       (propertize (concat "#+begin_src " lang "\n") 'face 'org-block-begin-line)
       (or (and (fboundp mode)
                (with-demoted-errors "Error while fontifying: %S"
                  (shr-tag-pre-highlight-fontify code mode)))
           code)
       (propertize "\n#+end_src" 'face 'org-block-end-line ))
      (shr-ensure-newline)
      (setq end (point))
      (add-face-text-property start end 'org-block)
      (shr-ensure-newline)
      (insert "\n")))
  :config
  (add-to-list 'shr-external-rendering-functions
               '(pre . shrface-shr-tag-pre-highlight)))

(add-to-list 'shr-tag-pre-highlight-lang-modes '("console" . sh))
(add-to-list 'shr-tag-pre-highlight-lang-modes '("groovy"  . java))
(add-to-list 'shr-tag-pre-highlight-lang-modes '("json"    . js-json))
(add-to-list 'shr-tag-pre-highlight-lang-modes '("systemd" . conf))
(add-to-list 'shr-tag-pre-highlight-lang-modes '("rust"    . rust-ts))

(use-package shrface
  :straight t
  :defer t
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings)
  (setq shrface-href-versatile t))

(add-hook 'eww-mode-hook
          (lambda ()
            (setq visual-fill-column-center-text nil
                  visual-fill-column-fringes-outside-margins t
                  visual-fill-column-extra-text-width '(-4 . 0)
                  visual-fill-column-width 100)
            (adaptive-wrap-prefix-mode 1)
            (visual-fill-column-mode)))

(add-hook 'eww-mode-hook
          (lambda ()
            (hl-line-mode +1)
            (setq-local evil-normal-state-cursor '(hollow))))
#+end_src

** eww
#+begin_src emacs-lisp
(setq-default browse-url-browser-function 'eww-browse-url
              shr-use-fonts nil
              shr-use-colors t
              eww-search-prefix "https://duckduckgo.com/?q=")


(with-eval-after-load 'eww
  (with-eval-after-load 'evil-maps
    (define-key eww-mode-map (kbd "ö")     (lambda () (interactive) (evil-forward-paragraph) (forward-line 1) (evil-scroll-line-to-center nil)))
    (define-key eww-mode-map (kbd "ä")     (lambda () (interactive) (evil-backward-paragraph 2) (forward-line 1) (evil-scroll-line-to-center nil)))))

(dolist (face '(;; shr-h1
                ;; shr-text
                ;; shr-code
                ;; variable-pitch-text
                gnus-header
                info-title-1
                info-title-2
                info-title-3
                info-title-4
                help-for-help-header
                ;; variable-pitch
                ;; variable-pitch-text
                read-multiple-choice-face
                help-key-binding
                ;; fixed-pitch
                ;; fixed-pitch-serif
                info-menu-header))
  (ignore-errors
    (set-face-attribute face nil
                        :height 'unspecified
                        :inherit 'default
                        ;; :family 'unspecified
                        :weight 'unspecified)))
#+end_src

#+begin_src emacs-lisp
(defun niva/eww-toggle-images ()
  (interactive)
  (setq-local shr-inhibit-images (not shr-inhibit-images))
  (eww-reload))
#+end_src

** webkit
#+begin_src emacs-lisp
;; (setq browse-url-browser-function (lambda (url session) (other-window 1) (xwidget-webkit-browse-url url)))
#+end_src

** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :straight t
  :defer t
  :hook (elfeed-search-mode . elfeed-update)
  :config
  (setq elfeed-search-title-max-width 120)
  (setq elfeed-search-filter "+unread")
  (setq elfeed-show-truncate-long-urls nil)
  (setq shr-inhibit-images t)

  (require 'niva-elfeed)

  (add-to-list 'display-buffer-alist
               '(("\\*elfeed-show\\*"
                  (display-buffer-same-window))))

  (define-key elfeed-show-mode-map (kbd "å") 'elfeed-show-next)
  (define-key elfeed-show-mode-map (kbd "¨") 'elfeed-show-prev))
#+end_src

** elfeed-protocol
#+begin_src emacs-lisp
(use-package elfeed-protocol
  :straight t
  :after elfeed
  :config
  (require 'niva-elfeed-protocol)
  (setq elfeed-use-curl t
        elfeed-sort-order 'descending
        elfeed-protocol-enabled-protocols '(fever)
        elfeed-protocol-fever-update-unread-only nil
        elfeed-protocol-fever-maxsize 120
        elfeed-protocol-fever-fetch-category-as-tag t
        elfeed-protocol-feeds (list (list niva/elfeed-fever-url
                                          :api-url niva/elfeed-api-url
                                          :password (niva/lookup-password :host "fever"))))
  (elfeed-protocol-enable)

  (define-key elfeed-search-mode-map              (kbd "I") #'niva/elfeed-toggle-images)
  (with-eval-after-load 'evil-maps
    (evil-define-key 'normal elfeed-show-mode-map "I" #'niva/elfeed-toggle-images)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "C-p") #'evil-previous-line)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "C-n") #'evil-next-line)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "k") #'evil-previous-line)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "j") #'evil-next-line)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "x") #'elfeed-search-untag-all-unread)
    (evil-define-key 'normal elfeed-show-mode-map   (kbd "'") #'niva/elfeed--move-paragraph-up)
    (evil-define-key 'normal elfeed-show-mode-map   (kbd ";") #'niva/elfeed--move-paragraph-down)
    (evil-define-key 'normal elfeed-search-mode-map "r" 'elfeed-update)

    (defun niva/eww--move-paragraph-up ()
      (interactive)
      (if (derived-mode-p 'eww-mode)
          (condition-case nil
              (progn
                (evil-backward-paragraph 2)
                (forward-line 1)
                (evil-scroll-line-to-center nil)))))

    (defun niva/eww--move-paragraph-down ()
      (interactive)
      (if (derived-mode-p 'eww-mode)
          (condition-case nil
              (progn
                (evil-forward-paragraph)
                (evil-scroll-line-to-center nil)
                (forward-line 1)))))

    (evil-define-key 'normal eww-mode-map   (kbd "'") #'niva/eww--move-paragraph-up)
    (evil-define-key 'normal eww-mode-map   (kbd ";") #'niva/eww--move-paragraph-down)))
#+end_src


*** Customization
#+begin_src emacs-lisp
(use-package relative-date :straight (relative-date :host github :repo "rougier/relative-date"))
#+end_src

** gptel
#+begin_src emacs-lisp
(use-package gptel
  :diminish gptel-mode
  :defer t
  :straight (gptel :host github :repo "karthink/gptel" branch "master")
  :config

  (setq ollama-backend (gptel-make-ollama "ollama" :host "localhost:11434" :stream t :models '("llama3:latest" "deepseek-coder:6.7b-instruct")))

  (setq-default gptel-default-mode #'org-mode
                gptel-max-tokens 4096
                gptel-prompt-prefix-alist '((org-mode . "> "))
                gptel-stream t
                gptel-use-header-line nil
                gptel-model 'gpt-4o-mini))

(with-eval-after-load 'gptel
  (define-key gptel-mode-map (kbd "C-c m") 'gptel-menu)
  (with-eval-after-load 'evil-maps
    (evil-define-key 'normal gptel-mode-map (kbd "q") 'switch-to-prev-buffer)
    (evil-define-key 'normal gptel-mode-map (kbd "C-g") 'delete-window)
    (add-hook 'gptel-mode-hook 'evil-insert-state)))

(defun niva/gptel-common-buffer () (interactive) (gptel "*gptel*" nil nil t))
(global-set-key (kbd "C-c p") 'niva/gptel-common-buffer)
(add-to-list 'display-buffer-alist
             '(("\\*gptel\\*" gptel-mode
                (display-buffer-same-window))))

#+end_src

* My packages
** hl-paragraph-mode
#+begin_src emacs-lisp
(use-package hl-paragraph-mode
  :straight (:host github :repo "niklasva/hl-paragraph-mode")
  :config
  (setq hl-paragraph-highlight-entire-line t)
  (set-face-attribute 'hl-paragraph-face nil
                      :inherit    'region
                      :inverse-video nil
                      :foreground 'unspecified
                      ))
#+end_src

** org-header-line-outline
#+begin_src emacs-lisp
(use-package org-header-line-outline
  :after org
  :straight (:host github :repo "niklasva/org-header-line-outline")
  :config
  (add-hook 'org-mode-hook (lambda() (unless (equal (buffer-name) "*scratch*") (org-header-line-outline-mode)))))
#+end_src

* Experiment

**** shr-face
#+end_src

#+begin_src emacs-lisp
(use-package popper
  :straight t
  :bind (:map popper-mode-map
              ("C-<TAB>"   . popper-cycle)
              ("C-c <TAB>"   . popper-toggle))
  :hook (emacs-startup . popper-mode)

  :init
  (setq popper-reference-buffers
        '("Output\\*$" "\\*Pp Eval Output\\*$"
          "\\*Compile-Log\\*"
          ;; compilation-mode
          "^\\*eldoc.*\\*.*$" eldoc-mode
          elfeed-search-mode
          "\\*Flycheck errors\\*$" " \\*Flycheck checker\\*$"
          "\\*ChatGPT\\*$" gptel-mode
          "\\*gptel\\*$" gptel-mode
          ))

  :config
  (popper-echo-mode 1)

  ;; HACK: close popper window with `C-g'
  (defun +popper-close-window-hack (&rest _)
    "Close popper window via `C-g'."
    (when (and (called-interactively-p 'interactive)
               (not (region-active-p))
               popper-open-popup-alist)
      (let ((window (caar popper-open-popup-alist)))
	    (when (window-live-p window)
          (delete-window window)))))
  (advice-add #'keyboard-quit :before #'+popper-close-window-hack))
  #+end_src
**** org-download
#+begin_src emacs-lisp
(use-package org-download :straight t)
#+end_src
