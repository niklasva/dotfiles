#+TITLE: config.org
#+PROPERTY: header-args : tangle "~/.config/emacs/config.el" :results silent
#+OPTIONS: toc:2

* Pre-init
#+STARTUP: overview
** Startup garbage collection
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'emacs-startup-hook (lambda () (setq gc-cons-threshold (expt 2 23))))
#+end_src

** GUI settings

#+begin_src emacs-lisp
(setq inhibit-startup-message t
    inhibit-startup-echo-area-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode nil)
(menu-bar-mode 1)
(set-fringe-mode 1)
(global-visual-line-mode t)

(setq-default left-fringe-width 16
            right-fringe-width 3)
#+end_src

#+begin_src emacs-lisp
  (setq window-divider-default-places t
        window-divider-default-bottom-width 1
        window-divider-default-right-width 1)

  (window-divider-mode 1)

  (setq ns-use-thin-smoothing t
        ns-use-proxy-icon nil
        ns-use-mwheel-momentum t
        ns-use-mwheel-acceleration t
        frame-resize-pixelwise t)

  (use-package tab-bar-echo-area
    :ensure t
    :defer t
    :config
    (tab-bar-echo-area-mode 1))

  (defun niva/tab-bar-config ()
    (setq tab-bar-show nil
          tab-bar-auto-width-max '(120 . 20)
          tab-bar-close-button-show nil
          tab-bar-close-tab-select 'recent
          tab-bar-new-button-show nil
          tab-bar-new-tab-to 'right
          tab-bar-position nil
          tab-bar-tab-name-function 'tab-bar-tab-name-current)

    (set-face-attribute 'tab-bar nil
                        :box nil
                        :background (face-attribute 'default :background))
    (set-face-attribute 'tab-bar-tab nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-keyword-face :foreground))
    (set-face-attribute 'tab-bar-tab-inactive nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-comment-face :foreground)))
  (niva/tab-bar-config)

  (global-hl-line-mode -1)
  (blink-cursor-mode 1)
#+end_src

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

Prevent accidental close.

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

#+begin_src disabled
(use-package popwin
  :ensure t
  :init (popwin-mode 1)
  :config (push '(compilation-mode :noselect t) popwin:special-display-config))
#+end_src

* Package management
** Setup package.el to work with melpa.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))
#+end_src

** Installing use-package
#+begin_src emacs-lisp
  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+end_src

* Encryption
** gpg
#+begin_src emacs-lisp
  (use-package pinentry
  :ensure t
  :config (pinentry-start))
  #+end_src

** authinfo
#+begin_src emacs-lisp
  (setq auth-sources
        '((:source "~/.authinfo.gpg")))

  (defun niva/lookup-password (&rest keys)
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))
#+end_src

* Text edit settings
** Defaults
#+begin_src emacs-lisp
  (setq-default
   c-basic-offset 4
   c-default-style "linux"
   c-ts-mode-indent-offset 4
   c-ts-mode-indent-style "linux"
   create-lockfiles nil
   evil-auto-indent t
   indent-line-function 'evil-indent-line
   indent-tabs-mode nil
   completion-cycle-threshold 3
   tab-always-indent 'complete
   tab-width 4)
  (column-number-mode)
  (electric-indent-mode +1)
#+end_src

#+begin_src emacs-lisp
  (setq-default scroll-preserve-screen-position t
                scroll-conservatively 5
                maximum-scroll-margin 0.5
                scroll-margin 4)
#+end_src

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

#+begin_src emacs-lisp
  (defun prog-pair-hook ()
    (setq electric-pair-inhibit-predicate (lambda (c) (or
                                                       (char-equal c ?\()
                                                       (or
                                                        (char-equal c ?\")
                                                        (char-equal c ?\<)))))
    (electric-pair-mode 1))
  (add-hook 'prog-mode-hook 'prog-pair-hook)

  (defun c-pair-hook ()
    (setq electric-pair-inhibit-predicate (lambda (c) (or
                                                       (char-equal c ?\")
                                                       (char-equal c ?\<))))
    (electric-pair-mode 1))
  (add-hook 'c-mode-hook 'prog-pair-hook)
  (add-hook 'c++-mode-hook 'prog-pair-hook)
  (add-hook 'c-ts-mode-hook 'prog-pair-hook)
  (add-hook 'c++-ts-mode-hook 'prog-pair-hook)
#+end_src

#+begin_src emacs-lisp

  (defun indent-tabs-hook ()
    (setq tab-width 2
          indent-tabs-mode t
          evil-auto-indent t
          c-basic-offset 2))

  (add-hook 'c++-mode-hook    'indent-tabs-hook)
  (add-hook 'c-mode-hook      'indent-tabs-hook)
  (add-hook 'c++-ts-mode-hook 'indent-tabs-hook)
  (add-hook 'c-ts-mode-hook   'indent-tabs-hook)
#+end_src

#+begin_src emacs-lisp
  (setq org-src-strip-leading-and-trailing-blank-lines t
        org-src-tab-acts-natively t)

#+end_src

Enable line numbers for some modes
#+begin_src emacs-lisp
  (setq-default display-line-numbers-width 4)

  (dolist (mode '(org-mode-hook text-mode-hook prog-mode-hook conf-mode-hook))
    (add-hook mode (lambda ()
                     (display-line-numbers-mode 1))))
#+end_src

Override some modes which derive from the above
#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook)) (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Show only one active window when opening multiple files at the same time.
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'delete-other-windows)
#+end_src

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Always move cursor to help window
#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

Remove trailing spaces
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Scroll compilation buffer
#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

#+begin_src emacs-lisp
  (defun show-trailing-whitespace-hook () (setq show-trailing-whitespace t))
  (add-hook 'prog-mode-hook 'show-trailing-whitespace-hook)
#+end_src

** Hide buffers

Hide buffers by prepending space to buffer name.
#+begin_src emacs-lisp
  (defun niva/hide-buffer (bufname)
    (if (get-buffer bufname)
        (with-current-buffer bufname
          (rename-buffer (concat " " bufname)))))

  (defun remove-messages-buffer ()
    (niva/hide-buffer "*Messages*"))

  ;; (add-hook 'after-change-major-mode-hook 'remove-messages-buffer)

  (defun hide-lsp-buffers ()
    (interactive)
    (setq-default message-log-max nil)
    (niva/hide-buffer "*clangd*")
    (niva/hide-buffer "*clangd::stderr*")
    (niva/hide-buffer "*pyright*")
    (niva/hide-buffer "*pyright::stderr*"))
  ;; (add-hook 'after-change-major-mode-hook 'hide-lsp-buffers)
#+end_src

Don't show *Buffer list* when opening multiple files at the same time.
#+begin_src emacs-lisp
  (setq inhibit-startup-buffer-menu t)
#+end_src

** Clipboard
Prevent emacs from contaminating system clipboard.
#+begin_src emacs-lisp
  (use-package simpleclip
    :ensure t
    :config
    (setq interprogram-cut-function 'simpleclip-set-contents
          interprogram-paste-function 'simpleclip-get-contents)
    (simpleclip-mode 1))
#+end_src

* Customization
** Theme
*** Theme packages
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :defer t
    :custom (doom-themes-enable-bold nil)
    (doom-themes-org-config)
    (doom-themes-enable-italic t))
#+end_src

*** Modus
#+begin_src emacs-lisp
  (setq modus-themes-bold-constructs nil
        modus-themes-hl-line (quote (accented))
        modus-themes-org-blocks nil
        modus-themes-region '(bg-only)
        modus-themes-tabs-accented t)

  (setq modus-themes-common-palette-overrides
        '((fringe unspecified)
          (border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)))

  (setq modus-themes-completions '((matches . (background minimal))
                                   (selection . (background minimal))
                                   (popup . (background minimal))))

#+end_src
*** Window divider fix
#+begin_src emacs-lisp
  (defun niva/fix-window-divider-color ()
    "Correct window divider after switching theme"
    (interactive)
    (set-face-foreground 'window-divider (face-attribute 'default :background))
    (set-face-foreground 'window-divider-first-pixel (face-attribute 'default :background))
    (set-face-foreground 'window-divider-last-pixel (face-attribute 'default :background)))
#+end_src

*** Load theme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (load-theme 'doom-feather-light t)
#+end_src

** Compilaton mode
#+begin_src emacs-lisp
  (use-package xterm-color :ensure t)
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'my/advice-compilation-filter)
#+end_src

** Mode line
*** Mode line format

#+begin_src emacs-lisp
  (setq-default mode-line-format
                '("%e "
                  (:eval (if (and buffer-file-name (buffer-modified-p))
                             (propertize "%b" 'face `(:slant oblique))
                           "%b"))
                  (:eval
                   (if vc-mode
                       (let*
                           ((noback (replace-regexp-in-string
                                     (format "^ %s" (vc-backend buffer-file-name)) " " vc-mode))
                            (face (cond ((string-match "^ -" noback) 'mode-line-vc)
                                        ((string-match "^ [:@]" noback) 'mode-line-vc-edit)
                                        ((string-match "^ [!\\?]" noback) 'mode-line-vc-modified))))
                         (format " |  %s" (substring noback 2)))))
                  " | %l:%c"
                  global-mode-string
                  ))
#+end_src

*** Display time

#+begin_src emacs-lisp
  (setq display-time-format "%+4Y-%m-%d %H:%M"
        display-time-default-load-average nil)

  (defun display-time-bottom-right ()
    (and (equal (cddr (window-pixel-edges))
                (cddr (window-pixel-edges (frame-root-window))))
         '(#(" " 0 1 (display (space :align-to (- right 18))))
           " "display-time-string)))
  (display-time-mode)
  (setq global-mode-string '(:eval (display-time-bottom-right)))
#+end_src

#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+end_src

* Controls
** Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :defer t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-want-C-u-scroll t
          evil-undo-system 'undo-redo
          evil-scroll-count 8)
    (evil-mode))

  (use-package transpose-frame
    :ensure t)

  (use-package general
    :ensure t
    :config (general-evil-setup t))
#+end_src

*** Evil collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    ;;(setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

*** savehist
#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (setq mac-escape-modifier nil
        mac-option-modifier nil
        mac-right-command-modifier 'meta)
  (setq mac-pass-command-to-system t)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-j") nil)
  (global-set-key (kbd "C-k") nil)
#+end_src

#+begin_src emacs-lisp

  (global-set-key                   (kbd "€") (kbd "$"))
  (global-set-key                   (kbd "<f13>") 'evil-invert-char)
  (define-key evil-insert-state-map (kbd "C-c C-e") 'comment-line)
  (define-key evil-visual-state-map (kbd "C-c C-e") 'comment-line)

  (define-key evil-normal-state-map (kbd "U")       'evil-redo)

  (define-key evil-normal-state-map (kbd "C-a C-x") 'kill-this-buffer)
  (define-key help-mode-map         (kbd "C-a C-x") 'evil-delete-buffer)
  (define-key evil-normal-state-map (kbd "C-w C-x") 'delete-window)
  (define-key evil-normal-state-map (kbd "M-e")     'eshell)
  (define-key evil-normal-state-map (kbd "B V")     'org-babel-mark-block)
  (define-key evil-normal-state-map (kbd "SPC e b") 'org-babel-execute-src-block-maybe)


  (define-key evil-normal-state-map (kbd "C-b n")   'evil-next-buffer)
  (define-key evil-normal-state-map (kbd "C-b p")   'evil-previous-buffer)
  (define-key evil-normal-state-map (kbd "C-b C-b") 'evil-switch-to-windows-last-buffer)
#+end_src

Window management
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w n")     'tab-next)
  (define-key evil-normal-state-map (kbd "C-w c")     'tab-new)
  (define-key evil-normal-state-map (kbd "C-<tab>")   'tab-next)
  (define-key evil-normal-state-map (kbd "C-S-<tab>") 'tab-previous)

  (define-key evil-normal-state-map (kbd "C-w -")   'evil-window-split)
  (define-key evil-normal-state-map (kbd "C-w |")   'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w SPC") 'transpose-frame)

  (define-key evil-normal-state-map (kbd "C-w C-j") (lambda () (interactive) (evil-window-decrease-height 4)))
  (define-key evil-normal-state-map (kbd "C-w C-k") (lambda () (interactive) (evil-window-increase-height 4)))
  (define-key evil-normal-state-map (kbd "C-w C-h") (lambda () (interactive) (evil-window-decrease-width 8)))
  (define-key evil-normal-state-map (kbd "C-w C-l") (lambda () (interactive) (evil-window-increase-width 8)))

  (define-key evil-normal-state-map (kbd "C-w H") 'buf-move-left)
  (define-key evil-normal-state-map (kbd "C-w J") 'buf-move-down)
  (define-key evil-normal-state-map (kbd "C-w K") 'buf-move-up)
  (define-key evil-normal-state-map (kbd "C-w L") 'buf-move-right)

  (define-key evil-normal-state-map (kbd "s-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "s->") 'ns-prev-frame)
  (define-key evil-normal-state-map (kbd "M-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "M->") 'ns-prev-frame)
#+end_src

#+begin_src disabled
  (defvar dashboard-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map [mouse-1]      'dashboard-mouse-1)
      (define-key map (kbd "C-p")    'dashboard-previous-line)
      (define-key map (kbd "C-n")    'dashboard-next-line)
      (define-key map (kbd "<up>")   'dashboard-previous-line)
      (define-key map (kbd "<down>") 'dashboard-next-line)
      (define-key map (kbd "k")      'dashboard-previous-line)
      (define-key map (kbd "j")      'dashboard-next-line)
      (define-key map [tab]          'evil-next-buffer)
      (define-key map [backtab]      'evil-prev-buffer)
      (define-key map (kbd "C-i")    'widget-forward)
      (define-key map (kbd "RET")    'dashboard-return)
      (define-key map (kbd "}")      #'dashboard-next-section)
      (define-key map (kbd "{")      #'dashboard-previous-section)
      map)
    "Keymap for dashboard mode.")
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "s-q")        'save-buffers-kill-terminal)
  (global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
  (global-set-key (kbd "s-t")        'tab-new)
  (global-set-key (kbd "s-w")        'tab-close)
  (global-set-key (kbd "s-z")        nil)

#+end_src

** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode))

  (nvmap :keymaps 'override :prefix "SPC"
    "SPC"   '(execute-extended-command :which-key "M-x")

    "c c"   '(compile :which-key "Compile")
    "c C"   '(recompile :which-key "Recompile")

    "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Reload emacs config")
    "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")

    "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
    "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
    "m ."   '(counsel-org-goto :which-key "Counsel org goto")
    "m e"   '(org-export-dispatch :which-key "Org export dispatch")
    "m f"   '(org-footnote-new :which-key "Org footnote new")
    "m h"   '(org-toggle-heading :which-key "Org toggle heading")
    "m i"   '(org-toggle-item :which-key "Org toggle item")
    "m n"   '(org-store-link :which-key "Org store link")
    "m o"   '(org-set-property :which-key "Org set property")
    "m t"   '(org-todo :which-key "Org todo")
    "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
    "m B"   '(org-babel-tangle :which-key "Org babel tangle")
    "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
    "m T"   '(org-todo-list :which-key "Org todo list")
    "o a"   '(org-agenda :which-key "Org agenda")
    "b"     '(ido-switch-buffer :which-key "Switch buffer")
    "B"     '(project-switch-to-buffer :which-key "Switch buffer")
    "h p"   '(ff-find-other-file :which-key "ff-find-other-file")

    "p e"   '(projectile-recentf :which-key "projectile-recentf")
    "e r"   '(eval-region :which-key "eval-region")

    "c a"   '(eglot-code-actions :which-key "eglot-code-actions")

    "n"     '(flycheck-next-error :which-key "flycheck-next-error")
    "N"     '(flycheck-previous-error :which-key "flycheck-previous-error")

    "conf"  '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")
    "vconf" '((lambda () (interactive) (split-window-right)
                (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")
    "sconf" '((lambda () (interactive) (split-window-below)
                (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")

    "d l"   '(devdocs-lookup :which-key "devdocs-lookup")
    "rec"   '(recentf-open :which-key "devdocs-lookup")

    "elf"   '(elfeed :which-key "elfeed")
    "eww"   '(eww :which-key "eww")
    "wu" '(winner-undo :which-key "winner-undo")
    "wU" '(winner-redo :which-key "winner-redo"))

#+end_src

** m-x

#+begin_src emacs-lisp
  (use-package smex
    :ensure t)
  (smex-initialize)
#+end_src

#+begin_src emacs-lisp
  (use-package tramp
    :ensure t
    :defer t
    :config
    (set-default 'tramp-auto-save-directory "~/.config/emacs/temp")
    (set-default 'tramp-default-method "plink"))
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package vertico-posframe
    :ensure t
    :after vertico
    :when (display-graphic-p)
    :config
    (setq vertico-posframe-parameters
          '((max-width . 0.8)
            (min-width . 0.8)
            (left-fringe . 8)
            (right-fringe . 8))
          vertico-posframe-border-width 1)

    (set-face-attribute 'vertico-posframe nil :background (face-attribute 'fringe :background))
    (vertico-posframe-mode))

#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    :ensure t)
#+end_src

** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-quit-no-match 'separator)
    (corfu-preselect 'valid)

    (corfu-echo-documentation t)
    (corfu-auto-delay 0)
    (corfu-auto-prefix 1)
    :bind
    (:map corfu-map
          ("TAB"     . corfu-next)
          ("C-SPC"   . corfu-next)
          ([tab]     . corfu-next)
          ("S-TAB"   . corfu-previous)
          ("C-S-SPC" . corfu-previous)
          ([backtab] . corfu-previous))

    :init
    (corfu-popupinfo-mode)
    (global-corfu-mode))

  (add-hook 'eshell-mode-hook (lambda () (setq-local corfu-auto nil) (corfu-mode)))

  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))

  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** buffer-move
#+begin_src emacs-lisp
  (use-package buffer-move :ensure t)
#+end_src

* File management
** Ranger

#+begin_src emacs-lisp
  (use-package ranger
    :ensure t
    :defer t
    :config
    (ranger-override-dired-mode t)
    (setq ranger-cleanup-eagerly t)
    (setq ranger-show-literal t)
    (setq ranger-cleanup-on-disable t))

  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC" "r r" '(ranger : "Open ranger"))
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init (setq projectile-enable-caching t)
    :config
    (add-to-list 'projectile-globally-ignored-directories ".cache")
    (add-to-list 'projectile-globally-ignored-directories ".DS_Store")
    (add-to-list 'projectile-globally-ignored-directories ".vscode")
    (add-to-list 'projectile-globally-ignored-directories "BUILD")
    (projectile-mode +1)
    (projectile-global-mode 1)
    (setq
     projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".swp" ".so" ".a" ".d" ".ld")
     projectile-globally-ignored-files '("TAGS" "tags" ".DS_Store")
     projectile-ignored-projects `("~/.pyenv/")
     projectile-mode-line-function #'(lambda () (format " [%s]" (projectile-project-name)))
     projectile-enable-caching t
     projectile-indexing-method 'native
     projectile-file-exists-remote-cache-expire nil)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map)))
#+end_src

** File-related keybindings
#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "."     '(lambda () (interactive)
               (setq-local tmpdir default-directory)
               (cd "~")
               (call-interactively 'find-file)
               (cd tmpdir)
               :which-key "find ~/file")
    "f f"   '(find-file :which-key "Find file")
    "p f"   '(projectile-find-file :which-key "projectile-find-file")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Emacs system-files
*** Backup files
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "/tmp/backups/")))
  (make-directory "/tmp/auto-saves/" t)
#+end_src

*** Auto-save files
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix "/tmp/auto-saves/sessions/"
        auto-save-file-name-transforms `((".*" ,"/tmp/auto-saves/" t)))
#+end_src

*** Lock files
Disable lock files.
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** Other
Always follow symlinks
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

* Org-mode
** Org-mode appearance
*** Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :defer t
    :config
    (setq olivetti-body-width 160
          olivetti-minimum-body-width 140))

#+end_src
*** Mixed-pitch
#+begin_src disabled
(use-package mixed-pitch
:hook
(text-mode . mixed-pitch-mode))
#+end_src

*** TeX style
#+begin_src emacs-lisp
  (defun niva/org-tex-style()
    (interactive)
    (setq org-hidden-keywords '(title))

    (set-face-attribute 'org-document-title nil
                        :height 2.0
                        :weight 'regular
                        :font "CMU Serif"
                        :foreground nil
                        )

    ;; set basic title font
    (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
    ;; Low levels are unimportant = no scalinkjukjg
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)

    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
    ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2 :weight 'bold) ;\large
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.4 :weight 'bold) ;\Large
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.5 :weight 'bold) ;\LARGE
    ;; Only use the first 4 styles and do not cycle.
    (setq org-cycle-level-faces nil)
    (setq org-n-level-faces 4)
    (variable-pitch-mode 1)
    (niva/variable-pitch-on))
#+end_src

** Set up
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :defer t
    :hook (org-mode . org-mode-setup)
    :config
    (setq org-ellipsis " .."
          org-hide-emphasis-markers t
          org-fontify-quote-and-verse-blocks t)
    (set-face-attribute 'org-quote nil :inherit 'font-lock-comment-face :slant 'oblique)

    (defun org-mode-setup (interactive) ()
           (auto-fill-mode 0)
           (visual-line-mode 1)
           (org-num-mode 1)
           (require 'org-inlinetask))

    (add-hook 'org-font-lock-hook #'org-indent-quotes)
    (defun org-indent-quotes (limit)
      (let ((case-fold-search t))
        (while (search-forward-regexp "^[ \t]*#\\+begin_quote" limit t)
          (let ((beg (1+ (match-end 0))))
            (when (search-forward-regexp "^[ \t]*#\\+end_quote" nil t)
              (let ((end (1- (match-beginning 0)))
                    (indent (propertize "    " 'face 'org-hide)))
                (add-text-properties beg end (list 'line-prefix indent 'wrap-prefix indent)))))))))

  (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

Only use variable-pitch if explicitly called.

#+begin_src emacs-lisp
  (defun niva/variable-pitch-on ()
    (interactive)
    (set-face-attribute 'variable-pitch nil :font " Serif 14" :inherit 'default))
#+end_src

** org-tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
#+end_src

** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :ensure t
    :defer t)

  (setq org-roam-directory (file-truename "~/org/roam"))
  ;; (org-roam-db-autosync-mode)
#+end_src

* Performance
** Native compilation
#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src
** GCMH
#+begin_src emacs-lisp
  (use-package gcmh
    :ensure t
    :demand
    :custom
    (gcmh-idle-delay 100)
    (gcmh-high-cons-threshold 104857600)
    :config
    (gcmh-mode +1))
#+end_src

#+begin_src emacs-lisp
  (defun ap/garbage-collect ()
    "Run `garbage-collect' and print stats about memory usage."
    (interactive)
    (message (cl-loop for (type size used free) in (garbage-collect)
                      for used = (* used size)
                      for free = (* (or free 0) size)
                      for total = (file-size-human-readable (+ used free))
                      for used = (file-size-human-readable used)
                      for free = (file-size-human-readable free)
                      concat (format "%s: %s + %s = %s\n" type used free total))))
#+end_src
** Byte compile on exit
#+begin_src emacs-lisp
  (defun compile-config ()
    (interactive)
    (org-babel-tangle-file
     (expand-file-name "config.org" user-emacs-directory)
     (expand-file-name "config.el" user-emacs-directory))

    (byte-compile-file
     (expand-file-name "config.el" user-emacs-directory)
     (expand-file-name "config.elc" user-emacs-directory)))

  ;; Enable if not using emacs daemon
  ;; (add-hook 'kill-emacs-hook 'compile-config)

  (add-to-list 'org-babel-default-header-args
               '(:noweb . "yes"))
#+end_src

** Profiling
#+begin_src emacs-lisp
  (use-package esup
    :ensure t)
#+end_src
* Development
** Language server
*** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :hook
    ((c-mode c++-mode c-ts-mode c++-ts-mode) . eglot-ensure)
    :config
    (setq eldoc-idle-delay 0)
    )

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '((c++-mode c-mode c++-ts-mode c-ts-mode)
                   . ("clangd"
                      "--clang-tidy"
                      "--completion-style=detailed"
                      "--header-insertion=never"
                      "--pch-storage=memory"
                      "--query-driver=/Applications/ARM/**/*"
                      "-background-index"
                      "-background-index-priority=background"
                      "-j=8"
                      "--log=error"
                      ))))

  (defun eglot-post-config ()
    (eglot-inlay-hints-mode -1))

  (add-hook'eglot-managed-mode-hook 'eglot-post-config)

#+end_src

*** Format on save
#+begin_src emacs-lisp
  (defun format-on-save-hook ()
    (add-hook 'before-save-hook #'eglot-format-buffer t t))

  (add-hook 'c-mode-hook #'format-on-save-hook)
  (add-hook 'c-ts-mode-hook #'format-on-save-hook)
  (add-hook 'c++-mode-hook #'format-on-save-hook)
  (add-hook 'c++-ts-mode-hook #'format-on-save-hook)
#+end_src

** Tree-sitter
*** Setup
#+begin_src disabled
  (use-package treesit
    :commands (treesit-install-language-grammar nf/treesit-install-all-languages)
    :init
    (setq treesit-language-source-alist
          '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
            (c . ("https://github.com/tree-sitter/tree-sitter-c"))
            (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
            (css . ("https://github.com/tree-sitter/tree-sitter-css"))
            (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
            (go . ("https://github.com/tree-sitter/tree-sitter-go"))
            (html . ("https://github.com/tree-sitter/tree-sitter-html"))
            (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
            (json . ("https://github.com/tree-sitter/tree-sitter-json"))
            (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
            (make . ("https://github.com/alemuller/tree-sitter-make"))
            (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" "ocaml/src" "ocaml"))
            (python . ("https://github.com/tree-sitter/tree-sitter-python"))
            (php . ("https://github.com/tree-sitter/tree-sitter-php"))
            (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "typescript/src" "typescript"))
            (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
            (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
            (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
            (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
            (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))
    :config
    (defun nf/treesit-install-all-languages ()
      "Install all languages specified by `treesit-language-source-alist'."
      (interactive)
      (let ((languages (mapcar 'car treesit-language-source-alist)))
        (dolist (lang languages)
          (treesit-install-language-grammar lang)
          (message "`%s' parser was installed." lang)
          (sit-for 0.75)))))


#+end_src

*** Lock level
#+begin_quote
Major modes categorize their fontification features into levels,
from 1 which is the absolute minimum, to 4 that yields the maximum
fontifications.

Level 1 usually contains only comments and definitions.
Level 2 usually adds keywords, strings, constants, types, etc.
Level 3 usually represents a full-blown fontification, including
assignment, constants, numbers, properties, etc.
Level 4 adds everything else that can be fontified: delimiters,
operators, brackets, all functions and variables, etc.
#+end_quote

#+begin_src emacs-lisp
  (setq-default treesit-font-lock-level 4)
#+end_src

*** Hooks
Associate extensions with the correct tree-sitter mode and others
#+begin_src emacs-lisp
  ;;   (dolist (pair '(("\\.py\\'"   . python-ts-mode)
  ;;                   ("\\.c\\'"    . c-ts-mode)
  ;;                   ("\\.h\\'"    . c-ts-mode)
  ;;                   ("\\.cpp\\'"  . c++-ts-mode)
  ;;                   ("\\.hpp\\'"  . c++-ts-mode)
  ;;                   ("\\.tpp\\'"  . c++-ts-mode)
  ;;                   ("\\.sh\\'"   . bash-ts-mode)
  ;;                   ("\\.js\\'"   . js-ts-mode)
  ;;                   ("\\.ts\\'"   . typescript-ts-mode)
  ;;                   ("\\.tsx\\'"  . tsx-ts-mode)
  ;;                   ("\\.cs\\'"   . csharp-ts-mode)
  ;;                   ("\\.java\\'" . java-ts-mode)
  ;;                   ("\\.json\\'" . json-ts-mode)
  ;;                   ("\\.css\\'"  . css-ts-mode)))
  ;;     (push pair auto-mode-alist))
  #+end_src

** Version control
*** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :ensure t
    :config
    (setq git-gutter:update-timer 1)

    (cond ((member 'modus-operandi-tinted custom-enabled-themes)
           (set-face-attribute 'git-gutter-fr:added nil :foreground (face-attribute 'modus-themes-fg-green-intense :foreground) :background nil )
           (set-face-attribute 'git-gutter-fr:modified nil :foreground (face-attribute 'modus-themes-fg-blue :foreground) :background nil)
           (set-face-attribute 'git-gutter-fr:deleted  nil :foreground (face-attribute 'modus-themes-fg-red-intense :foreground) :background nil)))

    (fringe-helper-define 'git-gutter-fr:added nil
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X")

    (fringe-helper-define 'git-gutter-fr:deleted nil
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X")

    (fringe-helper-define 'git-gutter-fr:modified nil
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X")


    (global-git-gutter-mode 1))
#+end_src

*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    (setq ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain)
    )

  (defun disable-y-or-n-p (orig-fun &rest args)
    (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
      (apply orig-fun args)))

  (advice-add 'ediff-quit :around #'disable-y-or-n-p)
#+end_src
** Documentation
*** Devdocs
#+begin_src emacs-lisp
  (use-package devdocs
    :ensure t
    :defer t
    :init
    (defvar lps/devdocs-alist
      '((python-mode-hook     . "python~3.8")
        (c-mode-hook          . "c")
        (c++-mode-hook        . "cpp")
        (org-mode-hook        . "elisp")
        (elisp-mode-hook      . "elisp")
        (emacs-lisp-mode-hook . "elisp")
        (sh-mode-hook         . "bash")
        ))

    (setq devdocs-window-select t
          shr-max-image-proportion 0.4)

    (dolist (pair lps/devdocs-alist)
      (let ((hook (car pair))
            (doc (cdr pair)))
        (add-hook hook `(lambda () (setq-local devdocs-current-docs (list ,doc))))))

    (define-key evil-normal-state-map (kbd "SPC g d")
                (lambda () (interactive)
                  (devdocs-lookup nil (thing-at-point 'symbol t)))))
#+end_src
* Terminal
** eshell
#+begin_src emacs-lisp
  (use-package eshell
    :ensure t
    :defer t
    :defines eshell-prompt-function
    :config
    (add-hook 'eshell-mode-hook
              (lambda ()
                (define-key eshell-hist-mode-map (kbd "C-c C-l") nil)
                (define-key eshell-hist-mode-map (kbd "M-s")     nil)
                (define-key eshell-mode-map      (kbd "C-a")     'eshell-bol)
                (define-key eshell-mode-map      (kbd "C-j")     'eshell-send-input)
                (define-key eshell-mode-map      (kbd "C-l")     'eshell/clear)
                (define-key eshell-mode-map      (kbd "C-r")     'helm-eshell-history)
                (define-key eshell-mode-map      (kbd "C-u")     'eshell-kill-input)))

    (setq eshell-hist-ignoredups t
          eshell-ask-to-save-history 'always
          eshell-cmpl-cycle-completions t
          eshell-cmpl-ignore-case t
          eshell-error-if-no-glob t
          eshell-glob-case-insensitive t
          eshell-input-filter (lambda (input) (not (string-match-p "\\`\\s-+" input)))
          eshell-kill-processes-on-exit t
          eshell-scroll-to-bottom-on-input 'all
          eshell-scroll-to-bottom-on-output nil
          eshell-banner-message
          '(format "%s %s\n"
                   (propertize (format " %s " (string-trim (buffer-name)))
                               'face 'mode-line-highlight)
                   (propertize (current-time-string)
                               'face 'font-lock-keyword-face))))

  (use-package eshell-syntax-highlighting
    :ensure t
    :hook (eshell-mode . eshell-syntax-highlighting-mode))

  (defun my-term-handle-exit (&optional process-name msg)
    ;; (message "%s | %s" process-name msg)
    (kill-buffer (current-buffer)))

  (advice-add 'term-handle-exit :after 'my-term-handle-exit)
#+end_src

*** alias
#+begin_src emacs-lisp
  (defalias 'eshell/v 'eshell-exec-visual)
#+end_src

** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :defer t
    :config
    (setq vterm-buffer-name-string "%s"
          vterm-max-scrollback 100000
          vterm-kill-buffer-on-exit t))
#+end_src

*** eshell-vterm
#+begin_src emacs-lisp
  (use-package eshell-vterm
    :load-path "site-lisp/eshell-vterm"
    :ensure t
    :defer t
    :demand t
    :after eshell
    :config
    (eshell-vterm-mode))
#+end_src
** env

#+begin_src emacs-lisp
  (setenv "LANG" "sv_SE.UTF-8")
  (setenv "LIBRARY_PATH" "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib")

  (defun set-exec-path-from-shell-PATH ()
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -i -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+end_src

* Font

Set font.

Remove font weight on some faces

#+begin_src emacs-lisp

  ;; (set-face-attribute 'variable-pitch nil :font 'unspecified :inherit 'default)
  ;; (set-face-attribute 'variable-pitch-text nil :height 'unspecified :inherit 'default)

  (defun remove-font-weight ()
    (custom-set-faces
     '(default                           ((t (:background nil))))
     '(compilation-error                 ((t (:weight unspecified))))
     '(bold                              ((t (:weight unspecified))))
     '(outline-1                         ((t (:weight unspecified))))
     '(outline-2                         ((t (:weight unspecified))))
     '(outline-3                         ((t (:weight unspecified))))
     '(font-lock-comment-face            ((t (:weight unspecified))))
     '(error nil                         ((t (:weight unspecified)))))

    (set-face-attribute 'bold nil :weight 'unspecified)
    (set-face-attribute 'buffer-menu-buffer nil :weight 'unspecified)
    (set-face-attribute 'help-key-binding nil    :weight 'unspecified)

    (set-face-attribute 'tooltip nil :inherit 'default))
  (remove-font-weight)

#+end_src

** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :ensure t
    :config (global-ligature-mode t)
    (ligature-set-ligatures 'prog-mode '("==" "!=" "<-" "<--" "->" "-->")))
#+end_src

* Web browser
** eww
#+begin_src emacs-lisp
  (setq-default browse-url-browser-function 'eww-browse-url
                shr-use-fonts nil
                shr-use-colors nil
                shr-inhibit-images t
                shr-indentation 2
                eww-search-prefix "https://html.duckduckgo.com/html?q=")

  (defun my/eww-toggle-images ()
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (eww-reload))


#+END_SRC
* elfeed
#+begin_src emacs-lisp

  (use-package elfeed
    :ensure t
    :defer t
    ;; :bind (:map elfeed-search-mode-map ("r" . elfeed-update))
    :hook (elfeed-search-mode . elfeed-update))

  (use-package elfeed-protocol
    :ensure t
    :defer t
    :after elfeed
    :config
    (setq elfeed-use-curl t
          elfeed-sort-order 'descending
          elfeed-protocol-enabled-protocols '(fever)
          elfeed-protocol-fever-update-unread-only t
          elfeed-protocol-fever-maxsize 150
          elfeed-feeds '(("fever+https://niklas@rss.niklas.zone"
                          :api-url "https://rss.niklas.zone/fever/"
                          :password (niva/lookup-password :host "fever")
                          ))))
  (elfeed-protocol-enable)


  (advice-add 'elfeed-show-visit :around #'suppress-messages)

  (define-key elfeed-show-mode-map (kbd "j") 'elfeed-show-next)
  (define-key elfeed-show-mode-map (kbd "k") 'elfeed-show-prev)


  (defun my/elfeed-toggle-images ()
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (elfeed-show-refresh))

  (define-key elfeed-show-mode-map (kbd "I") #'my/elfeed-toggle-images)
  (define-key elfeed-search-mode-map (kbd "I") #'my/elfeed-toggle-images)

  (define-key elfeed-search-mode-map (kbd "r") 'elfeed-update)


  (defun elfeed-olivetti (buff)
    (switch-to-buffer buff)
    (olivetti-mode)
    (elfeed-show-refresh))

  (setq elfeed-show-entry-switch 'elfeed-olivetti)

#+end_src
