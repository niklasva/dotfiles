#+PROPERTY: header-args : tangle "~/.config/emacs/config.el" :results silent
#+OPTIONS: toc:2
#+STARTUP: overview

* Package management
** Setup package.el to work with melpa.
#+begin_src disabled
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))
#+end_src

** Installing use-package
#+begin_src disabled
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+end_src


** straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
    ;; (straight-use-package 'org)
#+end_src

* Encryption
** gpg
#+begin_src emacs-lisp
  (use-package pinentry
  :straight t
  :config (pinentry-start))
  #+end_src

** authinfo
#+begin_src emacs-lisp
  (setq auth-sources
        '((:source "~/.authinfo.gpg")))

  (defun niva/lookup-password (&rest keys)
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))
#+end_src

* Text edit settings
** Defaults
#+begin_src emacs-lisp
(setq-default
c-basic-offset 4
c-default-style "linux"
create-lockfiles nil
evil-auto-indent t
indent-line-function 'evil-indent-line
indent-tabs-mode t
completion-cycle-threshold 3
tab-always-indent 'complete
tab-width 4)
(column-number-mode)
(electric-indent-mode +1)
#+end_src

#+begin_src emacs-lisp
(setq-default scroll-preserve-screen-position t
scroll-conservatively 5
maximum-scroll-margin 0.5
scroll-margin 4)
#+end_src

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

#+begin_src emacs-lisp
(defun prog-pair-hook ()
(setq electric-pair-inhibit-predicate (lambda (c) (or
                (char-equal c ?\()
                (or
                (char-equal c ?\")
                (char-equal c ?\<)))))
(electric-pair-mode 1))
(add-hook 'prog-mode-hook 'prog-pair-hook)

(defun c-pair-hook ()
(setq electric-pair-inhibit-predicate (lambda (c) (or
                (char-equal c ?\")
                (char-equal c ?\<))))
(electric-pair-mode 1))
(add-hook 'c-mode-hook 'prog-pair-hook)
(add-hook 'c++-mode-hook 'prog-pair-hook)
(add-hook 'c-ts-mode-hook 'prog-pair-hook)
(add-hook 'c++-ts-mode-hook 'prog-pair-hook)
#+end_src

#+begin_src emacs-lisp

(defun indent-tabs-hook ()
(setq tab-width 4
indent-tabs-mode t
evil-auto-indent t
c-basic-offset 4))

(add-hook 'c++-mode-hook    'indent-tabs-hook)
(add-hook 'c-mode-hook      'indent-tabs-hook)
(add-hook 'c++-ts-mode-hook 'indent-tabs-hook)
(add-hook 'c-ts-mode-hook   'indent-tabs-hook)
#+end_src

#+begin_src emacs-lisp
(setq org-src-strip-leading-and-trailing-blank-lines t
org-src-tab-acts-natively t)

#+end_src

Enable line numbers for some modes
#+begin_src emacs-lisp
(setq-default display-line-numbers-width 4)

(dolist (mode '(org-mode-hook text-mode-hook prog-mode-hook conf-mode-hook))
(add-hook mode (lambda ()
(display-line-numbers-mode 1))))
#+end_src

Override some modes which derive from the above
#+begin_src emacs-lisp
(dolist (mode '(org-mode-hook)) (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Show only one active window when opening multiple files at the same time.
#+begin_src emacs-lisp
(add-hook 'window-setup-hook 'delete-other-windows)
#+end_src

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Always move cursor to help window
#+begin_src emacs-lisp
(setq help-window-select t)
#+end_src

Remove trailing spaces
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Scroll compilation buffer
#+begin_src emacs-lisp
(setq compilation-scroll-output t)
#+end_src

#+begin_src emacs-lisp
(defun show-trailing-whitespace-hook () (setq show-trailing-whitespace t))
(add-hook 'prog-mode-hook 'show-trailing-whitespace-hook)
#+end_src

** Hide buffers

Hide buffers by prepending space to buffer name.
#+begin_src emacs-lisp
(defun niva/hide-buffer (bufname)
(if (get-buffer bufname)
(with-current-buffer bufname
(rename-buffer (concat " " bufname)))))

(defun remove-messages-buffer ()
(niva/hide-buffer "*Messages*"))

;; (add-hook 'after-change-major-mode-hook 'remove-messages-buffer)

(defun hide-lsp-buffers ()
(interactive)
(setq-default message-log-max nil)
(niva/hide-buffer "*clangd*")
(niva/hide-buffer "*clangd::stderr*")
(niva/hide-buffer "*pyright*")
(niva/hide-buffer "*pyright::stderr*"))
;; (add-hook 'after-change-major-mode-hook 'hide-lsp-buffers)
#+end_src

Don't show *Buffer list* when opening multiple files at the same time.
#+begin_src emacs-lisp
(setq inhibit-startup-buffer-menu t)
#+end_src

** Clipboard
Prevent emacs from contaminating system clipboard.
#+begin_src emacs-lisp
(use-package simpleclip
:straight t
:config
(setq interprogram-cut-function 'simpleclip-set-contents
interprogram-paste-function 'simpleclip-get-contents)
(simpleclip-mode 1))
#+end_src

* Customization
** GUI settings

#+begin_src emacs-lisp
(setq inhibit-startup-message t
    inhibit-startup-echo-area-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode nil)
(menu-bar-mode 1)
(set-fringe-mode 1)
(global-visual-line-mode t)

(setq-default left-fringe-width 16
            right-fringe-width 3)
#+end_src

#+begin_src emacs-lisp
  (setq window-divider-default-places t
        window-divider-default-bottom-width 1
        window-divider-default-right-width 1)

  (window-divider-mode 1)

  (setq ns-use-thin-smoothing t
        ns-use-proxy-icon nil
        ns-use-mwheel-momentum t
        ns-use-mwheel-acceleration t
        frame-resize-pixelwise t)

  (use-package tab-bar-echo-area
    :straight t
    :config
    (tab-bar-echo-area-mode 1))

  (defun niva/tab-bar-config ()
    (setq tab-bar-show nil
          tab-bar-auto-width-max '(120 . 20)
          tab-bar-close-button-show nil
          tab-bar-close-tab-select 'recent
          tab-bar-new-button-show nil
          tab-bar-new-tab-to 'right
          tab-bar-position nil
          tab-bar-tab-name-function 'tab-bar-tab-name-current)

    (set-face-attribute 'tab-bar nil
                        :box nil
                        :background (face-attribute 'default :background))
    (set-face-attribute 'tab-bar-tab nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-keyword-face :foreground))
    (set-face-attribute 'tab-bar-tab-inactive nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-comment-face :foreground)))
  (niva/tab-bar-config)

  (global-hl-line-mode -1)
  (blink-cursor-mode 1)
#+end_src

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

Prevent accidental close.

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Theme
*** Theme packages
#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t
    :custom (doom-themes-enable-bold nil)
    (doom-themes-org-config)
    (doom-themes-enable-italic t))
  (use-package kaolin-themes :straight t)
  (use-package ample-theme :straight t)
  (use-package cyberpunk-theme :straight t)
  (use-package stimmung-themes :straight t)

  #+end_src
*** Modus
#+begin_src emacs-lisp
  (setq modus-themes-bold-constructs nil
        modus-themes-hl-line (quote (accented))
        modus-themes-org-blocks nil
        modus-themes-region '(bg-only)
        modus-themes-tabs-accented t)

  (setq modus-themes-common-palette-overrides
        '((fringe unspecified)
          (border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)))

  (setq modus-themes-completions '((matches . (background minimal))
                                   (selection . (background minimal))
                                   (popup . (background minimal))))

#+end_src
*** Window divider fix
#+begin_src emacs-lisp
  (defun niva/fix-window-divider-color ()
    "Correct window divider after switching theme"
    (interactive)
    (set-face-foreground 'window-divider (face-attribute 'default :background))
    (set-face-foreground 'window-divider-first-pixel (face-attribute 'default :background))
    (set-face-foreground 'window-divider-last-pixel (face-attribute 'default :background)))
#+end_src

*** Solaire
#+begin_src emacs-lisp
  (use-package solaire-mode
    :straight t
    :config
    (solaire-global-mode +1)
    (solaire-mode-reset))

  (add-hook 'eshell-mode-hook (lambda () (solaire-mode-reset)))
  ;; (add-hook 'compilation-mode-hook (solaire-mode-reset))
#+end_src
*** Load theme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)

  (load-theme 'modus-operandi-tinted t)
#+end_src

** Compilaton mode
#+begin_src emacs-lisp
  (use-package xterm-color :straight t)
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'my/advice-compilation-filter)
#+end_src

** Mode line
*** Mode line format

#+begin_src emacs-lisp
  ;; (mu4e-alert-enable-mode-line-display)
  (setq display-time-format "  %+4Y-%m-%d %H:%M"
        display-time-default-load-average nil)
  ;; (display-time-mode)

  (defun simple-mode-line-render (left right)
    "Return a string of `window-width' length.
       Containing LEFT, and RIGHT aligned respectively."
    (let ((available-width
           (- (window-total-width)
              (+ (length (format-mode-line left))
                 (length (format-mode-line right))))))
      (append left
              (list (format (format "%%%ds" available-width) ""))
              right)))

  (setq-default mode-line-format
                '((:eval
                   (simple-mode-line-render
                    ;; Left.
                    (quote ("%e "
                            (:eval (if (and buffer-file-name (buffer-modified-p))
                                       (propertize "%b" 'face `(:slant oblique))
                                     "%b"))
                            (:eval
                             (if vc-mode
                                 (let*
                                     ((noback (replace-regexp-in-string
                                               (format "^ %s" (vc-backend buffer-file-name)) " " vc-mode))
                                      (face (cond ((string-match "^ -" noback) 'mode-line-vc)
                                                  ((string-match "^ [:@]" noback) 'mode-line-vc-edit)
                                                  ((string-match "^ [!\\?]" noback) 'mode-line-vc-modified))))
                                   (format " |  %s" (substring noback 2)))))
                            (:eval
                             (setq repository-name "")

                             (if buffer-file-name
                                 (progn (setq repository-name (vc-git-repository-url buffer-file-name)) (setq repository-name (replace-regexp-in-string ".git" "" (replace-regexp-in-string "git@github.com:" "" repository-name)))
                      )
                               )repository-name)
                            " | %l:%c" ))
                    ;; Right.
                    (quote (" " global-mode-string))))))

  (set-face-attribute 'mode-line-active nil :height 0.9)
  (set-face-attribute 'mode-line-inactive nil :height 0.9)
#+end_src

*** Display time

#+begin_src emacs-lisp
;;   (setq display-time-format "%+4Y-%m-%d %H:%M"
;;         display-time-default-load-average nil)
;;
;;   (defun display-time-bottom-right ()
;;     (and (equal (cddr (window-pixel-edges))
;;                 (cddr (window-pixel-edges (frame-root-window))))
;;          '(#(" " 0 1 (display (space :align-to (- right 38))))
;;            " "display-time-string)))
;;   (display-time-mode)
;;   (setq global-mode-string '(:eval (display-time-bottom-right)))
#+end_src

#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+end_src

** Font
Remove font weight on some faces
#+begin_src emacs-lisp
  (defun remove-font-weight ()
    (interactive)
    (custom-set-faces
     '(default                           ((t (:background nil))))
     '(compilation-error                 ((t (:weight unspecified))))
     '(bold                              ((t (:weight unspecified))))
     '(outline-1                         ((t (:weight unspecified))))
     '(outline-2                         ((t (:weight unspecified))))
     '(outline-3                         ((t (:weight unspecified))))
     '(font-lock-comment-face            ((t (:weight unspecified))))
     '(error nil                         ((t (:weight unspecified)))))

    (set-face-attribute 'bold nil :weight 'unspecified)
    (set-face-attribute 'buffer-menu-buffer nil :weight 'unspecified)
    (set-face-attribute 'help-key-binding nil    :weight 'unspecified)

    (set-face-attribute 'tooltip nil :inherit 'default))
  (remove-font-weight)
#+end_src

** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :straight t
    :config (global-ligature-mode t)
    (ligature-set-ligatures 'prog-mode '("==" "!=" "<-" "<--" "->" "-->")))
#+end_src

* Controls
** Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-want-C-u-scroll t
          evil-undo-system 'undo-redo
          evil-scroll-count 8)
    (evil-mode))

(use-package transpose-frame :straight t)

  (use-package general
    :straight t
    :config (general-evil-setup t))
#+end_src

*** Evil collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :straight t
    :config
    (evil-collection-init))
#+end_src

*** savehist
#+begin_src emacs-lisp
  (use-package savehist
    :straight t
    :init
    (savehist-mode))
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (setq mac-escape-modifier nil
        mac-option-modifier nil
        mac-right-command-modifier 'meta)
  (setq mac-pass-command-to-system t)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-j") nil)
  (global-set-key (kbd "C-k") nil)
#+end_src

#+begin_src emacs-lisp

  (global-set-key                   (kbd "€") (kbd "$"))
  (global-set-key                   (kbd "<f13>") 'evil-invert-char)
  (define-key evil-insert-state-map (kbd "C-c C-e") 'comment-line)
  (define-key evil-visual-state-map (kbd "C-c C-e") 'comment-line)

  (define-key evil-normal-state-map (kbd "U")       'evil-redo)

  (define-key evil-normal-state-map (kbd "C-a C-x") 'kill-this-buffer)
  (define-key help-mode-map         (kbd "C-a C-x") 'evil-delete-buffer)
  (define-key evil-normal-state-map (kbd "C-w C-x") 'delete-window)
  (define-key evil-normal-state-map (kbd "s-e")     'eshell)
  (define-key evil-normal-state-map (kbd "M-e")     'eshell)
  (define-key evil-normal-state-map (kbd "B V")     'org-babel-mark-block)
  (define-key evil-normal-state-map (kbd "SPC e b") 'org-babel-execute-src-block-maybe)


  (define-key evil-normal-state-map (kbd "C-b n")   'evil-next-buffer)
  (define-key evil-normal-state-map (kbd "C-b p")   'evil-previous-buffer)
  (define-key evil-normal-state-map (kbd "C-b C-b") 'evil-switch-to-windows-last-buffer)
#+end_src

Window management
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w n")     'tab-next)
  (define-key evil-normal-state-map (kbd "C-w c")     'tab-new)
  (define-key evil-normal-state-map (kbd "C-<tab>")   'tab-next)
  (define-key evil-normal-state-map (kbd "C-S-<tab>") 'tab-previous)

  (define-key evil-normal-state-map (kbd "C-w -")   'evil-window-split)
  (define-key evil-normal-state-map (kbd "C-w |")   'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w SPC") 'transpose-frame)

  (define-key evil-normal-state-map (kbd "C-w C-j") (lambda () (interactive) (evil-window-decrease-height 4)))
  (define-key evil-normal-state-map (kbd "C-w C-k") (lambda () (interactive) (evil-window-increase-height 4)))
  (define-key evil-normal-state-map (kbd "C-w C-h") (lambda () (interactive) (evil-window-decrease-width 8)))
  (define-key evil-normal-state-map (kbd "C-w C-l") (lambda () (interactive) (evil-window-increase-width 8)))

  (define-key evil-normal-state-map (kbd "C-w H") 'buf-move-left)
  (define-key evil-normal-state-map (kbd "C-w J") 'buf-move-down)
  (define-key evil-normal-state-map (kbd "C-w K") 'buf-move-up)
  (define-key evil-normal-state-map (kbd "C-w L") 'buf-move-right)

  (define-key evil-normal-state-map (kbd "M-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "M->") 'ns-prev-frame)

  (define-key evil-normal-state-map (kbd "C-S-U") (lambda() (interactive) (pixel-scroll-down 8)))
  (define-key evil-normal-state-map (kbd "C-S-D") (lambda() (interactive) (pixel-scroll-up 8)))
#+end_src

#+begin_src disabled
  (defvar dashboard-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map [mouse-1]      'dashboard-mouse-1)
      (define-key map (kbd "C-p")    'dashboard-previous-line)
      (define-key map (kbd "C-n")    'dashboard-next-line)
      (define-key map (kbd "<up>")   'dashboard-previous-line)
      (define-key map (kbd "<down>") 'dashboard-next-line)
      (define-key map (kbd "k")      'dashboard-previous-line)
      (define-key map (kbd "j")      'dashboard-next-line)
      (define-key map [tab]          'evil-next-buffer)
      (define-key map [backtab]      'evil-prev-buffer)
      (define-key map (kbd "C-i")    'widget-forward)
      (define-key map (kbd "RET")    'dashboard-return)
      (define-key map (kbd "}")      #'dashboard-next-section)
      (define-key map (kbd "{")      #'dashboard-previous-section)
      map)
    "Keymap for dashboard mode.")
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "s-q")        'save-buffers-kill-terminal)
  (global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
  (global-set-key (kbd "s-t")        'tab-new)
  (global-set-key (kbd "s-w")        'tab-close)
  (global-set-key (kbd "s-z")        nil)

#+end_src

** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :config
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode))

  (nvmap :keymaps 'override :prefix "SPC"
    "SPC"   '(execute-extended-command :which-key "M-x")

    "c c"   '(projectile-compile-project :which-key "Compile project")
    "c C"   '(recompile                  :which-key "Recompile")

    "t t"   '(toggle-truncate-lines      :which-key "Toggle truncate lines")

    "m *"   '(org-ctrl-c-star            :which-key "Org-ctrl-c-star")
    "m +"   '(org-ctrl-c-minus           :which-key "Org-ctrl-c-minus")
    "m ."   '(counsel-org-goto           :which-key "Counsel org goto")
    "m e"   '(org-export-dispatch        :which-key "Org export dispatch")
    "m f"   '(org-footnote-new           :which-key "Org footnote new")
    "m h"   '(org-toggle-heading         :which-key "Org toggle heading")
    "m i"   '(org-toggle-item            :which-key "Org toggle item")
    "m n"   '(org-store-link             :which-key "Org store link")
    "m o"   '(org-set-property           :which-key "Org set property")
    "m t"   '(org-todo                   :which-key "Org todo")
    "m x"   '(org-toggle-checkbox        :which-key "Org toggle checkbox")
    "m B"   '(org-babel-tangle           :which-key "Org babel tangle")
    "m I"   '(org-toggle-inline-images   :which-key "Org toggle inline imager")
    "m T"   '(org-todo-list              :which-key "Org todo list")
    "o a"   '(org-agenda                 :which-key "Org agenda")
    "b"     '(ido-switch-buffer          :which-key "Switch buffer")
    "B"     '(project-switch-to-buffer   :which-key "Switch buffer")
    "h p"   '(ff-find-other-file         :which-key "ff-find-other-file")

    "p e"   '(projectile-recentf         :which-key "projectile-recentf")
    "e r"   '(eval-region                :which-key "eval-region")

    "c a"   '(lsp-execute-code-action    :which-key "lsp-execute-code-action")

    "n"     '(flycheck-next-error        :which-key "flycheck-next-error")
    "N"     '(flycheck-previous-error    :which-key "flycheck-previous-error")

    "d l"   '(devdocs-lookup             :which-key "devdocs-lookup")
    "rec"   '(recentf-open               :which-key "devdocs-lookup")
    "rip"   '(consult-ripgrep                :which-key "consult-ripgrep")

    "elf"   '(elfeed                     :which-key "elfeed")
    "eww"   '(eww                        :which-key "eww")
    "wu"    '(winner-undo                :which-key "winner-undo")
    "wU"    '(winner-redo                :which-key "winner-redo")

  "conf"  '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")
  "vconf" '((lambda () (interactive) (split-window-right)
                (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")
    "sconf" '((lambda () (interactive) (split-window-below)
                (find-file "~/.config/emacs/config.org")) :which-key "Open config.org"))
#+end_src

** m-x

#+begin_src emacs-lisp
  (use-package smex
    :straight t)
  (smex-initialize)
#+end_src

#+begin_src emacs-lisp
  ;; (use-package tramp
  ;;   :straight t
  ;;   :config
  ;;   (set-default 'tramp-auto-save-directory "~/.config/emacs/temp")
  ;;   (set-default 'tramp-default-method "plink"))
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :config
    (setq vertico-count 10
            vertico-resize t)
    :custom (vertico-cycle t))

  (use-package vertico-multiform
    :straight nil
    :load-path "straight/repos/vertico/extensions"
    :after vertico
    :config
    (setq vertico-sort-function #'vertico-sort-history-alpha
            vertico-multiform-commands
            '((consult-theme (vertico-sort-function . vertico-sort-alpha))
              (consult-grep (vertico-count . 20))
              (consult-ripgrep (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center) (vertico-count . 20))))

    (vertico-mode)
    (vertico-multiform-mode))

  (use-package vertico-mouse
    :straight nil
    :load-path "straight/repos/vertico/extensions"
    :after vertico
    :hook
    (vertico-mode . vertico-mouse-mode))

  (use-package vertico-posframe
    :straight t
    :after vertico
    :when (display-graphic-p)
    :config
    (setq vertico-posframe-parameters
            '((max-width . 0.8)
              (min-width . 0.8)
              (left-fringe . 8)
              (right-fringe . 8))
            vertico-posframe-border-width 1
            vertico-posframe-poshandler #'posframe-poshandler-frame-center)
    (set-face-attribute 'vertico-posframe nil :background (face-attribute 'fringe :background))
    (vertico-posframe-mode))

#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    :straight t
    :config
    (consult-customize
     consult-theme
     :preview-key '("M-." "C-SPC"
                    :debounce 0.2 any))
    (setq consult-ripgrep-args "rg \
              --null \
              --line-buffered \
              --color=never \
              --max-columns=1000 \
              --path-separator / \
              --smart-case \
              --no-heading \
              --with-filename \
              --line-number \
              --hidden \
              --follow \
              --glob \"!.git/*\" .")
    )
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))
  #+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight   t
    :commands (yas-recompile-all yas-reload-all yas-minor-mode)

    :hook
    (c++-ts-mode . yas-minor-mode)
    (c++-mode . yas-minor-mode)
    (c-mode . yas-minor-mode)
    (c-ts-mode . yas-minor-mode)
    :config
    (setq yas-snippet-dirs
          `(,(concat user-emacs-directory (file-name-as-directory "snippets"))))
    )

  (use-package yasnippet-snippets
    :straight t
    :after yasnippet)

#+end_src
** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :straight (corfu :repo "minad/corfu" :branch "main" :files (:defaults "extensions/*.el"))
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-quit-no-match 'separator)
    (corfu-preselect 'valid)

    (corfu-echo-documentation t)
    (corfu-auto-delay 0)
    (corfu-auto-prefix 1)
    :bind
    (:map corfu-map
        ("TAB"     . corfu-next)
        ("C-SPC"   . corfu-next)
        ([tab]     . corfu-next)
        ("S-TAB"   . corfu-previous)
        ("C-S-SPC" . corfu-previous)
        ([backtab] . corfu-previous))

    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode t)

    :config
    (setq corfu-popupinfo-delay '(0.5 . 0.2))
    (custom-set-faces
     '(corfu-default ((t (:height 130))))))

  (add-hook 'eshell-mode-hook (lambda () (setq-local corfu-auto nil) (corfu-mode)))

  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
    (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
    (comint-send-input))))

  (use-package kind-icon
    :straight t
    :after corfu
    :custom
    ;; (kind-icon-default-face 'corfu-default)
    (kind-icon-use-icons nil)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :straight t
    :config
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    )

#+end_src
** buffer-move
#+begin_src emacs-lisp
  (use-package buffer-move :straight t)
#+end_src

* File management
** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :init (setq projectile-enable-caching t)
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map))
    :config
    (add-to-list 'projectile-globally-ignored-directories ".cache")
    (add-to-list 'projectile-globally-ignored-directories ".DS_Store")
    (add-to-list 'projectile-globally-ignored-directories ".vscode")
    (add-to-list 'projectile-globally-ignored-directories "BUILD")
    (projectile-mode +1)
    (projectile-global-mode 1)
    (setq
     projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".swp" ".so" ".a" ".d" ".ld")
     projectile-globally-ignored-files '("TAGS" "tags" ".DS_Store" ".cache")
     projectile-ignored-projects `("~/.pyenv/")
     projectile-mode-line-function #'(lambda () (format " [%s]" (projectile-project-name)))
     projectile-enable-caching t
     projectile-indexing-method 'native
     projectile-file-exists-remote-cache-expire nil)

    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (projectile-register-project-type 'has-command-at-point '(".mbed")
                  :compile "build-slim-debug" :src-dir "src/")
  )
#+end_src

** File-related keybindings
#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "."     '(lambda () (interactive)
               (setq-local tmpdir default-directory)
               (cd "~")
               (call-interactively 'find-file)
               (cd tmpdir)
               :which-key "find ~/file")
    "f f"   '(find-file :which-key "Find file")
    "p f"   '(projectile-find-file :which-key "projectile-find-file")
"p p"   '(projectile-switch-project :which-key "projectile-switch-project")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Emacs system-files
*** Backup files
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "/tmp/backups/")))
  (make-directory "/tmp/auto-saves/" t)
#+end_src

*** Auto-save files
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix "/tmp/auto-saves/sessions/"
        auto-save-file-name-transforms `((".*" ,"/tmp/auto-saves/" t)))
#+end_src

*** Lock files
Disable lock files.
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** Other
Always follow symlinks
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  (setq vc-follow-symlinks t)
#+end_src

* Performance
** Native compilation
#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src
** GCMH
#+begin_src emacs-lisp
  (use-package gcmh
    :straight t
    :demand
    :custom
    (gcmh-idle-delay 100)
    (gcmh-high-cons-threshold 104857600)
    :config
    (gcmh-mode +1))
#+end_src

#+begin_src emacs-lisp
  (defun ap/garbage-collect ()
    "Run `garbage-collect' and print stats about memory usage."
    (interactive)
    (message (cl-loop for (type size used free) in (garbage-collect)
                      for used = (* used size)
                      for free = (* (or free 0) size)
                      for total = (file-size-human-readable (+ used free))
                      for used = (file-size-human-readable used)
                      for free = (file-size-human-readable free)
                      concat (format "%s: %s + %s = %s\n" type used free total))))
#+end_src
** Byte compile on exit
#+begin_src emacs-lisp
  (defun compile-config ()
    (interactive)
    (org-babel-tangle-file
     (expand-file-name "config.org" user-emacs-directory)
     (expand-file-name "config.el" user-emacs-directory))

    (byte-compile-file
     (expand-file-name "config.el" user-emacs-directory)
     (expand-file-name "config.elc" user-emacs-directory)))

  ;; Enable if not using emacs daemon
  ;; (add-hook 'kill-emacs-hook 'compile-config)

  (add-to-list 'org-babel-default-header-args
               '(:noweb . "yes"))
#+end_src

** Profiling
#+begin_src emacs-lisp
  (use-package esup
    :straight t)
#+end_src
* Development
** C/C++
#+begin_src emacs-lisp
  (setq cc-other-file-alist '(("\\.cc\\'" (".hh" ".h"))
                              ("\\.hh\\'" (".cc" ".C" ".CC" ".cxx" ".cpp" ".c++"))
                              ("\\.c\\'" (".h"))
                              ("\\.m\\'" (".h"))
                              ("\\.h\\'" (".c" ".cc" ".C" ".CC" ".cxx" ".cpp" ".c++" ".m"))
                              ("\\.C\\'" (".H" ".hh" ".h"))
                              ("\\.H\\'" (".C" ".CC"))
                              ("\\.CC\\'" (".HH" ".H" ".hh" ".h"))
                              ("\\.HH\\'" (".CC"))
                              ("\\.c\\+\\+\\'" (".h++" ".hh" ".h"))
                              ("\\.h\\+\\+\\'" (".c++"))
                              ("\\.cpp\\'" (".hpp" ".hh" ".h"))
                              ("\\.tpp\\'" (".hpp" ".hh" ".h"))
                              ("\\.hpp\\'" (".cpp" ".tpp"))
                              ("\\.cxx\\'" (".hxx" ".hh" ".h"))
                              ("\\.hxx\\'" (".cxx"))))
#+end_src
** Language server
*** LSP
#+begin_src emacs-lisp
  (setq lsp-clients-clangd-args '(
                                  "--clang-tidy"
                                  "--completion-style=detailed"
                                  "--header-insertion=never"
                                  "--pch-storage=memory"
                                  "--query-driver=/Applications/ARM/**/*"
                                  "-background-index-priority=background"
                                  "-j=8"
                                  "--log=error"))
  (setq use-dialog-box nil)
  (setq use-system-tooltips t)

  (use-package lsp-mode
    :straight t
    :hook ((lsp-mode . lsp-enable-which-key-integration)
           (c-mode . lsp)
           (c++-mode . lsp)
           (c++-ts-mode . lsp))
    :commands lsp
    :config
    (setq lsp-headerline-breadcrumb-enable nil
          lsp-keymap-prefix "C-c l"
          lsp-signature-auto-activate nil
          lsp-enable-symbol-highlighting nil
          lsp-file-watch-threshold 15000
          lsp-enable-links t
          lsp-enable-snippet t
          lsp-eldoc-enable-hover t
          lsp-eldoc-enable-signature-help t
          lsp-eldoc-prefer-signature-help t
          )
    (setq lsp-completion-provider :none))

  (defun lsp-c-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (add-hook 'c-mode-hook #'lsp-c-save-hooks)
  (add-hook 'c-ts-mode-hook #'lsp-c-save-hooks)
  (add-hook 'c++-mode-hook #'lsp-c-save-hooks)
  (add-hook 'c++-ts-mode-hook #'lsp-c-save-hooks)

  (use-package lsp-ui
    :straight t
    :config
    (setq lsp-ui-doc-show-with-cursor t
          lsp-ui-doc-show-with-mouse t
          lsp-ui-doc-position 'bottom
          lsp-ui-doc-alignment 'window
          lsp-ui-doc-delay 0.1
          lsp-ui-doc-include-signature t
          lsp-ui-doc-border (face-background 'corfu-border)
          lsp-ui-sideline-enable t))

  (custom-set-faces
   '(markdown-code-face             ((t (:background unspecified))))
   '(eldoc-box-border               ((t (:inherit corfu-border))))
   '(eldoc-box-body                 ((t (:inherit corfu-default))))
   '(lsp-ui-doc-background          ((t (:inherit corfu-default)))))
  (setq markdown-list-item-bullets '("-"))

  (add-hook 'lsp-ui-doc-frame-hook
            (lambda (frame _w)
              (set-face-attribute 'default frame :height 120)))
#+end_src

#+end_src
*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :config
    (setq flycheck-indication-mode nil))
#+end_src
*** Format on save
#+begin_src emacs-lisp
  (defun format-on-save-hook ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t))

  (add-hook 'c-mode-hook #'format-on-save-hook)
  (add-hook 'c-ts-mode-hook #'format-on-save-hook)
  (add-hook 'c++-mode-hook #'format-on-save-hook)
  (add-hook 'c++-ts-mode-hook #'format-on-save-hook)
#+end_src

** Tree-sitter
*** Setup
#+begin_src emacs-lisp
  (use-package treesit
    :straight (:type built-in)
    ;; :custom
    ;; (treesit-font-lock-level 4)
    :config
    (setq treesit-language-source-alist
          '((bash         "https://github.com/tree-sitter/tree-sitter-bash")
            (c            "https://github.com/tree-sitter/tree-sitter-c")
            (cpp          "https://github.com/tree-sitter/tree-sitter-cpp")
            (cmake        "https://github.com/uyha/tree-sitter-cmake")
            (common-lisp  "https://github.com/theHamsta/tree-sitter-commonlisp")
            (css          "https://github.com/tree-sitter/tree-sitter-css")
            (elisp        "https://github.com/Wilfred/tree-sitter-elisp")
            (js           "https://github.com/tree-sitter/tree-sitter-javascript")
            (json         "https://github.com/tree-sitter/tree-sitter-json")
            (python       "https://github.com/tree-sitter/tree-sitter-python")
            (tsx          "https://github.com/tree-sitter/tree-sitter-typescript")
            (typescript   "https://github.com/tree-sitter/tree-sitter-typescript")
            (yaml         "https://github.com/ikatyang/tree-sitter-yaml"))))
#+end_src

*** Hooks
Associate extensions with the correct tree-sitter mode and others
#+begin_src emacs-lisp
  (dolist (pair '(("\\.sh\\'"           . bash-ts-mode)
                  ("\\.c\\'"            . c-ts-mode)
                  ("\\.h\\'"            . c-ts-mode)
                  ("\\.cpp\\'"          . c++-ts-mode)
                  ("\\.hpp\\'"          . c++-ts-mode)
                  ("\\.tpp\\'"          . c++-ts-mode)
                  ("\\.java\\'"         . java-ts-mode)
                  ("\\.js\\'"           . js-ts-mode)
                  ("\\.json\\'"         . json-ts-mode)
                  ("\\.ts\\'"           . typescript-ts-mode)
                  ("\\.tsx\\'"          . tsx-ts-mode)
                  ("\\.css\\'"          . css-ts-mode)
                  ("\\.py\\'"           . python-ts-mode)
                  ("\\.yaml\\'"         . yaml-ts-mode)
                  ("\\.clangd\\'"       . yaml-ts-mode)
                  ("\\.yml\\'"          . yaml-ts-mode)
                  ("\\.clang-format\\'" . yaml-ts-mode)
                  ("\\.clang-tidy\\'"   . yaml-ts-mode)))
    (push pair auto-mode-alist))
#+end_src

** Version control
*** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :straight t
    :config
    (setq git-gutter:update-timer 1)
    (if (or (member 'modus-operandi-tinted custom-enabled-themes) (member 'modus-operandi custom-enabled-themes))
        (progn (set-face-attribute 'git-gutter-fr:added    nil :foreground (face-attribute 'modus-themes-fg-green-intense :foreground) :background 'unspecified )
               (set-face-attribute 'git-gutter-fr:modified nil :foreground (face-attribute 'modus-themes-fg-blue          :foreground) :background 'unspecified)
               (set-face-attribute 'git-gutter-fr:deleted  nil :foreground (face-attribute 'modus-themes-fg-red-intense   :foreground) :background 'unspecified)))

    (fringe-helper-define 'git-gutter-fr:added nil
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X")

    (fringe-helper-define 'git-gutter-fr:deleted nil
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X")

    (fringe-helper-define 'git-gutter-fr:modified nil
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X"
      "X..X."
      "..X.."
      ".X..X")

    (global-git-gutter-mode 1))
#+end_src

*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :config
    (setq ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain)
    )

  (defun disable-y-or-n-p (orig-fun &rest args)
    (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
      (apply orig-fun args)))

  (advice-add 'ediff-quit :around #'disable-y-or-n-p)
#+end_src
** Documentation
*** Devdocs
#+begin_src emacs-lisp
  (use-package devdocs
    :straight t
    :init
    (defvar lps/devdocs-alist
      '((python-mode-hook     . "python~3.8")
        (c-mode-hook          . "c")
        (c++-mode-hook        . "cpp")
        (org-mode-hook        . "elisp")
        (elisp-mode-hook      . "elisp")
        (emacs-lisp-mode-hook . "elisp")
        (sh-mode-hook         . "bash")))

    (setq devdocs-window-select t
          shr-max-image-proportion 0.4)

    (dolist (pair lps/devdocs-alist)
      (let ((hook (car pair))
            (doc (cdr pair)))
        (add-hook hook `(lambda () (setq-local devdocs-current-docs (list ,doc))))))

    (define-key evil-normal-state-map (kbd "SPC g d")
                (lambda () (interactive)
                  (devdocs-lookup nil (thing-at-point 'symbol t)))))
#+end_src
* Terminal
** eshell
#+begin_src emacs-lisp
  (use-package eshell
    :straight t
    :defines eshell-prompt-function
    :config
  (add-hook 'eshell-mode-hook
      (lambda ()
                (define-key eshell-hist-mode-map (kbd "C-c C-l") nil)
                (define-key eshell-hist-mode-map (kbd "M-s")     nil)
                (define-key eshell-mode-map      (kbd "C-a")     'eshell-bol)
                (define-key eshell-mode-map      (kbd "C-l")     'eshell/clear)
                (define-key eshell-mode-map      (kbd "C-r")     'eshell-isearch-backward)
                (define-key eshell-mode-map      (kbd "C-u")     'eshell-kill-input)))

    (setq eshell-hist-ignoredups t
          eshell-ask-to-save-history 'always
          eshell-cmpl-cycle-completions t
          eshell-cmpl-ignore-case t
          eshell-error-if-no-glob t
          eshell-glob-case-insensitive t
          eshell-input-filter (lambda (input) (not (string-match-p "\\`\\s-+" input)))
          eshell-kill-processes-on-exit t
          eshell-scroll-to-bottom-on-input 'all
          eshell-scroll-to-bottom-on-output nil
          eshell-banner-message
          '(format "%s %s\n"
                   (propertize (format " %s " (string-trim (buffer-name)))
                               'face 'mode-line-highlight)
                   (propertize (current-time-string)
                               'face 'font-lock-keyword-face))))

  (use-package eshell-syntax-highlighting
    :straight t
    :hook (eshell-mode . eshell-syntax-highlighting-mode))

  (defun my-term-handle-exit (&optional process-name msg)
    ;; (message "%s | %s" process-name msg)
    (kill-buffer (current-buffer)))

  (advice-add 'term-handle-exit :after 'my-term-handle-exit)

  (defun font-lock-comment-annotations ()
    (font-lock-add-keywords
     nil
     '(("\\<\\(.*ERR.*\\)"     1 'compilation-error    t)
       ("\\<\\(.*INFO.*\\)" 1 'compilation-info    t)
       ("\\<\\(.*DEBUG.*\\)"   1 'compilation-info    t)
       ("\\<\\(.*WARN.*\\)"    1 'compilation-warning t)
       ("\\<\\(.*DEBUG: --- CMD: POLL(60) REPLY: ISTATR(49) ---.*\\)" 1 'completions-common-part t)
       ("\\<\\(.*DEBUG: --- CMD: OUT(68) REPLY: ACK(40) ---.*\\)"     1 'completions-common-part t)
       )))
  ;; (add-hook 'eshell-mode-hook 'font-lock-comment-annotations)
#+end_src

*** alias
#+begin_src emacs-lisp
  (eshell/alias "ff" "for i in ${eshell-flatten-list $*} {find-file $i}")
  (eshell/alias "fo" "find-file-other-window $1")
  (eshell/alias "ts" "ts '[%Y-%m-%d %H:%M:%S]'")
#+end_src

#+begin_src emacs-lisp
  (setenv "LANG" "sv_SE.UTF-8")
  (setenv "LIBRARY_PATH" "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib")
  (setenv "CPPFLAGS" "-I/opt/homebrew/opt/openssl@3/include")
  (setenv "LDFLAGS" "-L/opt/homebrew/opt/openssl@3/lib")
  (setenv "PKG_CONFIG_PATH" "/opt/homebrew/opt/openssl@3/lib/pkgconfig")
  (setenv "OPENSSL_ROOT_DIR" "/opt/homebrew/Cellar/openssl@3/3.1.1")
  (setenv "CPATH" "/opt/homebrew/include")
  (setenv "LIBRARY_PATH" "/opt/homebrew/lib")

  (defun set-exec-path-from-shell-PATH ()
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -i -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+end_src

* Org
** Org-mode appearance
*** Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :straight t
    :config
    (setq olivetti-body-width 100
          olivetti-minimum-body-width 100))

#+end_src
*** Mixed-pitch
#+begin_src disabled
(use-package mixed-pitch
:hook
(text-mode . mixed-pitch-mode))
#+end_src

*** TeX style
#+begin_src emacs-lisp
  (defun niva/org-tex-style()
    (interactive)
    (setq org-hidden-keywords '(title))

    (set-face-attribute 'org-document-title nil
                        :height 2.0
                        :weight 'regular
                        :font "CMU Serif"
                        :foreground nil
                        )

    ;; set basic title font
    (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
    ;; Low levels are unimportant = no scalinkjukjg
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)

    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
    ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2 :weight 'bold) ;\large
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.4 :weight 'bold) ;\Large
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.5 :weight 'bold) ;\LARGE
    ;; Only use the first 4 styles and do not cycle.
    (setq org-cycle-level-faces nil)
    (setq org-n-level-faces 4)
    (variable-pitch-mode 1)
    (niva/variable-pitch-on))
#+end_src


** Set up
#+begin_src disabled
(use-package org
:straight t
:config
    (setq org-ellipsis " .."
          org-hide-emphasis-markers t
          org-fontify-quote-and-verse-blocks t)

  (dolist (mode '(org-mode-hook text-mode-hook prog-mode-hook conf-mode-hook))
    (add-hook mode (lambda () (org-indent-mode 1))))

    (set-face-attribute 'org-quote nil :inherit 'font-lock-comment-face :slant 'oblique)

    (add-hook 'org-font-lock-hook #'org-indent-quotes)
    (defun org-indent-quotes (limit)
      (let ((case-fold-search t))
        (while (search-forward-regexp "^[ \t]*#\\+begin_quote" limit t) (let ((beg (1+ (match-end 0))))
                                                                          (when (search-forward-regexp "^[ \t]*#\\+end_quote" nil t)
                                                                            (let ((end (1- (match-beginning 0)))
                                                                                  (indent (propertize "    " 'face 'org-hide)))
                                                                              (add-text-properties beg end (list 'line-prefix indent 'wrap-prefix indent))))))))
    ;;)

  (use-package org-superstar
    :straight t
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

Only use variable-pitch if explicitly called.

#+begin_src emacs-lisp
  (defun niva/variable-pitch-on ()
  (interactive)
  (set-face-attribute 'variable-pitch nil :font "CMU Serif 14" :height 1.4 :inherit 'default)
  )
#+end_src

** org-tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
#+end_src

** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :straight t
    :init
    (setq org-roam-directory "~/Library/Mobile Documents/com~apple~CloudDocs/Roam"
          org-roam-database-connector 'sqlite-builtin)
    :config
    (org-roam-setup)
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)
           (:map org-mode-map
                 (("C-c n i" . org-roam-node-insert)
                  ("C-c n o" . org-id-get-create)
                  ("C-c n t" . org-roam-tag-add)
                  ("C-c n a" . org-roam-alias-add)
                  ("C-c n l" . org-roam-buffer-toggle)))))
#+end_src

* Web
** eww
#+begin_src emacs-lisp
  (setq-default browse-url-browser-function 'eww-browse-url
                shr-use-fonts nil
                shr-use-colors nil
                shr-inhibit-images t
                shr-indentation 4
                eww-search-prefix "https://html.duckduckgo.com/html?q=")

  (defun my/eww-toggle-images ()
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (eww-reload))
#+end_src
** elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    ;; :bind (:map elfeed-search-mode-map ("r" . elfeed-update))
    :hook (elfeed-search-mode . elfeed-update))

  (use-package elfeed-protocol
    :straight t
    :after elfeed
    :config
    (setq elfeed-use-curl t
          elfeed-sort-order 'descending
          elfeed-protocol-enabled-protocols '(fever)
          elfeed-protocol-fever-update-unread-only t
          elfeed-protocol-fever-maxsize 150
          elfeed-feeds '(("fever+https://niklas@rss.niklas.zone"
                          :api-url "https://rss.niklas.zone/fever/"
                          :password (niva/lookup-password :host "fever")
                          ))))
  (elfeed-protocol-enable)


  (advice-add 'elfeed-show-visit :around #'suppress-messages)

  (define-key elfeed-show-mode-map (kbd "j") 'elfeed-show-next)
  (define-key elfeed-show-mode-map (kbd "k") 'elfeed-show-prev)


  (defun my/elfeed-toggle-images ()
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (elfeed-show-refresh))

  (define-key elfeed-show-mode-map (kbd "I") #'my/elfeed-toggle-images)
  (define-key elfeed-search-mode-map (kbd "I") #'my/elfeed-toggle-images)

  (define-key elfeed-search-mode-map (kbd "r") 'elfeed-update)
  (defun elfeed-olivetti (buff)
    (switch-to-buffer buff)
    (olivetti-mode)
    (elfeed-show-refresh))

  (setq elfeed-show-entry-switch 'elfeed-olivetti)

#+end_src

#+begin_src emacs-lisp
  (use-package sr-speedbar :straight t)
  (use-package projectile-speedbar :straight t)

  ;; (set-face-attribute 'vertico-posframe nil :background (face-attribute 'fringe :background))
  (set-face-attribute 'speedbar-button-face          nil :family "Helvetica" :height 0.9 :foreground (face-attribute 'ansi-color-green :foreground))
  (set-face-attribute 'speedbar-directory-face       nil :family "Helvetica" :height 0.9 :foreground (face-attribute 'ansi-color-blue :foreground))
  (set-face-attribute 'speedbar-separator-face       nil :family "Helvetica" :height 0.9 :foreground (face-attribute 'ansi-color-blue :foreground))
  (set-face-attribute 'speedbar-file-face            nil :family "Helvetica" :height 0.9 :foreground (face-attribute 'ansi-color-cyan :foreground))
  (set-face-attribute 'speedbar-highlight-face       nil :family "Helvetica" :height 0.9 :foreground (face-attribute 'ansi-color-yellow :foreground))
  (set-face-attribute 'speedbar-selected-face        nil :family "Helvetica" :height 0.9 :underline t :foreground (face-attribute 'ansi-color-red :foreground))
  (set-face-attribute 'speedbar-tag-face             nil :family "Helvetica" :height 0.9 :foreground (face-attribute 'ansi-color-yellow :foreground))

  (setq speedbar-use-images nil)
  (define-key evil-normal-state-map (kbd "C-e") 'sr-speedbar-toggle)
#+end_src
