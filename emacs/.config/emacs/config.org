#+TITLE: config.org
#+PROPERTY: header-args : tangle "~/.config/emacs/config.el" :results silent
#+OPTIONS: toc:2

* Pre-init
#+STARTUP: overview
** Startup garbage collection
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'emacs-startup-hook (lambda () (setq gc-cons-threshold (expt 2 23))))
#+end_src

* Package management
** Setup package.el to work with melpa.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))
#+end_src

** Installing use-package

#+begin_src emacs-lisp
  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
 #+end_src

* Text edit settings
** Defaults
#+begin_src emacs-lisp
(setq-default
 c-basic-offset 4
 c-default-style "linux"
 c-ts-mode-indent-offset 4
 c-ts-mode-indent-style "linux"
 create-lockfiles nil
 ;;electric-indent-inhibit t
 evil-auto-indent t
 indent-line-function 'insert-tab
 indent-tabs-mode nil
 completion-cycle-threshold 3
 tab-always-indent 'complete
 tab-width 4)

(column-number-mode)
(electric-indent-mode +1)
#+end_src

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
     (add-hook 'emacs-lisp-moed-hook #'aggressive-indent-mode)
     (add-hook 'css-mode-hook #'aggressive-indent-mode)
     (add-hook 'org-mode-hook #'aggressive-indent-mode)
#+end_src

#+begin_src emacs-lisp
  (defun prog-pair-hook ()
    (setq electric-pair-inhibit-predicate (lambda (c) (or
                                                       (char-equal c ?\()
                                                       (or
                                                        (char-equal c ?\")
                                                        (char-equal c ?\<)))))
    (electric-pair-mode 1))
  (add-hook 'prog-mode-hook 'prog-pair-hook)

  (defun c-pair-hook ()
    (setq electric-pair-inhibit-predicate (lambda (c) (or
                                                       (char-equal c ?\")
                                                       (char-equal c ?\<))))
    (electric-pair-mode 1))
  (add-hook 'c-mode-hook 'c-pair-hook)
  (add-hook 'c++-mode-hook 'c-pair-hook)
  (add-hook 'c-ts-mode-hook 'c-pair-hook)
  (add-hook 'c++-ts-mode-hook 'c-pair-hook)
#+end_src

#+begin_src emacs-lisp
  (defun indent-tabs-hook ()
    (setq tab-width 4
          indent-tabs-mode t
          evil-auto-indent t
          indent-line-function 'c-indent-line))

  (add-hook 'c++-mode-hook 'indent-tabs-hook)
  (add-hook 'c-mode-hook 'indent-tabs-hook)
#+end_src

#+begin_src emacs-lisp
  (setq org-src-strip-leading-and-trailing-blank-lines t
        org-src-tab-acts-natively t)

#+end_src

Enable line numbers for some modes
#+begin_src emacs-lisp
  (dolist (mode '(text-mode-hook prog-mode-hook conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

Override some modes which derive from the above
#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook)) (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Show only one active window when opening multiple files at the same time.
#+begin_src emacs-lisp
      (add-hook 'window-setup-hook 'delete-other-windows)
#+end_src

#+begin_src emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Always move cursor to help window
#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

Remove trailing spaces
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Scroll compilation buffer
#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

#+begin_src emacs-lisp
  (defun show-trailing-whitespace-hook () (setq show-trailing-whitespace t))
  (add-hook 'prog-mode-hook 'show-trailing-whitespace-hook)
#+end_src

** Hide buffers

Show dashboard on startup
#+begin_src emacs-lisp
  ;; (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

Hide buffers by prepending space to buffer name.
#+begin_src emacs-lisp
  (defun niva/hide-buffer (bufname)
    (if (get-buffer bufname)
        (with-current-buffer bufname
          (rename-buffer (concat " " bufname)))))

  (defun remove-messages-buffer ()
    (niva/hide-buffer "*Messages*"))

  ;; (add-hook 'after-change-major-mode-hook 'remove-messages-buffer)

  (defun hide-lsp-buffers ()
    (interactive)
    (setq-default message-log-max nil)
    (niva/hide-buffer "*clangd*")
    (niva/hide-buffer "*clangd::stderr*")
    (niva/hide-buffer "*pyright*")
    (niva/hide-buffer "*pyright::stderr*"))
  ;; (add-hook 'after-change-major-mode-hook 'hide-lsp-buffers)
#+end_src

Don't show *Buffer list* when opening multiple files at the same time.
#+begin_src emacs-lisp
  (setq inhibit-startup-buffer-menu t)
#+end_src

** Clipboard
Prevent emacs from contaminating system clipboard.
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard nil
        x-select-enable-primary nil)
#+end_src

** Syntactic close
#+begin_src emacs-lisp
  (use-package syntactic-close :ensure t :bind ("C-c x c" . syntactic-close))
#+end_src
* Customization
** Theme
*** Theme packages
#+begin_src emacs-lisp
  (use-package helm-themes
    :ensure t
    :defer t)
  (use-package sublime-themes
    :ensure t
    :defer t)
  (use-package color-theme-modern
    :ensure t
    :defer t)
  (use-package nano-theme
    :ensure t
    :defer t)

  (use-package doom-themes
    :ensure t
    :defer t
    :custom (setq doom-themes-enable-bold nil
                  (doom-themes-org-config)
                  doom-themes-enable-italic nil))
#+end_src

*** Modus
#+begin_src emacs-lisp
  (setq modus-themes-bold-constructs nil
        modus-themes-hl-line (quote (accented))
        modus-themes-mode-line '(accented borderless (padding 6))
        modus-themes-org-blocks nil
        modus-themes-region '(bg-only)
        modus-themes-tabs-accented t)

  (setq modus-themes-common-palette-overrides
        '((fringe unspecified)))

  (setq modus-themes-completions '((matches . (background minimal))
                                   (selection . (background minimal))
                                   (popup . (background minimal))))

#+end_src
*** Window divider fix
#+begin_src emacs-lisp
  (defun niva/fix-window-divider-color ()
    "Correct window divider after switching theme"
    (interactive)
    (set-face-foreground 'window-divider (face-attribute 'default :background))
    (set-face-foreground 'window-divider-first-pixel (face-attribute 'default :background))
    (set-face-foreground 'window-divider-last-pixel (face-attribute 'default :background)))
#+end_src

*** Theme switcher
#+begin_src emacs-lisp
  (defun niva/switch-theme (theme)
    (interactive (list (intern (completing-read
                                "Theme: " (->> (custom-available-themes)
                                               (-map #'symbol-name))))))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme 'no-confirm)
    (niva/fix-window-divider-color))
#+end_src

*** Load theme

#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (load-theme 'modus-operandi-tinted t)
#+end_src

** GUI settings

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode nil)
  (menu-bar-mode 1)
  (set-fringe-mode 1)

  (global-visual-line-mode t)

  (setq-default left-fringe-width  2
                right-fringe-width 2)

#+end_src

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

#+begin_src emacs-lisp
  (setq default-frame-alist
        (append (list
                 '(min-height . 1)
                 '(height     . 45)
                 '(min-width  . 1)
                 '(width      . 155)
                 '(vertical-scroll-bars . nil)
                 '(internal-border-width . 8)
                 '(left-fringe    . 3)
                 '(right-fringe   . 3)
                 '(tool-bar-lines . 0)
                 '(ns-transparent-titlebar . t)
                 '(ns-appearance . dark)
                 ;; '(undecorated-round . t)
                 )))

  (setq window-divider-default-places t)

  (setq ns-use-thin-smoothing t
        ns-use-proxy-icon nil
        ns-use-mwheel-momentum t
        ns-use-mwheel-acceleration t
        frame-title-format "\n"
        frame-resize-pixelwise t)


  (use-package tab-bar-echo-area
    :ensure
    :config
    (tab-bar-echo-area-mode 1))

  (defun niva/tab-bar-config ()
    (setq tab-bar-show nil
          tab-bar-auto-width-max '(120 . 20)
          tab-bar-close-button-show nil
          tab-bar-close-tab-select 'recent
          tab-bar-new-button-show nil
          tab-bar-new-tab-to 'right
          tab-bar-position nil
          tab-bar-tab-name-function 'tab-bar-tab-name-current)

    (set-face-attribute 'tab-bar nil
                        :box nil
                        :background (face-attribute 'default :background))
    (set-face-attribute 'tab-bar-tab nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-keyword-face :foreground))
    (set-face-attribute 'tab-bar-tab-inactive nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-comment-face :foreground)))
  (niva/tab-bar-config)
  ;; (tab-bar-mode 1)

  (global-hl-line-mode -1)
  (blink-cursor-mode 1)
#+end_src

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

Prevent accidental close.

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
  (use-package popwin
    :init (popwin-mode 1)
    :config (push '(compilation-mode :noselect t) popwin:special-display-config))
#+end_src

** Mode line

Use lowercase evil-mode state tags (not used by mood-line)

#+begin_src emacs-lisp
    (setq evil-normal-state-tag   " n"
          evil-emacs-state-tag    " e"
          evil-insert-state-tag   " i"
          evil-motion-state-tag   " m"
          evil-operator-state-tag " o"
          evil-replace-state-tag  " r"
          evil-visual-state-tag   " v")
#+end_src

#+begin_src emacs-lisp
  (use-package mood-line
    :config
    (setq-default mood-line-evil-state-alist
                  '((normal   . ("⌘" . font-lock-comment-face))
                    (insert   . ("⌘" . font-lock-variable-name-face))
                    (visual   . ("⌘" . font-lock-type-face))
                    (replace  . ("⌘" . font-lock-keyword-face))
                    (motion   . ("⌘" . font-lock-constant-face))
                    (operator . ("⌘" . font-lock-function-name-face))
                    (emacs    . ("⌘" . font-lock-builtin-face)))
                  mood-line-glyph-alist mood-line-glyphs-ascii)
    :init (mood-line-mode))
#+end_src

#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+end_src

** Dashboard
#+begin_src emacs-lisp
  ;; (use-package dashboard
  ;;   :ensure t
  ;;   :defer t
  ;;   ;; :init
  ;;   ;; (dashboard-setup-startup-hook)
  ;;   :config
  ;;   (setq dashboard-startup-banner 4
  ;;         dashboard-set-init-info nil
  ;;         dashboard-banner-logo-title (concat "GNU Emacs " emacs-version)
  ;;         dashboard-set-navigator t
  ;;         dashboard-set-footer nil
  ;;         dashboard-items '((bookmarks . 5) (projects . 3) (recents . 5))
  ;;         dashboard-center-content t
  ;;         dashboard-filter-agenda-entry 'dashboard-no-filter-agenda
  ;;         )

  ;;   (set-face-attribute 'dashboard-text-banner nil :inherit 'font-lock-function-name-face)
  ;;   (set-face-attribute 'dashboard-items-face nil :inherit 'default)
  ;;   (set-face-attribute 'dashboard-heading-face nil :inherit 'default)

  ;;   (global-unset-key [tab])
  ;;   (global-unset-key (kbd "C-e")))

#+end_src

** Compilaton mode
#+begin_src emacs-lisp
  (use-package xterm-color)
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'my/advice-compilation-filter)
#+end_src

* Controls
** Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :defer t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-want-C-u-scroll t
          evil-undo-system 'undo-redo)
    (evil-mode))

  (use-package transpose-frame)
  (use-package general :config (general-evil-setup t))
#+end_src

*** Evil collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    ;; :defer t
    :config
    ;;(setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)
#+end_src

*** savehist
#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (setq mac-option-modifier nil
        Mac-escape-modifier nil
        mac-right-command-modifier 'meta)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-j") nil)
  (global-set-key (kbd "C-k") nil)
#+end_src

#+begin_src emacs-lisp
  (global-set-key                   (kbd "€") (kbd "$"))
  (global-set-key                   (kbd "<f13>") 'evil-invert-char)
  (define-key evil-insert-state-map (kbd "C-c C-e") 'comment-line)
  (define-key evil-visual-state-map (kbd "C-c C-e") 'comment-line)

  (define-key evil-normal-state-map (kbd "U")       'evil-redo)

  (define-key evil-normal-state-map (kbd "C-a C-x") 'kill-this-buffer)
  (define-key help-mode-map         (kbd "C-a C-x") 'evil-delete-buffer)
  (define-key evil-normal-state-map (kbd "M-e")     'eshell)
  (define-key evil-normal-state-map (kbd "B V")     'org-babel-mark-block)
  (define-key evil-normal-state-map (kbd "SPC e b") 'org-babel-execute-src-block-maybe)
#+end_src

Window management
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w n") 'tab-next)
  (define-key evil-normal-state-map (kbd "C-w c") 'tab-new)
  (define-key evil-normal-state-map (kbd "C-<tab>") 'tab-next)
  (define-key evil-normal-state-map (kbd "C-S-<tab>") 'tab-previous)

  (define-key evil-normal-state-map (kbd "C-w -")   'evil-window-split)
  (define-key evil-normal-state-map (kbd "C-w |")   'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w SPC") 'transpose-frame)

  (define-key evil-normal-state-map (kbd "C-w C-j") (lambda () (interactive) (evil-window-decrease-height 4)))
  (define-key evil-normal-state-map (kbd "C-w C-k") (lambda () (interactive) (evil-window-increase-height 4)))
  (define-key evil-normal-state-map (kbd "C-w C-h") (lambda () (interactive) (evil-window-decrease-width 8)))
  (define-key evil-normal-state-map (kbd "C-w C-l") (lambda () (interactive) (evil-window-increase-width 8)))

  (define-key evil-normal-state-map (kbd "C-w H") 'buf-move-left)
  (define-key evil-normal-state-map (kbd "C-w J") 'buf-move-down)
  (define-key evil-normal-state-map (kbd "C-w K") 'buf-move-up)
  (define-key evil-normal-state-map (kbd "C-w L") 'buf-move-right)
#+end_src

#+begin_src disabled
  (defvar dashboard-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map [mouse-1]      'dashboard-mouse-1)
      (define-key map (kbd "C-p")    'dashboard-previous-line)
      (define-key map (kbd "C-n")    'dashboard-next-line)
      (define-key map (kbd "<up>")   'dashboard-previous-line)
      (define-key map (kbd "<down>") 'dashboard-next-line)
      (define-key map (kbd "k")      'dashboard-previous-line)
      (define-key map (kbd "j")      'dashboard-next-line)
      (define-key map [tab]          'evil-next-buffer)
      (define-key map [backtab]      'evil-prev-buffer)
      (define-key map (kbd "C-i")    'widget-forward)
      (define-key map (kbd "RET")    'dashboard-return)
      (define-key map (kbd "}")      #'dashboard-next-section)
      (define-key map (kbd "{")      #'dashboard-previous-section)
      map)
    "Keymap for dashboard mode.")

#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "s-q")        'save-buffers-kill-terminal)
  (global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
  (global-set-key (kbd "s-t")        'tab-new)
  (global-set-key (kbd "s-w")        'tab-close)
  (global-set-key (kbd "s-d")        'winner-undo)
  (global-set-key (kbd "s-D")        'winner-redo)
  (global-set-key (kbd "s-z")        nil)

#+end_src

** Simpleclip
#+begin_src emacs-lisp
  (use-package simpleclip :ensure t)
  (require 'simpleclip)
  (simpleclip-mode 1)
#+end_src

** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode))

  (nvmap :keymaps 'override :prefix "SPC"
    "SPC"   '(execute-extended-command :which-key "M-x")

    "c c"   '(compile :which-key "Compile")
    "c C"   '(recompile :which-key "Recompile")

    "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Reload emacs config")
    "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")

    "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
    "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
    "m ."   '(counsel-org-goto :which-key "Counsel org goto")
    "m e"   '(org-export-dispatch :which-key "Org export dispatch")
    "m f"   '(org-footnote-new :which-key "Org footnote new")
    "m h"   '(org-toggle-heading :which-key "Org toggle heading")
    "m i"   '(org-toggle-item :which-key "Org toggle item")
    "m n"   '(org-store-link :which-key "Org store link")
    "m o"   '(org-set-property :which-key "Org set property")
    "m t"   '(org-todo :which-key "Org todo")
    "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
    "m B"   '(org-babel-tangle :which-key "Org babel tangle")
    "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
    "m T"   '(org-todo-list :which-key "Org todo list")
    "o a"   '(org-agenda :which-key "Org agenda")
    "b"     '(ido-switch-buffer :which-key "Switch buffer")
    "B"     '(project-switch-to-buffer :which-key "Switch buffer")
    "h p"   '(ff-find-other-file :which-key "ff-find-other-file")

    "p e"   '(projectile-recentf :which-key "projectile-recentf")
    "e r"   '(eval-region :which-key "eval-region")

    "c a"   '(lsp-execute-code-action :which-key "lsp-execute-code-action")

    "n"     '(flycheck-next-error :which-key "flycheck-next-error")
    "N"     '(flycheck-previous-error :which-key "flycheck-previous-error")

    "conf"  '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")
    "vconf" '((lambda () (interactive) (split-window-right)
                (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")
    "sconf" '((lambda () (interactive) (split-window-below)
                (find-file "~/.config/emacs/config.org")) :which-key "Open config.org"))
#+end_src

** m-x

#+begin_src emacs-lisp
  (use-package smex)
  (smex-initialize)
#+end_src

#+begin_src emacs-lisp
  (use-package tramp
    :ensure t
    :defer t
    :config
    (set-default 'tramp-auto-save-directory "~/.config/emacs/temp")
    (set-default 'tramp-default-method "plink"))
#+end_src

** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :custom (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package vertico-posframe
    :after vertico
    :when (display-graphic-p)
    :config
    (setq vertico-posframe-parameters
          '((max-width . 0.8)
            (min-width . 0.8)
            (left-fringe . 8)
            (right-fringe . 8))
          vertico-posframe-border-width 1)

    (set-face-attribute 'vertico-posframe nil :background (face-attribute 'fringe :background))
    (vertico-posframe-mode))

#+end_src

** Consult

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    (consult-async-input-debounce 0.1)
    (consult-async-input-throttle 0.2)
    (consult-async-refresh-delay  0.15)
    (consult-line-numbers-widen t)
    (consult-narrow-key "<")
    (consult-preview-key (list (kbd "C-S-n") (kbd "C-S-p"))))
#+end_src

** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    (corfu-echo-documentation t)
    (corfu-auto-delay 0)
    (corfu-auto-prefix 1)

    :bind
    (:map corfu-map
          ("TAB"     . corfu-next)
          ([tab]     . corfu-next)
          ("S-TAB"   . corfu-previous)
          ([backtab] . corfu-previous))

    :init
    (corfu-popupinfo-mode)
    (global-corfu-mode)
    )

  (add-hook 'eshell-mode-hook (lambda () (setq-local corfu-auto nil) (corfu-mode)))

  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))

  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** buffer-move

#+begin_src emacs-lisp
  (use-package buffer-move :ensure t)
#+end_src

* File management
** Ranger

#+begin_src emacs-lisp
  (use-package ranger
    :ensure t
    :defer t
    :config
    (ranger-override-dired-mode t)
    (setq ranger-cleanup-eagerly t)
    (setq ranger-show-literal t)
    (setq ranger-cleanup-on-disable t))

  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC" "d d" '(ranger : "Open ranger"))
  #+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init (setq projectile-enable-caching t)
    :config
    (add-to-list 'projectile-globally-ignored-directories ".cache")
    (add-to-list 'projectile-globally-ignored-directories ".DS_Store")
    (add-to-list 'projectile-globally-ignored-directories ".vscode")
    (add-to-list 'projectile-globally-ignored-directories "BUILD")
    (projectile-mode +1)
    (projectile-global-mode 1)
    (setq
     projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".swp" ".so" ".a" ".d" ".ld")
     projectile-globally-ignored-files '("TAGS" "tags" ".DS_Store")
     projectile-ignored-projects `("~/.pyenv/")
     projectile-mode-line-function #'(lambda () (format " [%s]" (projectile-project-name)))
     projectile-enable-caching t
     projectile-indexing-method 'native
     projectile-file-exists-remote-cache-expire nil)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map)))
#+end_src

** File-related keybindings

#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "."     '(find-file :which-key "Find file")
    "f f"   '(find-file :which-key "Find file")
    "p f"   '(projectile-find-file :which-key "projectile-find-file")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Emacs system-files
*** Backup files
#+begin_src emacs-lisp
    (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
    (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
 #+end_src

*** Auto-save files
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src

*** Lock files
Disable lock files.
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** Other

Always follow symlinks
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src

* Org-mode
** Org-mode appearance
*** Mixed-pitch
#+begin_src disabled
  (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode))
#+end_src

*** TeX style
#+begin_src emacs-lisp
  (defun niva/org-tex-style()
    (interactive)
    (setq org-hidden-keywords '(title))

    (set-face-attribute 'org-document-title nil
                        :height 2.0
                        :weight 'regular
                        :font "CMU Serif"
                        :foreground nil
                        )

    ;; set basic title font
    (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
    ;; Low levels are unimportant = no scalinkjukjg
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
    ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2 :weight 'bold) ;\large
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.4 :weight 'bold) ;\Large
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.5 :weight 'bold) ;\LARGE
    ;; Only use the first 4 styles and do not cycle.
    (setq org-cycle-level-faces nil)
    (setq org-n-level-faces 4)
    (variable-pitch-mode 1)
    (variable-pitch-on))
#+end_src

** Set up
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :defer t
    :hook (org-mode . org-mode-setup)
    :config
    (setq org-ellipsis " .."
          org-hide-emphasis-markers t)
    )
  (use-package org-superstar
    :ensure t
    :defer t)

  (add-hook 'org-mode-hook
            (lambda ()
              (org-superstar-mode 1)))

  ;; This is usually the default, but keep in mind it must be nil
  (setq org-hide-leading-stars nil)
  ;; This line is necessary.
  (setq org-superstar-leading-bullet ?\s)
  ;; If you use Org Indent you also need to add this, otherwise the
  ;; above has no effect while Indent is enabled.
  (setq org-indent-mode-turns-on-hiding-stars nil)
  (setq org-superstar-headline-bullets-list '("·"))

  (defun org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (org-num-mode 1)
    (setq evil-auto-indent t)
    (require 'org-inlinetask)
    ;;(org-tex-style)
    )
#+end_src


*** org-tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
#+end_src

** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :defer t)
  (setq org-roam-directory (file-truename "~/org/roam"))
  ;; (org-roam-db-autosync-mode)
#+end_src

* Performance
** Native compilation
#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src
** GCMH
#+begin_src emacs-lisp
  (use-package gcmh
    :demand
    ;; :hook
    ;; (focus-out-hook . gcmh-idle-garbage-collect)
    :custom
    (gcmh-idle-delay 100)
    (gcmh-high-cons-threshold 104857600)
    :config
    (gcmh-mode +1))
 #+end_src
** Byte compile on exit

#+begin_src emacs-lisp
  (defun compile-config ()
    (interactive)
    (org-babel-tangle-file
     (expand-file-name "config.org" user-emacs-directory)
     (expand-file-name "config.el" user-emacs-directory))

    (byte-compile-file
     (expand-file-name "config.el" user-emacs-directory)
     (expand-file-name "config.elc" user-emacs-directory)))

  ;; Enable if not using emacs daemon
  ;;(add-hook 'kill-emacs-hook 'compile-config)

  (add-to-list 'org-babel-default-header-args
               '(:noweb . "yes"))
#+end_src

** Tweak garbage collection
#+begin_src emacs-lisp
  ;; (defmacro k-time (&rest body)
  ;;   "Measure and return the time it takes evaluating BODY."
  ;;   `(let ((time (current-time)))
  ;;      ,@body
  ;;      (float-time (time-since time))))

  ;; ;; Set garbage collection threshold to 1GB.
  ;; (setq gc-cons-threshold #x40000000)

  ;; (setq garbage-collection-messages nil)

  ;; (defvar k-gc-timer
  ;;   (run-with-idle-timer 300 t (lambda () (garbage-collect))))

#+end_src

** Profiling
#+begin_src emacs-lisp
  (use-package esup :ensure t)
#+end_src
* Language server
** LSP
#+begin_src disabled
  (use-package lsp-pyright :ensure t)

  (setq lsp-clients-clangd-args '("-j=8" "-background-index" "-log=error" "--clang-tidy" "--query-driver=/Applications/ARM/**/*"))
  (setq use-dialog-box nil)
  (setq use-system-tooltips t)

  (use-package lsp-mode
    :ensure t
    :hook ((lsp-mode . lsp-enable-which-key-integration)
           (c-mode . lsp)
           (c++-mode . lsp)
           (c++-ts-mode . lsp)
           (python-mode . lsp)
           )
    :commands lsp
    :config
    (setq lsp-headerline-breadcrumb-enable nil
          lsp-keymap-prefix "C-c l"
          lsp-signature-auto-activate nil
          lsp-enable-symbol-highlighting nil
          lsp-file-watch-threshold 15000
          lsp-enable-links nil))

  (setq lsp-eldoc-enable-hover nil)

  (setq max-mini-window-height 2
        eldoc-echo-area-use-multiline-p nil)


  (defun lsp-c-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (add-hook 'c-mode-hook #'lsp-c-save-hooks)
  (add-hook 'c-ts-mode-hook #'lsp-c-save-hooks)
  (add-hook 'c++-mode-hook #'lsp-c-save-hooks)
  (add-hook 'c++-ts-mode-hook #'lsp-c-save-hooks)

  (use-package lsp-ivy
    :after lsp
    :ensure t
    :commands lsp-ivy-workspace-symbol)

  ;; company

  (use-package pos-tip)

  (setq company-frontends
        '(company-echo-metadata-frontend
          company-preview-if-just-one-frontend
          company-pseudo-tooltip-unless-just-one-frontend
          ))

  (setq
   ;; company-show-quick-access 'right
   company-tooltip-minimum-width 75
   company-tooltip-maximum-width 75
   company-tooltip-width-grow-only t
   company-tooltip-align-annotations t
   company-tooltip-idle-delay 0.5
   company-tooltip-limit 12
   company-tooltip-flip-when-above t
   company-idle-delay 0
   company-dabbrev-downcase nil
   company-dabbrev-ignore-case nil
   company-format-margin-function 'company-text-icons-margin
   company-minimum-prefix-length 2
   ;; company-require-match nil
   )

  ;; (use-package company-quickhelp
  ;;   :after company
  ;;   :ensure t
  ;;   :config
  ;;   (setq company-quickhelp-delay 0
  ;;         company-quickhelp-timer 0
  ;;         )

  ;;   (company-quickhelp-mode))

  ;;(use-package company-box
  ;;  :after company
  ;;  :hook (company-mode . company-box-mode)
  ;;  :config

  ;;  (setq company-box-doc-frame-parameters '((internal-border-width . 1)
  ;;                                           (left-fringe . 3)
  ;;                                           (right-fringe . 3)))

  ;;  (add-to-list 'company-box-frame-parameters '(left-fringe . 200))
  ;;  (add-to-list 'company-box-frame-parameters '(right-fringe . 200))

  ;;  (setq company-box-doc-delay 0))

  ;; (use-package company-posframe
  ;;   :after company
  ;;   :hook (company-mode . company-posframe-mode)
  ;;   :config
  ;;   ;; (setq company-posframe-backend-separator " | ")
  ;;   ;; (setq company-posframe-show-indicator nil)
  ;;   ;; (setq company-posframe-show-metadata nil)
  ;;   (setq company-posframe-quickhelp-delay 0.0)

  ;;   ;; (company-posframe-mode t)
  ;;   )

  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-doc-show-with-cursor nil
          lsp-ui-doc-show-with-mouse nil
          lsp-ui-doc-position 'at-point
          lsp-ui-doc-delay 1
          lsp-ui-sideline-enable nil))

  (use-package flycheck
    :config
    (setq flycheck-display-errors-delay 0.0
          flycheck-idle-change-delay 0.5
          flycheck-highlighting-mode 'lines))

#+end_src

** Toggling flycheck buffer with "M-C"

I have my own little hook to open the flycheck buffer with ~M-C~, and close it again with another ~M-C~ keystroke.
#+begin_src disabled
  (defvar should-delete-flycheck-list-buffer nil)
  (defun my/flycheck-list-errors ()
    "Open flycheck list if it doesn't exist.  If it does, close it."
    (interactive)
    (let* ((target-buffer-name "*Flycheck errors*")
           (target-buffer (get-buffer target-buffer-name))
           (target-window (get-buffer-window target-buffer)))
      (if (and target-buffer target-window)
          ;; the target buffer exists and window is visible
          (progn
            (when should-delete-flycheck-list-buffer
              (delete-window target-window))
            (kill-buffer target-buffer))
        ;; the target buffer doesn't exist or the window isn't visible
        (let* ((starting-window-count (count-windows)))
          (flycheck-list-errors)
          (setq should-delete-flycheck-list-buffer
                (> (count-windows) starting-window-count))))))

  (define-key flycheck-mode-map (kbd "M-C") 'my/flycheck-list-errors)
#+end_src

#+begin_src emacs-lisp
  (use-package orderless
    :demand t
    :config
    (setq completion-styles '(orderless partial-completion)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  (use-package yasnippet
    :diminish yas-minor-mode
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

#+end_src

** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :hook
    (c-mode . eglot-ensure)
    (c-mode . company-mode)

    (c++-mode . company-mode)
    (c++-mode . eglot-ensure))

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '((c++-mode c-mode) . ("clangd"
                                        "--completion-style=detailed"
                                        "-j=8"
                                        "-background-index"
                                        "--clang-tidy"
                                        "--query-driver=/Applications/ARM/**/*"
                                        "--pch-storage=memory"
                                        ))))


  ;;   (add-hook 'eglot--managed-mode-hook
  ;;           (lambda () (progn
  ;;                        (eldoc--format-doc-buffer nil)
  ;;                        (setq eldoc-echo-area-prefer-doc-buffer t)
  ;;                        (eldoc-doc-buffer))))
  ;;
  ;; (setq display-buffer-alist
  ;;       `(("*eldoc*"
  ;;          (display-buffer-in-side-window)
  ;;          (side . bottom)
  ;;          (window-height . 0.16)
  ;;          (slot . 0))))

  (use-package eldoc-box
    :hook (eglot-managed-mode . eldoc-box-hover-at-point-mode))

  (defun format-on-save-hook ()
    (add-hook 'before-save-hook #'eglot-format-buffer t t))

  (add-hook 'c-mode-hook #'format-on-save-hook)
  (add-hook 'c-ts-mode-hook #'format-on-save-hook)
  (add-hook 'c++-mode-hook #'format-on-save-hook)
  (add-hook 'c++-ts-mode-hook #'format-on-save-hook)
#+end_src

** Tree-sitter

Set up where treesitter binaries are located.
#+begin_src emacs-lisp
  (add-to-list 'treesit-extra-load-path "/Users/niklas/dev/git/github/tree-sitter/tree-sitter-module/dist")
#+end_src

Decoration level to be used by tree-sitter fontifications.

#+begin_src org
  Major modes categorize their fontification features into levels,
  from 1 which is the absolute minimum, to 4 that yields the maximum
  fontifications.

  Level 1 usually contains only comments and definitions.
  Level 2 usually adds keywords, strings, constants, types, etc.
  Level 3 usually represents a full-blown fontification, including
  assignment, constants, numbers, properties, etc.
  Level 4 adds everything else that can be fontified: delimiters,
  operators, brackets, all functions and variables, etc.
#+end_src

#+begin_src emacs-lisp
  (setq-default treesit-font-lock-level 3)
#+end_src

Associate extensions with the correct tree-sitter mode and others
#+begin_src emacs-lisp
;;   (dolist (pair '(("\\.py\\'" . python-ts-mode)
;;                   ("\\.c\\'"  . c-ts-mode)
;;                   ("\\.h\\'"  . c-ts-mode)
;;                   ("\\.cpp\\'" . c++-ts-mode)
;;                   ("\\.hpp\\'" . c++-ts-mode)
;;                   ("\\.tpp\\'" . c++-ts-mode)
;;                   ("\\.sh\\'" . bash-ts-mode)
;;                   ("\\.js\\'" . js-ts-mode)
;;                   ("\\.ts\\'" . typescript-ts-mode)
;;                   ("\\.tsx\\'" . tsx-ts-mode)
;;                   ("\\.cs\\'" . csharp-ts-mode)
;;                   ("\\.java\\'" . java-ts-mode)
;;                   ("\\.json\\'" . json-ts-mode)
;;                   ("\\.css\\'" . css-ts-mode)))
;;     (push pair auto-mode-alist))
#+end_src

* Version control
** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :ensure t
    :defer t
    :config
    (custom-set-variables
     '(git-gutter:modified-sign "┊")
     '(git-gutter:added-sign "┊")
     '(git-gutter:deleted-sign "┊"))
    :init
    (global-git-gutter-mode +1))
#+end_src

* Terminal
** eshell
#+begin_src emacs-lisp
  (use-package eshell
    :ensure t
    :defer t
    :defines eshell-prompt-function
    :config
    (add-hook 'eshell-mode-hook
              (lambda ()
                (define-key eshell-hist-mode-map (kbd "C-c C-l") nil)
                (define-key eshell-hist-mode-map (kbd "M-s")     nil)
                (define-key eshell-mode-map      (kbd "C-a")     'eshell-bol)
                (define-key eshell-mode-map      (kbd "C-j")     'eshell-send-input)
                (define-key eshell-mode-map      (kbd "C-l")     'eshell/clear)
                (define-key eshell-mode-map      (kbd "C-r")     'helm-eshell-history)
                (define-key eshell-mode-map      (kbd "C-u")     'eshell-kill-input)
                ))

    (setq
     ;; eshell-hist-ignoredups t
     eshell-ask-to-save-history 'always
     eshell-cmpl-cycle-completions t
     eshell-cmpl-ignore-case t
     eshell-error-if-no-glob t
     eshell-glob-case-insensitive t
     eshell-input-filter (lambda (input) (not (string-match-p "\\`\\s-+" input)))
     eshell-kill-processes-on-exit t
     eshell-scroll-to-bottom-on-input 'all
     eshell-scroll-to-bottom-on-output nil
     eshell-banner-message
     '(format "%s %s\n"
              (propertize (format " %s " (string-trim (buffer-name)))
                          'face 'mode-line-highlight)
              (propertize (current-time-string)
                          'face 'font-lock-keyword-face))))

  (use-package eshell-syntax-highlighting
    :hook (eshell-mode . eshell-syntax-highlighting-mode))

  (use-package capf-autosuggest
    :hook (eshell-mode . capf-autosuggest-mode)
    (comint-mode . capf-autosuggest-mode))

#+end_src
** env

#+begin_src emacs-lisp
  (setenv "LANG" (shell-command-to-string "$SHELL --login -c 'echo $LANG'"))
  (setenv "LIBRARY_PATH" "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib")

  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match
  that used by the user's shell.

  This is particularly useful under Mac OS X and macOS, where GUI
  apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -i -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
    #+end_src

* Font

Set font.

#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(font . "Iosevka 14"))
#+end_src

Remove font weight on some faces

#+begin_src emacs-lisp
  (custom-set-faces
   '(default                           ((t (:background nil))))
   '(compilation-error                 ((t (:weight unspecified))))
   '(bold                              ((t (:weight unspecified))))
   '(mode-line-buffer-id nil           ((t (:weight unspecified))))
   '(outline-1                         ((t (:weight unspecified))))
   '(outline-2                         ((t (:weight unspecified))))
   '(outline-3                         ((t (:weight unspecified))))
   '(font-lock-comment-face            ((t (:weight unspecified))))
   '(mood-line-buffer-status-narrowed  ((t (:weight unspecified))))
   '(error nil                         ((t (:weight unspecified)))))

  (set-face-attribute 'bold nil :weight 'unspecified)
  (set-face-attribute 'buffer-menu-buffer nil :weight 'unspecified)
  (set-face-attribute 'help-key-binding nil    :weight 'unspecified)

  (set-face-attribute 'mode-line-buffer-id nil :weight 'unspecified)
  (set-face-attribute 'mood-line-buffer-status-narrowed nil :weight 'unspecified)

  (set-face-attribute 'tooltip nil :inherit 'default :font "Iosevka 16")

  (defun magit-remove-font-weight-hook ()
    (set-face-attribute 'magit-diff-added-highlight nil    :weight 'unspecified)
    (set-face-attribute 'magit-diff-file-heading nil    :weight 'unspecified)
    (set-face-attribute 'magit-diff-hunk-heading-highlight nil    :weight 'unspecified)
    (set-face-attribute 'magit-diff-removed-highlight nil    :weight 'unspecified)
    (set-face-attribute 'magit-diff-revision-summary-highlight nil    :weight 'unspecified)
    (set-face-attribute 'magit-header-line nil    :weight 'unspecified))
  (add-hook 'magit-mode-hook 'magit-remove-font-weight-hook)

#+end_src

Only use variable-pitch if explicitly called.

#+begin_src emacs-lisp
  (defun niva/variable-pitch-on ()
    (interactive)
    (set-face-attribute 'variable-pitch nil :font "CMU Serif 14" :inherit 'default))
#+end_src

** Ligatures

#+begin_src emacs-lisp
  (use-package ligature
    :config (global-ligature-mode t)
    (ligature-set-ligatures 'prog-mode '("==" "!=" "<-" "<--" "->" "-->")))
#+end_src
