#+PROPERTY: header-args
#+OPTIONS: toc:2
#+STARTUP: overview

* Package management
** straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Encryption
** pinentry
#+begin_src emacs-lisp
  (use-package pinentry
    :straight t
    :config
    (fset 'epg-wait-for-status 'ignore)
    (pinentry-start))
#+end_src

* Imports
#+begin_src emacs-lisp
  (defvar import-file
    (expand-file-name "private/config.el" user-emacs-directory))

  (when (file-readable-p import-file)
    (load import-file))
#+end_src

* Text edit settings
** Defaults
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4
                c-default-style "linux"
                create-lockfiles nil
                completion-cycle-threshold 3)
#+end_src

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Show only one active window when opening multiple files at the same time.
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'delete-other-windows)
#+end_src

** Indentation rules

#+begin_src emacs-lisp
  (setq-default evil-auto-indent t
                indent-line-function 'evil-indent-line
                evil-indent-convert-tabs nil
                indent-tabs-mode nil
                tab-always-indent t
                tab-width 2
                org-src-tab-acts-natively t)

  (defun indent-tabs-hook ()
    (setq tab-width 2
          indent-tabs-mode t
          evil-auto-indent t
          c-basic-offset 4))

  (dolist (hook '(c++-mode-hook
                  c-mode-hook
                  c++-ts-mode-hook
                  c-ts-mode-hook))
    (add-hook hook 'indent-tabs-hook))
#+end_src

** Clean up trailing whitespace
#+begin_src emacs-lisp
  (setq org-src-strip-leading-and-trailing-blank-lines t)

  (add-hook 'prog-mode-hook
            (lambda ()
              (setq show-trailing-whitespace t)
              (add-hook 'before-save-hook 'delete-trailing-whitespace)))
#+end_src

** recentf
#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq history-length 9999
        history-delete-duplicates t)
#+end_src

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Scrolling behavior
#+begin_src emacs-lisp
  (setq-default maximum-scroll-margin 0.5
                scroll-conservatively 5
                scroll-margin 4
                compilation-scroll-output t
                scroll-preserve-screen-position t)
#+end_src

** Hide buffers

Hide buffers by prepending space to buffer name.
#+begin_src emacs-lisp
  (defun niva/hide-buffer (bufname)
    (if (get-buffer bufname)
        (with-current-buffer bufname
          (rename-buffer (concat " " bufname)))))
#+end_src

#+begin_src emacs-lisp
  (defun remove-messages-buffer ()
    (niva/hide-buffer "*Messages*"))
#+end_src

#+begin_src emacs-lisp
  (defun niva/hide-lsp-buffers ()
    (setq-default message-log-max nil)
    (niva/hide-buffer "*clangd*")
    (niva/hide-buffer "*clangd::stderr*")
    (niva/hide-buffer "*pyright*")
    (niva/hide-buffer "*pyright::stderr*"))
#+end_src

Don't show *Buffer list* when opening multiple files at the same time.
#+begin_src emacs-lisp
  (setq inhibit-startup-buffer-menu t)
#+end_src

** Clipboard
Prevent emacs from contaminating system clipboard.
#+begin_src emacs-lisp
  (use-package simpleclip
    :straight t
    :config
    (setq interprogram-cut-function 'simpleclip-set-contents
          interprogram-paste-function 'simpleclip-get-contents)
    (simpleclip-mode 1))
#+end_src

* Customization
** GUI settings
#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode nil)
  (menu-bar-mode 1)
  (set-fringe-mode 1)
  (global-visual-line-mode t)
  (global-hl-line-mode -1)
  (blink-cursor-mode 1)

  (setq-default left-fringe-width 16
                right-fringe-width 3)
#+end_src

*** Window management
#+begin_src emacs-lisp
  (setq window-divider-default-places t
        window-divider-default-bottom-width 1
        window-divider-default-right-width 1)

  (window-divider-mode 1)

  (setq ns-use-thin-smoothing nil
        ns-use-proxy-icon nil
        ns-use-mwheel-momentum t
        ns-antialias-text nil
        ns-use-mwheel-acceleration t
        frame-resize-pixelwise t)
#+end_src

Always move cursor to help window.
#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

**** winner-mode
#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

*** Tabs
#+begin_src emacs-lisp
  (defun niva/tab-bar-config ()
    (setq tab-bar-show nil
          tab-bar-auto-width-max '(120 . 20)
          tab-bar-close-button-show nil
          tab-bar-close-tab-select 'recent
          tab-bar-new-button-show nil
          tab-bar-new-tab-to 'right
          tab-bar-position nil
          tab-bar-tab-name-function 'tab-bar-tab-name-current)

    (set-face-attribute 'tab-bar nil
                        :box nil
                        :background (face-attribute 'default :background))
    (set-face-attribute 'tab-bar-tab nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-keyword-face :foreground))
    (set-face-attribute 'tab-bar-tab-inactive nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-comment-face :foreground)))
  (niva/tab-bar-config)

  (global-hl-line-mode -1)
  (blink-cursor-mode 1)
#+end_src

*** tab-bar-echo-area
#+begin_src emacs-lisp
  (use-package tab-bar-echo-area
    :straight t
    :config
    (tab-bar-echo-area-mode 1))
#+end_src

** Theme
*** Theme packages
#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t
    :custom (doom-themes-enable-bold nil)
    (doom-themes-org-config)
    (doom-themes-enable-italic t))
  (use-package ample-theme     :straight t)
  (use-package cyberpunk-theme :straight t)
  (use-package stimmung-themes :straight t)
  (use-package color-theme-modern :straight t)
#+end_src

*** Modus
#+begin_src emacs-lisp
  (setq modus-themes-bold-constructs nil
        modus-themes-hl-line (quote (accented))
        modus-themes-org-blocks nil
        modus-themes-region '(bg-only)
        modus-themes-tabs-accented t)

  (setq modus-themes-common-palette-overrides
        '((fringe unspecified)
          (border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)))

  (setq modus-themes-completions '((matches . (background minimal))
                                   (selection . (background minimal))
                                   (popup . (background minimal))))
#+end_src

*** Kaolin
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :straight t
    :config
    (setq kaolin-themes-bold nil
          kaolin-themes-italic t
          kaolin-themes-underline t
          kaolin-themes-modeline-border nil))
#+end_src
*** Solaire
#+begin_src emacs-lisp
  (use-package solaire-mode
    :straight t
    :config
    (solaire-global-mode +1)
    (solaire-mode-reset))
  (add-hook 'eshell-mode-hook (lambda () (solaire-mode t) (solaire-mode-reset)))
  (add-hook 'gptel-mode-hook (lambda () (solaire-mode t) (solaire-mode-reset)))
  (add-hook 'read-only-mode-hook (lambda () (solaire-mode t) (solaire-mode-reset)))
#+end_src
*** Load theme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (load-theme 'doom-tomorrow-night t)
  (set-face-attribute 'internal-border nil :background 'unspecified)
  (set-face-attribute 'link nil :foreground 'unspecified)
#+end_src

** Compilaton mode
#+begin_src emacs-lisp
  (use-package xterm-color :straight t)
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun niva/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'niva/advice-compilation-filter)
#+end_src

** Mode line
*** Mode line format
#+begin_src emacs-lisp
  (defun is-vc-file ()
    (let ((backend (vc-backend (buffer-file-name))))
      (if backend
          t
        nil)))

  (defun niva/git-state-symbol ()
    (pcase (vc-git-state (buffer-file-name))
      ('ignored ".")
      ('unregistered ".")
      ('removed "-")
      ('edited "*")
      ('added "+")
      ('conflict "‼")
      (_ "")))

  (defvar-local niva--git-mode-line "")
  (make-variable-buffer-local 'niva--git-mode-line)
  (defun niva/update-git-branch-name ()
    (interactive)
    (if vc-mode
        (setq niva--git-mode-line (format " |  %s%s" (niva/git-state-symbol) (substring vc-mode 5)))
      (setq niva--git-mode-line "")))

  (setq my-git-branch-name-timer (run-with-timer 0 5 'niva/update-git-branch-name))

  (defun niva/git-repository-name ()
    (let ((repository-name (vc-git-repository-url buffer-file-name)))
      (s-replace ".git" "" (s-replace "git@github.com:" "" repository-name))))

  (defun niva/bottom-right-window-p ()
    (let* ((frame (selected-frame))
           (frame-width (frame-width frame))
           (frame-height (frame-height frame)))
      (eq (selected-window)
          (window-at (- frame-width 3) (- frame-height 3)))))

  (defun niva/format-right-mode-line ()
    (format "%s %s %s %s "
            niva--irc-notification
            (if (= niva-elfeed-unread-count 0) ""
              (format "  %-2d" niva-elfeed-unread-count))
            (format-time-string "%R") " "))

  (setq-default mode-line-format
                `((:eval (if (and buffer-file-name (buffer-modified-p)) "*%b" " %b"))
                  (:eval (if vc-mode niva--git-mode-line))
                  " | %l:%c"
                  (:eval (propertize " " 'display (list 'space :align-to (- (window-total-width) (length (niva/format-right-mode-line))))))
                  (:eval (if (niva/bottom-right-window-p) (niva/format-right-mode-line)))))
#+end_src


#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+end_src

** Font
*** Remove font weight
#+begin_src emacs-lisp
  (defun niva/remove-font-weight ()
    (interactive)
    (custom-set-faces
     '(default                           ((t (:background unspecified))))
     '(compilation-error                 ((t (:weight     unspecified))))
     '(bold                              ((t (:weight     unspecified))))
     '(outline-1                         ((t (:weight     unspecified))))
     '(outline-2                         ((t (:weight     unspecified))))
     '(outline-3                         ((t (:weight     unspecified))))
     '(font-lock-comment-face            ((t (:weight     unspecified))))
     '(error nil                         ((t (:weight     unspecified)))))

    (set-face-attribute 'bold               nil :weight 'unspecified)
    (set-face-attribute 'buffer-menu-buffer nil :weight 'unspecified)
    (set-face-attribute 'help-key-binding   nil :weight 'unspecified :family 'unspecified :box 'unspecified :inherit 'default)
    (set-face-attribute 'tooltip            nil :inherit 'default))
  (niva/remove-font-weight)
#+end_src

*** Enable chinese characters

#+begin_src emacs-lisp
  (use-package cnfonts
    :straight t
    :config
    (setq cnfonts-use-face-font-rescale t))
#+end_src

** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :straight t
    :config
    (global-ligature-mode t)
    (ligature-set-ligatures 'prog-mode '("==" "!=" "<-" "<--" "->" "-->")))
#+end_src

* Controls
** Evil mode
*** evil-mode
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-want-C-u-scroll t
          evil-undo-system 'undo-redo
          evil-scroll-count 8)
    (evil-mode))
#+end_src

*** general
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config (general-evil-setup t))
#+end_src

*** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :straight t
    :config
    (evil-collection-init))
#+end_src

*** savehist
#+begin_src emacs-lisp
  (use-package savehist
    :straight t
    :init
    (savehist-mode))
#+end_src

** Window management
*** transpose-frame
#+begin_src emacs-lisp
  (use-package transpose-frame :straight t)
#+end_src
** Keybindings

#+begin_src emacs-lisp
  (use-package bind-key
    :straight t)
#+end_src

#+begin_src emacs-lisp
  (setq mac-escape-modifier nil
        mac-option-modifier nil
        mac-right-command-modifier 'meta
        mac-pass-command-to-system t)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-j") nil)
  (global-set-key (kbd "C-k") nil)
#+end_src

#+begin_src emacs-lisp
  (global-set-key                   (kbd "€")       (kbd "$"))
  (global-set-key                   (kbd "<f13>")   'evil-invert-char)
  (define-key evil-insert-state-map (kbd "C-c C-e") 'comment-line)
  (define-key evil-visual-state-map (kbd "C-c C-e") 'comment-line)

  (define-key evil-normal-state-map (kbd "U")       'evil-redo)

  (define-key evil-normal-state-map (kbd "C-a C-x") 'kill-this-buffer)
  (define-key help-mode-map         (kbd "C-a C-x") 'evil-delete-buffer)
  (define-key evil-normal-state-map (kbd "C-w C-x") 'delete-window)
  (define-key evil-normal-state-map (kbd "s-e")     'eshell)
  (define-key evil-normal-state-map (kbd "M-e")     'eshell)
  (define-key evil-normal-state-map (kbd "B V")     'org-babel-mark-block)
  (define-key evil-normal-state-map (kbd "SPC e b") 'org-babel-execute-src-block-maybe)

  (define-key evil-normal-state-map (kbd "C-b n")   'evil-next-buffer)
  (define-key evil-normal-state-map (kbd "C-b p")   'evil-previous-buffer)
  (define-key evil-normal-state-map (kbd "C-b C-b") 'evil-switch-to-windows-last-buffer)
#+end_src

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w n")     'tab-next)
  (define-key evil-normal-state-map (kbd "C-w c")     'tab-new)
  (define-key evil-normal-state-map (kbd "C-<tab>")   'tab-next)
  (define-key evil-normal-state-map (kbd "C-S-<tab>") 'tab-previous)
#+end_src


#+begin_src emacs-lisp
  (global-set-key (kbd "s-q")        'save-buffers-kill-terminal)
  (global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
  (global-set-key (kbd "s-t")        'tab-new)
  (global-set-key (kbd "s-w")        'tab-close)
  (global-set-key (kbd "s-z")        nil)
#+end_src

*** Window management
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w -")   'evil-window-split)
  (define-key evil-normal-state-map (kbd "C-w |")   'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w C--") 'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w SPC") 'transpose-frame)

  (define-key evil-normal-state-map (kbd "C-w H") 'buf-move-left)
  (define-key evil-normal-state-map (kbd "C-w J") 'buf-move-down)
  (define-key evil-normal-state-map (kbd "C-w K") 'buf-move-up)
  (define-key evil-normal-state-map (kbd "C-w L") 'buf-move-right)

  (define-key evil-normal-state-map (kbd "M-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "M->") 'ns-prev-frame)
  (define-key evil-normal-state-map (kbd "s-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "s->") 'ns-prev-frame)
#+end_src

**** Move to next frame if windmove fails

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w h") (lambda() (interactive)
                                                    (condition-case nil
                                                        (windmove-left)
                                                      (error (ns-next-frame)))))

  (define-key evil-normal-state-map (kbd "C-w l") (lambda() (interactive)
                                                    (condition-case nil
                                                        (windmove-right)
                                                      (error (ns-prev-frame)))))
#+end_src
** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :config
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode))

  (nvmap :keymaps 'override :prefix "SPC"
    "SPC"   '(execute-extended-command :which-key "M-x")
    "B"     '(project-switch-to-buffer   :which-key "Switch buffer")
    "b"     '(ido-switch-buffer          :which-key "Switch buffer")
    "c C"   '(recompile                  :which-key "Recompile")
    "c a"   '(eglot-code-actions         :which-key "eglot-code-actions")
    "c c"   '(projectile-compile-project :which-key "Compile project")
    "c t"   '(projectile-test-project    :which-key "Test project")
    "d l"   '(devdocs-lookup             :which-key "devdocs-lookup")
    "d u"   '(magit-diff-unstaged        :which-key "magit-diff-unstaged")
    "e r"   '(eval-region                :which-key "eval-region")
    "h p"   '(projectile-find-other-file :which-key "projectile-find-other-file")
    "m *"   '(org-ctrl-c-star            :which-key "Org-ctrl-c-star")
    "m +"   '(org-ctrl-c-minus           :which-key "Org-ctrl-c-minus")
    "m ."   '(counsel-org-goto           :which-key "Counsel org goto")
    "m B"   '(org-babel-tangle           :which-key "Org babel tangle")
    "m I"   '(org-toggle-inline-images   :which-key "Org toggle inline imager")
    "m T"   '(org-todo-list              :which-key "Org todo list")
    "m e"   '(org-export-dispatch        :which-key "Org export dispatch")
    "m f"   '(org-footnote-new           :which-key "Org footnote new")
    "m h"   '(org-toggle-heading         :which-key "Org toggle heading")
    "m i"   '(org-toggle-item            :which-key "Org toggle item")
    "m n"   '(org-store-link             :which-key "Org store link")
    "m o"   '(org-set-property           :which-key "Org set property")
    "m t"   '(org-todo                   :which-key "Org todo")
    "m x"   '(org-toggle-checkbox        :which-key "Org toggle checkbox")
    "n f"   '(org-roam-node-find         :which-key "Find Org-roam node")
    "n i"   '(org-roam-node-insert       :which-key "Insert Org-roam node")
    "n u"   '(org-roam-ui-open           :which-key "Open Org-roam UI")
    "o a"   '(org-agenda                 :which-key "Org agenda")
    "o h"   '(consult-org-heading        :which-key "consult-org-heading")
    "p e"   '(projectile-recentf         :which-key "projectile-recentf")
    "r o"   '(read-only-mode             :which-key "read-only-mode")
    "s h"   '(git-gutter:stage-hunk      :which-key "git-gutter:stage-hunk")
    "t t"   '(toggle-truncate-lines      :which-key "Toggle truncate lines")
    "w U"   '(winner-redo                :which-key "winner-redo")
    "w u"   '(winner-undo                :which-key "winner-undo")

    "elf"   '(elfeed                     :which-key "elfeed")
    "eww"   '(eww                        :which-key "eww")
    "gpt"   '(gptel                      :which-key "gptel")
    "rec"   '(recentf-open               :which-key "devdocs-lookup")
    "rip"   '(consult-ripgrep            :which-key "consult-ripgrep")
    "cir"   '(circe                      :which-key "circe")
    "ir"    '(niva/switch-irc-buffers    :which-key "niva/switch-irc-buffers")
    "scr"   '(scratch-buffer             :which-key "scratch-buffer")

    "time"  '((lambda () (interactive) (message (format-time-string "%H:%M | %a %d %b | v%W")))       :which-key "Display current time")
    "conf"  '((lambda () (interactive) (find-file "~/.config/emacs/config.org"))                      :which-key "Open config.org")
    "vconf" '((lambda () (interactive) (split-window-right) (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")
    "sconf" '((lambda () (interactive) (split-window-below) (find-file "~/.config/emacs/config.org")) :which-key "Open config.org"))
#+end_src

** m-x

#+begin_src emacs-lisp
  (use-package smex
    :straight t)
  (smex-initialize)
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :config
    (setq vertico-count 10
          vertico-resize t)
    :custom (vertico-cycle t))

  (use-package vertico-multiform
    :straight nil
    :load-path "straight/repos/vertico/extensions"
    :after vertico
    :config
    (setq vertico-sort-function #'vertico-sort-history-alpha
          vertico-multiform-commands
          '((consult-theme (vertico-sort-function . vertico-sort-alpha))
            (consult-grep (vertico-count . 20))
            (consult-ripgrep (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center) (vertico-count . 20))))

    (vertico-mode)
    (vertico-multiform-mode))

  (use-package vertico-mouse
    :straight nil
    :load-path "straight/repos/vertico/extensions"
    :after vertico
    :hook
    (vertico-mode . vertico-mouse-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    :straight t
    :config
    (consult-customize
     consult-theme
     :preview-key '("M-." "C-SPC"
                    :debounce 0.2 any))
    (setq consult-ripgrep-args "rg \
              --null \
              --line-buffered \
              --color=never \
              --max-columns=1000 \
              --path-separator / \
              --smart-case \
              --no-heading \
              --with-filename \
              --line-number \
              --hidden \
              --follow \
              --glob \"!.git/*\" ."))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight   t
    :commands (yas-recompile-all yas-reload-all yas-minor-mode)

    :hook
    (c++-ts-mode . yas-minor-mode)
    (c++-mode . yas-minor-mode)
    (c-mode . yas-minor-mode)
    (c-ts-mode . yas-minor-mode)
    :config
    (setq yas-snippet-dirs
          `(,(concat user-emacs-directory (file-name-as-directory "snippets")))))

  (use-package yasnippet-snippets
    :straight t
    :after yasnippet)
#+end_src
** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :straight (corfu :repo "minad/corfu" :branch "main" :files (:defaults "extensions/*.el"))
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-quit-no-match 'separator)
    (corfu-preselect 'valid)

    (corfu-echo-documentation t)
    (corfu-auto-delay 0.2)
    (corfu-auto-prefix 1)

    :hook ((prog-mode . corfu-mode))
    :init
    (corfu-popupinfo-mode t)

    :config
    (setq corfu-popupinfo-delay '(0.5 . 0.2)))

  (add-hook 'eshell-mode-hook (lambda () (setq-local corfu-auto nil) (corfu-mode)))
  (add-hook 'org-mode-hook (lambda () (corfu-mode)))

  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))

  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  (use-package cape
    :straight t
    :config
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-keyword))
#+end_src

** buffer-move
#+begin_src emacs-lisp
  (use-package buffer-move
    :straight t)
#+end_src

** Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :straight t
    :config
    (setq hydra-is-helpful nil)
    (defhydra hydra-win-resize (evil-normal-state-map "C-w")
      "Resize window"
      ("C-j" (lambda () (interactive) (evil-window-decrease-height 4)))
      ("C-k" (lambda () (interactive) (evil-window-increase-height 4)))
      ("C-h" (lambda () (interactive) (evil-window-decrease-width 8)))
      ("C-l" (lambda () (interactive) (evil-window-increase-width 8))))

    (defhydra hydra-flymake-error (evil-normal-state-map "SPC fm")
      "Flymake go to error"
      ("n"   flymake-goto-next-error)
      ("N" flymake-goto-prev-error)))
#+end_src

* File management
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :init
    (setq projectile-enable-caching t)
    :bind
    (:map projectile-mode-map
          ("s-p" . projectile-command-map)
          ("C-c p" . projectile-command-map))
    :config
    (add-to-list 'projectile-globally-ignored-directories ".cache")
    (add-to-list 'projectile-globally-ignored-directories ".DS_Store")
    (add-to-list 'projectile-globally-ignored-directories ".vscode")
    (add-to-list 'projectile-globally-ignored-directories "BUILD")
    (projectile-mode +1)
    (setq projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".swp" ".so" ".a" ".d" ".ld")
          projectile-globally-ignored-files '("TAGS" "tags" ".DS_Store" ".cache")
          projectile-ignored-projects `("~/.pyenv/")
          projectile-mode-line-function #'(lambda () (format " [%s]" (projectile-project-name)))
          projectile-enable-caching t
          projectile-indexing-method 'native
          projectile-file-exists-remote-cache-expire nil)

    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (projectile-register-project-type 'has-command-at-point '(".mbed")
                                      :compile "build-target" :src-dir "src/"))
#+end_src

** File-related keybindings
#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "."     '(lambda ()
               (interactive)
               (setq-local tmpdir default-directory)
               (cd "~")
               (call-interactively 'find-file)
               (cd tmpdir)
               :which-key "find ~/file")
    "f f"   '(find-file :which-key "Find file")
    "p f"   '(projectile-find-file :which-key "projectile-find-file")
    "p p"   '(projectile-switch-project :which-key "projectile-switch-project")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Emacs system-files
*** Backup files
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "/tmp/backups/")))
  (make-directory "/tmp/auto-saves/" t)
#+end_src

*** Auto-save files
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix "/tmp/auto-saves/sessions/"
        auto-save-file-name-transforms `((".*" ,"/tmp/auto-saves/" t)))

  (add-hook 'kill-emacs-hook
            (lambda ()
              (dolist (file (directory-files temporary-file-directory t "\\`auto-save-file-name-p\\'"))
                (delete-file file))))
#+end_src

*** Lock files
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** Other
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  (setq vc-follow-symlinks t)
#+end_src

* Performance
** Native compilation
#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src
** GCMH
#+begin_src emacs-lisp
  (use-package gcmh
    :straight t
    :demand
    :custom
    (gcmh-idle-delay 100)
    (gcmh-high-cons-threshold 104857600)
    :config
    (gcmh-mode +1))
#+end_src

#+begin_src emacs-lisp
  (defun niva/garbage-collect ()
    (interactive)
    (message (cl-loop for (type size used free) in (garbage-collect)
                      for used = (* used size)
                      for free = (* (or free 0) size)
                      for total = (file-size-human-readable (+ used free))
                      for used = (file-size-human-readable used)
                      for free = (file-size-human-readable free)
                      concat (format "%s: %s + %s = %s\n" type used free total))))
#+end_src
** Profiling
#+begin_src emacs-lisp
  (use-package esup
    :straight t)
#+end_src

** Byte-compile config on save
#+begin_src emacs-lisp
  (defun niva/compile-config ()
    (interactive)
    (when (and (buffer-file-name)
               (string= (file-name-nondirectory (buffer-file-name)) "config.org"))
      (org-babel-tangle-file
       (expand-file-name "config.org" user-emacs-directory)
       (expand-file-name "config.el" user-emacs-directory) "emacs-lisp")

      (byte-compile-file (expand-file-name "config.el" user-emacs-directory))))

  (add-hook 'after-save-hook 'niva/compile-config)
#+end_src
* Development
** Elisp

#+begin_src emacs-lisp
  (defun niva/format-all-elisp-code-blocks ()
    (interactive)
    (setq-local indent-tabs-mode nil)
    (save-excursion
      (let ((message-log-max nil)
            (inhibit-message t)
            (inhibit-redisplay t))

        (org-element-map (org-element-parse-buffer) 'src-block
          (lambda (src-block)
            (when (string= "emacs-lisp" (org-element-property :language src-block))
              (let* ((begin (org-element-property :begin src-block))
                     (end (org-element-property :end src-block)))
                (indent-region begin end nil)
                (untabify begin end)
                (replace-regexp-in-region "\n\n*#\\+end_src" "\n#+end_src" begin end)
                (replace-regexp-in-region "#\\+begin_src emacs-lisp\n\n*" "#+begin_src emacs-lisp\n" begin end)
                (replace-regexp-in-region "\n *#\\+end_src"   "\n#+end_src" begin end)
                (replace-regexp-in-region "\n *#\\+begin_src" "\n#+begin_src" begin end)))))))
    (font-lock-fontify-block))
  (add-hook 'before-save-hook 'niva/format-all-elisp-code-blocks)
#+end_src

#+begin_src emacs-lisp
  (setq cc-other-file-alist '(("\\.cc\\'" (".hh" ".h"))
                              ("\\.hh\\'" (".cc" ".C" ".CC" ".cxx" ".cpp" ".c++"))
                              ("\\.c\\'" (".h"))
                              ("\\.m\\'" (".h"))
                              ("\\.h\\'" (".c" ".cc" ".C" ".CC" ".cxx" ".cpp" ".c++" ".m"))
                              ("\\.C\\'" (".H" ".hh" ".h"))
                              ("\\.H\\'" (".C" ".CC"))
                              ("\\.CC\\'" (".HH" ".H" ".hh" ".h"))
                              ("\\.HH\\'" (".CC"))
                              ("\\.c\\+\\+\\'" (".h++" ".hh" ".h"))
                              ("\\.h\\+\\+\\'" (".c++"))
                              ("\\.cpp\\'" (".hpp" ".hh" ".h"))
                              ("\\.tpp\\'" (".hpp" ".hh" ".h"))
                              ("\\.hpp\\'" (".cpp" ".tpp"))
                              ("\\.cxx\\'" (".hxx" ".hh" ".h"))
                              ("\\.hxx\\'" (".cxx"))))
#+end_src
** Python
*** Pyright
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :straight t)

  (defun lsp-python-ms-format-buffer ()
    (interactive)
    (when (and (executable-find "yapf") buffer-file-name)
      (call-process "yapf" nil nil nil "-i" buffer-file-name)))

  (add-hook 'python-mode-hook (lambda () (add-hook 'after-save-hook #'lsp-python-ms-format-buffer t t)))
#+end_src
** Language server
*** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :straight t
    :config
    (add-to-list 'eglot-server-programs '((c-mode c++-mode c++-ts-mode) . ("clangd"
                                                                           "--query-driver=/Applications/ARM/**/*"
                                                                           "--clang-tidy"
                                                                           "--completion-style=detailed"
                                                                           "--pch-storage=memory"
                                                                           "--header-insertion=never"
                                                                           "-background-index-priority=background"
                                                                           "-j=8"
                                                                           "--log=error"
                                                                           "--function-arg-placeholders"))))
  (dolist (hook '(c-mode-hook c++-mode-hook c-ts-mode-hook c++-ts-mode-hook))
    (add-hook hook 'eglot-ensure))


  (setq eldoc-idle-delay 0.25)
  (setq eldoc-echo-area-use-multiline-p t)

  (with-eval-after-load 'eglot

    (add-hook 'eglot-managed-mode-hook
              (lambda ()
                (setq eldoc-documentation-functions
                      (cons #'flymake-eldoc-function
                            (remove #'flymake-eldoc-function eldoc-documentation-functions)))
                (setq eldoc-documentation-strategy #'eldoc-documentation-compose))))
#+end_src

**** Format on save
#+begin_src emacs-lisp
  (defun eglot-c-save-hooks ()
    (add-hook 'before-save-hook #'eglot-format-buffer))

  (add-hook 'c-mode-hook      #'eglot-c-save-hooks)
  (add-hook 'c-ts-mode-hook   #'eglot-c-save-hooks)
  (add-hook 'c++-mode-hook    #'eglot-c-save-hooks)
  (add-hook 'c++-ts-mode-hook #'eglot-c-save-hooks)
#+end_src

**** Flymake

#+begin_src emacs-lisp
  (use-package flymake
    :straight t
    :config
    (setq flymake-start-on-save-buffer t
          flymake-no-changes-timeout 1
          flymake-fringe-indicator-position 'right-fringe
          flymake-mode-line-lighter ""))
#+end_src
** Tree-sitter
*** treesit
#+begin_src emacs-lisp
  (use-package treesit
    :straight (:type built-in)
    :config
    (setq treesit-font-lock-level 1
          c-ts-mode-indent-offset 2
          treesit-language-source-alist '((bash         "https://github.com/tree-sitter/tree-sitter-bash")
                                          (c            "https://github.com/tree-sitter/tree-sitter-c")
                                          (cpp          "https://github.com/tree-sitter/tree-sitter-cpp")
                                          (cmake        "https://github.com/uyha/tree-sitter-cmake")
                                          (js           "https://github.com/tree-sitter/tree-sitter-javascript")
                                          (json         "https://github.com/tree-sitter/tree-sitter-json")
                                          (python       "https://github.com/tree-sitter/tree-sitter-python")
                                          (tsx          "https://github.com/tree-sitter/tree-sitter-typescript")
                                          (typescript   "https://github.com/tree-sitter/tree-sitter-typescript")
                                          (yaml         "https://github.com/ikatyang/tree-sitter-yaml")))

    (dolist (pair '(("\\.sh\\'"           . bash-ts-mode)
                    ("\\.c\\'"            . c-ts-mode)
                    ("\\.h\\'"            . c-ts-mode)
                    ("\\.cpp\\'"          . c++-ts-mode)
                    ("\\.hpp\\'"          . c++-ts-mode)
                    ("\\.tpp\\'"          . c++-ts-mode)
                    ("\\.java\\'"         . java-ts-mode)
                    ("\\.js\\'"           . js-ts-mode)
                    ("\\.json\\'"         . json-ts-mode)
                    ("\\.ts\\'"           . typescript-ts-mode)
                    ("\\.tsx\\'"          . tsx-ts-mode)
                    ("\\.css\\'"          . css-ts-mode)
                    ("\\.py\\'"           . python-ts-mode)
                    ("\\.yaml\\'"         . yaml-ts-mode)
                    ("\\.clangd\\'"       . yaml-ts-mode)
                    ("\\.yml\\'"          . yaml-ts-mode)
                    ("\\.clang-format\\'" . yaml-ts-mode)
                    ("\\.clang-tidy\\'"   . yaml-ts-mode)))
      (push pair auto-mode-alist)))
#+end_src

** Version control
*** Git gutter
**** git-gutter-fringe
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :straight t
    :config
    (setq git-gutter:update-timer 1)

    (if (string-match-p "modus" (prin1-to-string custom-enabled-themes))
        (progn (set-face-attribute 'git-gutter-fr:added    nil :foreground (face-attribute 'modus-themes-fg-green-intense :foreground) :background 'unspecified)
               (set-face-attribute 'git-gutter-fr:modified nil :foreground (face-attribute 'modus-themes-fg-blue          :foreground) :background 'unspecified)
               (set-face-attribute 'git-gutter-fr:deleted  nil :foreground (face-attribute 'modus-themes-fg-red-intense   :foreground) :background 'unspecified))
#+end_src

***** Graphics
#+begin_src emacs-lisp
  (fringe-helper-define 'git-gutter-fr:added nil
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X..")

  (fringe-helper-define 'git-gutter-fr:deleted nil
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X..")

  (fringe-helper-define 'git-gutter-fr:modified nil
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X.."
    "X..X"
    "..X."
    ".X..")

  (global-git-gutter-mode 1)))
#+end_src

*** magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :config
    (setq ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain)

    (defun disable-y-or-n-p (orig-fun &rest args)
      (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
        (apply orig-fun args)))

    (advice-add 'ediff-quit :around #'disable-y-or-n-p)

    (add-to-list 'magit-no-confirm 'discard))
#+end_src
** Documentation
*** devdocs
#+begin_src emacs-lisp
  (use-package devdocs
    :straight t
    :init
    (defvar lps/devdocs-alist
      '((python-mode-hook     . "python~3.11")
        (c-mode-hook          . "c")
        (c++-mode-hook        . "cpp")
        (org-mode-hook        . "elisp")
        (elisp-mode-hook      . "elisp")
        (emacs-lisp-mode-hook . "elisp")
        (sh-mode-hook         . "bash")))

    (setq devdocs-window-select t
          shr-max-image-proportion 0.4)

    (dolist (pair lps/devdocs-alist)
      (let ((hook (car pair))
            (doc (cdr pair)))
        (add-hook hook `(lambda () (setq-local devdocs-current-docs (list ,doc))))))

    (define-key evil-normal-state-map (kbd "SPC g d")
                (lambda ()
                  (interactive)
                  (devdocs-lookup nil (thing-at-point 'symbol t)))))
#+end_src

* Terminal
** eshell
#+begin_src emacs-lisp
  (use-package eshell
    :straight t
    :defines eshell-prompt-function
    :config
    (add-hook 'eshell-mode-hook
              (lambda ()
                (define-key eshell-hist-mode-map (kbd "C-c C-l") nil)
                (define-key eshell-hist-mode-map (kbd "M-s")     nil)
                (define-key eshell-mode-map      (kbd "C-a")     'eshell-bol)
                (define-key eshell-mode-map      (kbd "C-l")     'eshell/clear)
                (define-key eshell-mode-map      (kbd "C-r")     'eshell-isearch-backward)
                (define-key eshell-mode-map      (kbd "C-u")     'eshell-kill-input)))

    (setq eshell-hist-ignoredups t
          eshell-ask-to-save-history 'always
          eshell-cmpl-cycle-completions t
          eshell-cmpl-ignore-case t
          eshell-error-if-no-glob t
          eshell-glob-case-insensitive t
          eshell-input-filter (lambda (input) (not (string-match-p "\\`\\s-+" input)))
          eshell-kill-processes-on-exit t
          eshell-scroll-to-bottom-on-input 'all
          eshell-scroll-to-bottom-on-output nil
          eshell-banner-message
          '(format "%s %s\n"
                   (propertize (format " %s " (string-trim (buffer-name)))
                               'face 'mode-line-highlight)
                   (propertize (current-time-string)
                               'face 'font-lock-keyword-face))))
#+end_src

*** eshell-syntax-highlighting
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :straight t
    :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

*** Kill buffer on quit
#+begin_src emacs-lisp
  (defun niva/term-handle-exit (&optional process-name msg)
    (kill-buffer (current-buffer)))

  (advice-add 'term-handle-exit :after 'niva/term-handle-exit)
#+end_src

*** Log coloring
#+begin_src emacs-lisp
  (defun niva/font-lock-comment-annotations ()
    (interactive)
    (font-lock-add-keywords
     nil
     '(("\\<\\(.*ERR.*\\)"     1 'compilation-error   t)
       ("\\<\\(.*INFO.*\\)"    1 'compilation-info    t)
       ("\\<\\(.*DEBUG.*\\)"   1 'compilation-info    t)
       ("\\<\\(.*WARN.*\\)"    1 'compilation-warning t)
       ("\\<\\(.*DEBUG: --- CMD: POLL(60) REPLY: ISTATR(49) ---.*\\)" 1 'completions-common-part t)
       ("\\<\\(.*DEBUG: --- CMD: OUT(68) REPLY: ACK(40) ---.*\\)"     1 'completions-common-part t))))

  (add-hook 'eshell-mode-hook 'font-lock-comment-annotations)
#+end_src

*** Alias
#+begin_src emacs-lisp
  (defalias 'ff    "for i in ${eshell-flatten-list $*} {find-file $i}")
  (defalias 'emacs "ff")
  (defalias 'fo    "find-file-other-window $1")
  (defalias 'ts    "ts '[%Y-%m-%d %H:%M:%S]'")
#+end_src

* Org
** olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :straight t
    :config
    (add-hook 'olivetti-mode-hook
              (lambda ()
                (setq olivetti-body-width 120
                      olivetti-minimum-body-width 120))))
#+end_src

** org
#+begin_src emacs-lisp
  (use-package org
    :straight t
    :hook (org-mode . niva/org-mode-setup)
    :config
    (setq org-hide-emphasis-markers t
          org-fontify-quote-and-verse-blocks t
          org-startup-indented t)

    ;; Custom faces for fancy org files
    (defface niva-org-level-1 '((t :inherit 'outline-1 :weight light :height 1.60)) nil :group nil)
    (defface niva-org-level-2 '((t :inherit 'outline-2 :weight light :height 1.40)) nil :group nil)
    (defface niva-org-level-3 '((t :inherit 'outline-3 :weight light :height 1.25)) nil :group nil)
    (defface niva-org-level-4 '((t :inherit 'outline-4 :weight light :height 1.15)) nil :group nil)
    (defface niva-org-level-5 '((t :inherit 'outline-5 :weight light :height 1.12)) nil :group nil)
    (defface niva-org-level-6 '((t :inherit 'outline-6 :weight light :height 1.1))  nil :group nil)
    (defface niva-org-level-7 '((t :inherit 'outline-7 :weight light :height 1.1))  nil :group nil)
    (defface niva-org-level-8 '((t :inherit 'outline-8 :weight light :height 1.1))  nil :group nil))

  (use-package org-superstar
    :straight t)

  (defun niva/org-remove-stars ()
    (font-lock-add-keywords
     nil
     '(("^\\*+ "
        (0
         (prog1 nil
           (put-text-property (match-beginning 0) (match-end 0)
                              'invisible t)))))))

  (defun niva/org-mode-setup ()
    (unless (string= (buffer-name) "config.org")
      (let ((variable-pitch-font "Helvetica")
            (variable-pitch-height 140)
            (fixed-pitch-font "Monaco")
            (fixed-pitch-height 130)
            (org-hide-leading-stars t)
            (evil-auto-indent nil))

        (niva/org-remove-stars)

        (setq-local org-level-faces '(niva-org-level-1
                                      niva-org-level-2
                                      niva-org-level-3
                                      niva-org-level-4
                                      niva-org-level-5
                                      niva-org-level-6
                                      niva-org-level-7
                                      niva-org-level-8))

        (set-face-attribute 'variable-pitch nil :family variable-pitch-font :height variable-pitch-height)
        (set-face-attribute 'fixed-pitch    nil :family fixed-pitch-font    :height fixed-pitch-height)

        (set-face-attribute 'org-block      nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-table      nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code       nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-block      nil :inherit 'fixed-pitch)

        (setq-local visual-fill-column-width 80
                    visual-fill-column-center-text t)
        ;; (olivetti-mode 1)
        (org-indent-mode 1)
        (variable-pitch-mode 1)
        (visual-fill-column-mode)
        (auto-fill-mode 0)
        (visual-line-mode 1))))
#+end_src

Only use variable-pitch if explicitly called.

#+begin_src emacs-lisp
  (defun niva/variable-pitch-on ()
    (interactive)
    (set-face-attribute 'variable-pitch nil :font "CMU Serif 14" :height 1.4 :inherit 'default))
#+end_src

** org-tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-modules 'org-tempo)
  (dolist (pair '(("sh"   . "src sh")
                  ("el"   . "src emacs-lisp")
                  ("sc"   . "src scheme")
                  ("ts"   . "src typescript")
                  ("py"   . "src python")
                  ("go"   . "src go")
                  ("yaml" . "src yaml")
                  ("json" . "src json")
                  ("cpp"  . "src cpp")))
    (add-to-list 'org-structure-template-alist pair))
#+end_src


** org code blocks
#+begin_src emacs-lisp
  (defun narrow-to-region-indirect (start end)
    "Restrict editing in this buffer to the current region, indirectly."
    (interactive "r")
    (deactivate-mark)
    (let ((buf (clone-indirect-buffer nil nil)))
      (with-current-buffer buf
        (narrow-to-region start end))
      (switch-to-buffer buf)))
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :config
    (when (fboundp 'niva/setup-org-roam)
      (niva/setup-org-roam))

    (org-roam-db-autosync-enable))

  (use-package websocket
    :straight t
    :after org-roam)

  (use-package org-roam-ui
    :straight t
    :after org-roam
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t))

  (setq org-roam-file-exclude-regexp (concat (regexp-quote "logseq/bak") "\\|" (regexp-quote "logseq/.recycle")))
  (setq org-roam-dailies-directory "journals/")

  (setq org-roam-capture-templates
        '(("d"
           "default"
           plain
           "%?"
           :target (file+head "pages/${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)))

  (setq org-roam-dailies-capture-templates
        '(("d"
           "default"
           entry
           "* %?"
           :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n\n"))))
#+end_src
** visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :straight t)
#+end_src
* Web
** shr
#+begin_src emacs-lisp
  (use-package shr
    :straight t
    :config
    (setq shr-use-fonts nil
          shr-width 75)

    (defun niva/create-image-content (spec size content-type flags)
      (let ((data (if (consp spec)
                      (car spec)
                    spec)))
        (cond
         ((eq size 'original)
          (create-image data nil t :ascent 100 :format content-type))
         ((eq content-type 'image/svg+xml)
          (create-image data 'svg t :ascent 100))
         (t
          (ignore-errors
            (shr-rescale-image data content-type
                               (plist-get flags :width)
                               (plist-get flags :height)))))))

    (defun niva/handle-image-params (image alt start size)
      (let* ((image-pixel-cons (image-size image t))
             (image-pixel-width (car image-pixel-cons))
             (image-pixel-height (cdr image-pixel-cons))
             (image-scroll-rows (round (/ image-pixel-height (default-font-height)))))
        (when (and (> (current-column) 0) (> image-pixel-width 400))
          (insert "\n"))
        (insert-sliced-image image (or alt "*") nil image-scroll-rows 1)
        (put-text-property start (point) 'image-size size)
        (when (and shr-image-animate
                   (cond ((fboundp 'image-multi-frame-p)
                          (cdr (image-multi-frame-p image)))
                         ((fboundp 'image-animated-p)
                          (image-animated-p image))))
          (image-animate image nil 60))
        image))

    (defun niva/shr-put-image (spec alt &optional flags)
      (if (display-graphic-p)
          (let* ((size (cdr (assq 'size flags)))
                 (content-type (and (consp spec)
                                    (cadr spec)))
                 (start (point))
                 (image (niva/create-image-content spec size content-type flags)))
            (if image
                (niva/handle-image-params image alt start size)))
        (insert (or alt ""))))


    (defun niva/shr-remove-underline-from-images (dom &optional url)
      (let ((start (point)))
        (shr-tag-img dom url)
        (put-text-property start (point) 'face '(:underline nil))))

    (setq shr-external-rendering-functions '((img . niva/shr-remove-underline-from-images))
          shr-put-image-function #'niva/shr-put-image))

  (setq image-transform-fit-width 500)
#+end_src

** eww

#+begin_src emacs-lisp
  (setq-default browse-url-browser-function 'eww-browse-url
                shr-use-fonts nil
                shr-use-colors t
                eww-search-prefix "https://html.duckduckgo.com/html?q=")

  (dolist (face '(shr-h1
                  shr-text
                  shr-code
                  variable-pitch-text
                  gnus-header
                  info-title-1
                  info-title-2
                  info-title-3
                  info-title-4
                  help-for-help-header
                  ;; variable-pitch
                  ;; variable-pitch-text
                  read-multiple-choice-face
                  help-key-binding
                  ;; fixed-pitch
                  ;; fixed-pitch-serif
                  info-menu-header))
    (ignore-errors
      (set-face-attribute face nil
                          :height 'unspecified
                          :inherit 'default
                          :family 'unspecified
                          :weight 'unspecified)))
#+end_src

#+begin_src emacs-lisp
  (defun niva/eww-toggle-images ()
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (eww-reload))
#+end_src

** webkit
#+begin_src emacs-lisp
  (setq browse-url-browser-function (lambda (url session)
                                      (other-window 1)
                                      (xwidget-webkit-browse-url url)))
#+end_src
** elfeed

#+begin_src emacs-lisp
  (if niva/elfeed-enabled
      (progn
#+end_src

*** elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :hook (elfeed-search-mode . elfeed-update)
    :config
    (setq elfeed-search-filter "+unread"
          elfeed-show-entry-switch #'niva/elfeed-split))

  (defun niva/clear-elfeed ()
    (interactive)
    (setq elfeed-db-directory (expand-file-name "~/.elfeed"))
    (delete-directory elfeed-db-directory t)
    (message "Elfeed database cleared. Restart Elfeed to initialize a new database."))
#+end_src

*** elfeed-protocol
#+begin_src emacs-lisp
  (use-package elfeed-protocol
    :straight t
    :after elfeed
    :config
    (setq elfeed-use-curl t
          elfeed-sort-order 'descending
          elfeed-protocol-enabled-protocols '(fever)
          elfeed-protocol-fever-update-unread-only t
          elfeed-protocol-fever-maxsize 150
          elfeed-protocol-fever-fetch-category-as-tag t
          elfeed-protocol-feeds (list (list niva/elfeed-fever-url
                                            :api-url niva/elfeed-api-url
                                            :password (niva/lookup-password :host "fever")))))
#+end_src

#+begin_src emacs-lisp
  (elfeed-protocol-enable)

  (evil-define-key 'normal elfeed-show-mode-map "I" #'niva/elfeed-toggle-images)
  (define-key elfeed-search-mode-map (kbd "I") #'niva/elfeed-toggle-images)
  (evil-define-key 'normal elfeed-search-mode-map "r" 'elfeed-update)
#+end_src

*** Count unreads
#+begin_src emacs-lisp
  (setq-default niva-elfeed-unread-count 0)
  (defun niva/elfeed-update-unread-count ()
    (interactive)
    (setq niva-elfeed-unread-count
          (cl-loop for entry in elfeed-search-entries
                   count (memq 'unread (elfeed-entry-tags entry)))))

  (add-hook 'elfeed-db-update-hook 'niva/elfeed-update-unread-count)
  (add-hook 'elfeed-search-update-hook 'niva/elfeed-update-unread-count)
#+end_src

*** Window handling
#+begin_src emacs-lisp
  (defun elfeed-entry-buffer ()
    (get-buffer-create "*elfeed-entry*"))
#+end_src

#+begin_src emacs-lisp
  (defun niva/elfeed-split (buff)
    (interactive)
    (let ((w (split-window-below)))
      (select-window w))
    (switch-to-buffer buff)
    (olivetti-mode))
#+end_src

#+begin_src emacs-lisp
  (defun elfeed-kill-buffer ()
    (interactive)
    (let* ((buff (get-buffer "*elfeed-entry*"))
           (window (get-buffer-window buff)))
      (kill-buffer buff)
      (delete-window window)))
#+end_src

#+begin_src emacs-lisp
  (defun elfeed-search-quit-window ()
    (interactive)
    (elfeed-db-save)
    (elfeed-kill-buffer)
    (quit-window))))
#+end_src

*** Customization
#+begin_src emacs-lisp
  (defun elfeed-search-format-date (date)
    (let* ((current-date (format-time-string "%Y%m%d"))
           (current-year (format-time-string "%Y"))
           (yesterday    (format-time-string "%Y%m%d" (time-subtract (current-time) (days-to-time 1))))
           (date-str     (format-time-string "%Y%m%d" (seconds-to-time date)))
           (date-year    (format-time-string "%Y" (seconds-to-time date)))
           (format-string (cond
                           ((string= current-date date-str) "      Today %H:%M")
                           ((string= yesterday date-str) "  Yesterday %H:%M")
                           ((string= current-year date-year) " %a %d %b %H:%M")
                           (t "  %a %d %b %Y"))))

      (format-time-string format-string (seconds-to-time date))))
#+end_src

#+begin_src emacs-lisp
  (defun niva/elfeed-search-print-entry (entry)
    (let* ((feed (elfeed-entry-feed entry))
           (feed-title (when feed (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (delete "unread" (mapcar #'symbol-name (elfeed-entry-tags entry))))
           (star (if (member "star" tags) "*" " "))
           (tags-str (format "%%%ds" (- 30 (string-width feed-title))))
           (date (elfeed-search-format-date (elfeed-entry-date entry)))
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (title-width (- (window-width) 10 elfeed-search-trailing-width))
           (title-column (elfeed-format-column
                          title (elfeed-clamp
                                 (- elfeed-search-title-min-width 20)
                                 (- title-width 20)
                                 (- elfeed-search-title-max-width 20))
                          :left))
           (formatted-date (propertize date 'face 'elfeed-search-title-face))
           (formatted-star (propertize star 'face 'elfeed-search-tag-face))
           (formatted-title (propertize title-column 'face title-faces 'kbd-help title))
           (formatted-feed-title (and feed-title (propertize feed-title 'face 'elfeed-search-feed-face)))
           (formatted-tags (and tags (propertize (format tags-str (mapconcat 'identity tags " ")) 'face 'elfeed-search-tag-face))))

      (mapc #'insert (list formatted-date " " formatted-star " " formatted-title " " formatted-feed-title " " formatted-tags))))

  (setq elfeed-search-title-min-width 30
        elfeed-search-title-max-width 120
        elfeed-search-print-entry-functjon #'niva/elfeed-search-print-entry)
#+end_src

#+begin_src emacs-lisp
  (defun niva/elfeed-sort-by-tags-and-feed (a b)
    (let* ((a-title (format "%s" (elfeed-entry-feed a)))
           (b-title (format "%s" (elfeed-entry-feed b)))
           (a-tags (format "%s" (elfeed-entry-tags a)))
           (b-tags (format "%s" (elfeed-entry-tags b))))
      (if (and (string= a-tags b-tags) (string= a-title b-title))
          (< (elfeed-entry-date b) (elfeed-entry-date a))
        (if (string= a-tags b-tags)
            (string> a-title b-title)
          (string< a-tags b-tags)))))

  (setf elfeed-search-sort-function #'niva/elfeed-sort-by-tags-and-feed)
#+end_src

*** Graphics handling
#+begin_src emacs-lisp
  (defun niva/elfeed-toggle-images ()
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (elfeed-show-refresh))
#+end_src


#+begin_src emacs-lisp
  (defun niva/insert-indented-image (spec alt &optional flags)
    (insert "\n        ")
    (shr-put-image spec alt flags)
    (insert "\n\n"))
#+end_src

** irc
*** circe
#+begin_src emacs-lisp
  (use-package circe
    :straight t
    :config
    (setq lui-fill-column                     80
          lui-time-stamp-position             'right
          lui-time-stamp-only-when-changed-p  t
          lui-time-stamp-format               "[%H:%M]"
          lui-fill-type                       "                "
          circe-reduce-lurker-spam            t
          circe-server-buffer-name            "{network}"
          circe-server-max-reconnect-attempts 2
          circe-default-nick                  "niklas"
          circe-default-realname              "niklas"
          circe-format-server-topic           "{new-topic}"
          circe-format-say                    "{nick:-16s}{body}"
          circe-format-self-say               circe-format-say
          circe-default-part-message          nil
          circe-default-quit-message          nil
          circe-chat-buffer-name              " irc://{target}"
          circe-network-defaults              nil
          lui-logging-file-format             "{buffer}/%Y-%m-%d.txt")

    (enable-lui-logging-globally)
    (enable-lui-track)
    (niva/setup-irc-config)
    (enable-circe-color-nicks)

    (add-hook 'circe-channel-mode-hook 'read-only-mode)
    (circe-set-display-handler "353" 'circe-display-ignore)
    (circe-set-display-handler "366" 'circe-display-ignore)

    (setq lui-time-stamp-position 'right-margin
          lui-fill-type nil)

    (defun my-lui-setup ()
      (setq fringes-outside-margins t
            right-margin-width 7
            word-wrap t;
            wrap-prefix "              ")
      (setf (cdr (assoc 'continuation fringe-indicator-alist)) nil))
    (add-hook 'lui-mode-hook 'my-lui-setup))
#+end_src

*** IRC notifications
#+begin_src emacs-lisp
  (with-eval-after-load 'circe
    (defvar niva--irc-notification "")

    (defun niva/irc-log-face (target)
      (setq-local niva--irc-log-face
                  (if (string-prefix-p "#yos" target)
                      'font-lock-type-face
                    'font-lock-string-face)))

    (defvar niva--irc-busy nil)
    (defun niva/privmsg (nick userhost _command target text)
      (niva/log-to-buffer " irc://history" target nick text)
      (unless niva--irc-busy
        (setq niva--irc-busy t)
        (setq niva--irc-notification (substring (format "%s@%s: \"%s\"" nick target text) 0 20))
        (run-with-timer 3 nil (lambda ()
                                (setq niva--irc-notification "")
                                (force-mode-line-update t)
                                (setq niva--irc-busy nil)))))

    (advice-add 'circe-display-PRIVMSG :after #'niva/privmsg)

    (defun niva/remove-irc-notification-if-read (orig-func buffer-or-name &rest args)
      (let ((buf (get-buffer buffer-or-name)))
        (when (and buf (with-current-buffer buf (derived-mode-p 'circe-channel-mode)))
          (setq niva--irc-notification ""))
        (apply orig-func buffer-or-name args))))
#+end_src

*** IRC log window
#+begin_src emacs-lisp
  (defun niva/log-to-buffer (buffer nick target text)
    (setq my-buffer (get-buffer-create buffer))
    (with-current-buffer my-buffer
      (funcall 'niva/irc-log-mode)
      (setq buffer-read-only nil)
      (goto-char (point-max))
      (insert (format "%s %s %s %s\n"
                      (propertize (format-time-string "[%H:%M]") 'face 'font-lock-comment-face)
                      (propertize target 'face (niva/irc-log-face target))
                      (propertize (format "%s" nick) 'face 'circe-highlight-nick-face)
                      text))
      (goto-char (point-max))))
  (setq buffer-read-only t)
#+end_src

#+begin_src emacs-lisp
  (define-derived-mode niva/irc-log-mode prog-mode ()
    (setq window-point-insertion-type t)
    (solaire-mode 1)
    (read-only-mode t)
    )
#+end_src

*** List IRC buffers
#+begin_src emacs-lisp
  (defvar niva--switch-irc-buffers-times 0)
  (defun niva/switch-irc-buffers ()
    (interactive)
    (let ((original-buffer (current-buffer)))
      (let ((irc-buffers (seq-filter (lambda (buf)
                                       (string-prefix-p " irc://" (buffer-name buf)))
                                     (buffer-list))))
        (if irc-buffers
            (switch-to-buffer (completing-read "Switch to buffer: " (mapcar 'buffer-name irc-buffers)))
          (progn
            (if (= 0 niva--switch-irc-buffers-times)
                (progn
                  (setq niva--switch-irc-buffers-times 1)
                  (message "Starting Circe...")
                  (circe "znc")
                  (switch-to-buffer original-buffer)
                  (sit-for 3)
                  (niva/switch-irc-buffers))
              (message "Circe timed out.")))))))
#+end_src
* AI
** ChatGPT
*** gptel
#+begin_src emacs-lisp
  (use-package gptel
    :straight t
    :config
    (setq gptel-default-mode #'org-mode
          gptel-model "gpt-3.5-turbo"
          gptel-max-tokens 200
          gptel-prompt-prefix-alist '((markdown-mode . "# ")
                                      (org-mode . "* ")
                                      (text-mode . "> ")))
    (with-eval-after-load 'gptel
      (evil-define-key 'normal gptel-mode-map "q" 'delete-window))

    (add-to-list 'display-buffer-alist '("ChatGPT" display-buffer-same-window)))
#+end_src
