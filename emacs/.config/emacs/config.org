#+PROPERTY: header-args
#+OPTIONS:  toc:2
#+STARTUP:  overview

* Package management
** diminish
#+begin_src emacs-lisp
  (use-package diminish
    :straight t)
#+end_src
* Encryption
** pinentry
#+begin_src emacs-lisp
  (use-package pinentry
    :straight t
    :config
    (fset 'epg-wait-for-status 'ignore)
    (pinentry-start))
#+end_src

* Imports
#+begin_src emacs-lisp
  (defvar import-file
    (expand-file-name "private/config.el" user-emacs-directory))

  (when (file-readable-p import-file)
    (load import-file))
#+end_src

* Text edit settings
** Defaults
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4
                c-default-style "linux"
                create-lockfiles nil
                completion-cycle-threshold 3)
#+end_src

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Show only one active window when opening multiple files at the same time.
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook 'delete-other-windows)
#+end_src

** Indentation rules

#+begin_src emacs-lisp
  (setq-default evil-auto-indent t
                indent-line-function 'evil-indent-line
                evil-indent-convert-tabs nil
                indent-tabs-mode nil
                tab-always-indent t
                tab-width 2
                org-src-tab-acts-natively t)

  (defun indent-tabs-hook ()
    (setq tab-width 2
          indent-tabs-mode t
          evil-auto-indent t
          c-basic-offset 2))

  (dolist (hook '(c++-mode-hook
                  c-mode-hook
                  c++-ts-mode-hook
                  c-ts-mode-hook))
    (add-hook hook 'indent-tabs-hook))
#+end_src

** Clean up trailing whitespace
#+begin_src emacs-lisp
  (setq org-src-strip-leading-and-trailing-blank-lines t)

  (add-hook 'prog-mode-hook
            (lambda ()
              (setq show-trailing-whitespace t)
              (diminish 'eldoc-mode)
              (add-hook 'before-save-hook 'delete-trailing-whitespace)))
#+end_src

** recentf
#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq history-length 9999
        history-delete-duplicates t)
#+end_src

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Scrolling behavior
#+begin_src emacs-lisp
  (setq-default maximum-scroll-margin 0.5
                scroll-conservatively 5
                compilation-scroll-output t
                scroll-preserve-screen-position t)
  (pixel-scroll-precision-mode t)
#+end_src

** Hide buffers

#+begin_src emacs-lisp
  (defun niva/hide-buffer (bufname)
    "Hide buffers by prepending space to buffer name."
    (if (get-buffer bufname)
        (with-current-buffer bufname
          (rename-buffer (concat " " bufname)))))
#+end_src

#+begin_src emacs-lisp
  (defun remove-messages-buffer ()
    (niva/hide-buffer "*Messages*"))
#+end_src

#+begin_src emacs-lisp
  (defun niva/hide-lsp-buffers ()
    (setq-default message-log-max nil)
    (niva/hide-buffer "*clangd*")
    (niva/hide-buffer "*clangd::stderr*")
    (niva/hide-buffer "*pyright*")
    (niva/hide-buffer "*pyright::stderr*"))
#+end_src

Don't show *Buffer list* when opening multiple files at the same time.
#+begin_src emacs-lisp
  (setq inhibit-startup-buffer-menu t)
#+end_src

** Clipboard
Prevent emacs from contaminating system clipboard.
#+begin_src emacs-lisp
  (use-package simpleclip
    :straight t
    :config
    (setq interprogram-cut-function 'simpleclip-set-contents
          interprogram-paste-function 'simpleclip-get-contents)
    (simpleclip-mode 1))
#+end_src

** save-place
#+begin_src emacs-lisp
  (save-place-mode +1)
#+end_src
* Customization
** GUI settings
#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)

  (global-visual-line-mode t)
  (diminish 'visual-line-mode)
  (global-hl-line-mode -1)
  (blink-cursor-mode 1)

  (setq-default left-fringe-width 12
                right-fringe-width 12)
#+end_src

*** Window management
#+begin_src emacs-lisp
  (setq window-divider-default-places t
        window-divider-default-bottom-width 1
        window-divider-default-right-width 1)

  (window-divider-mode 1)

  (setq ns-use-thin-smoothing t
        ns-use-proxy-icon nil
        ns-use-mwheel-momentum t
        ns-use-mwheel-acceleration t
        frame-resize-pixelwise t)
#+end_src

Always move cursor to help window.
#+begin_src emacs-lisp
  (setq help-window-select t)
#+end_src

**** winner-mode
#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

*** Tabs
#+begin_src emacs-lisp
  (defun niva/tab-bar-config ()
    (setq tab-bar-show nil
          tab-bar-auto-width-max '(120 . 20)
          tab-bar-close-button-show nil
          tab-bar-close-tab-select 'recent
          tab-bar-new-button-show nil
          tab-bar-new-tab-to 'right
          tab-bar-position nil
          tab-bar-tab-name-function 'tab-bar-tab-name-current)

    (set-face-attribute 'tab-bar nil
                        :box nil
                        :background (face-attribute 'default :background))
    (set-face-attribute 'tab-bar-tab nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-keyword-face :foreground))
    (set-face-attribute 'tab-bar-tab-inactive nil
                        :box nil
                        :background (face-attribute 'default :background)
                        :foreground (face-attribute 'font-lock-comment-face :foreground)))
  (niva/tab-bar-config)

  (global-hl-line-mode -1)
  (blink-cursor-mode 1)
#+end_src

*** tab-bar-echo-area
#+begin_src emacs-lisp
  (use-package tab-bar-echo-area
    :straight t
    :config
    (tab-bar-echo-area-mode 1))
#+end_src

** Theme
*** Theme packages
#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t
    :custom
    (doom-themes-org-config)
    :config
    (setq doom-themes-enable-bold                t
          doom-themes-enable-italic              t
          doom-miramare-brighter-comments        t
          doom-tomorrow-night-brighter-comments  t
          doom-tokyo-night-brighter-comments     t
          doom-city-lights-brighter-comments     t
          doom-monokai-machine-brighter-comments t))

  (use-package almost-mono-themes       :straight t)
  (use-package ample-theme              :straight t)
  (use-package avk-emacs-themes         :straight t)
  (use-package basic-theme              :straight t)
  (use-package brutalist-theme          :straight t)
  (use-package cherry-blossom-theme     :straight t)
  (use-package chyla-theme              :straight t)
  (use-package cloud-theme              :straight t)
  (use-package color-theme-modern       :straight t)
  (use-package colorless-themes         :straight t)
  (use-package cyberpunk-theme          :straight t)
  (use-package dakrone-light-theme      :straight t)
  (use-package dakrone-theme            :straight t)
  (use-package ef-themes                :straight t)
  (use-package eink-theme               :straight t)
  (use-package farmhouse-themes         :straight t)
  (use-package gandalf-theme            :straight t)
  (use-package github-theme             :straight t)
  (use-package goose-theme              :straight t)
  (use-package grandshell-theme         :straight t)
  (use-package greymatters-theme        :straight t)
  (use-package habamax-theme            :straight t)
  (use-package hemera-theme             :straight t)
  (use-package hemisu-theme             :straight t)
  (use-package humanoid-themes          :straight t)
  (use-package intellij-theme           :straight t)
  (use-package modus-themes             :straight t)
  (use-package naga-theme               :straight t)
  (use-package naysayer-theme           :straight t)
  (use-package night-owl-theme          :straight t)
  (use-package nofrils-acme-theme       :straight t)
  (use-package northcode-theme          :straight t)
  (use-package one-themes               :straight t)
  (use-package paper-theme              :straight t)
  (use-package pastelmac-theme          :straight t)
  (use-package plan9-theme              :straight t)
  (use-package professional-theme       :straight t)
  (use-package rebecca-theme            :straight t)
  (use-package reverse-theme            :straight t)
  (use-package seti-theme               :straight t)
  (use-package sexy-monochrome-theme    :straight t)
  (use-package silkworm-theme           :straight t)
  (use-package soft-morning-theme       :straight t)
  (use-package soft-stone-theme         :straight t)
  (use-package soothe-theme             :straight t)
  (use-package standard-themes          :straight t)
  (use-package sunny-day-theme          :straight t)
  (use-package timu-caribbean-theme     :straight t)
  (use-package timu-rouge-theme         :straight t)
  (use-package timu-spacegrey-theme     :straight t)
  (use-package vs-light-theme           :straight t)
#+end_src

*** Modus
#+begin_src emacs-lisp
  (setq modus-themes-bold-constructs nil
        modus-themes-hl-line (quote (accented))
        modus-themes-org-blocks nil
        modus-themes-region '(bg-only)
        modus-themes-tabs-accented t)

  (setq modus-themes-common-palette-overrides
        '((fringe unspecified)
          (border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)))

  (setq modus-themes-completions '((matches . (background minimal))
                                   (selection . (background minimal))
                                   (popup . (background minimal))))


  (add-hook 'modus-themes-after-load-theme-hook
            (lambda ()
              (set-face-attribute 'solaire-default-face nil
                                  :inherit 'default
                                  :background (car (cdr (assoc 'bg-dim modus-operandi-palette)))
                                  :foreground (car (cdr (assoc 'fg-dim modus-operandi-palette))))
              (set-face-attribute 'solaire-line-number-face nil
                                  :inherit 'solaire-default-face
                                  :foreground (car (cdr (assoc 'fg-unfocused modus-operandi-palette))))
              (set-face-attribute 'solaire-hl-line-face nil
                                  :background (car (cdr (assoc 'bg-active modus-operandi-palette))))
              (set-face-attribute 'solaire-org-hide-face nil
                                  :background (car (cdr (assoc 'bg-dim modus-operandi-palette)))
                                  :foreground (car (cdr (assoc 'bg-dim modus-operandi-palette))))
              ))
#+end_src

*** Kaolin
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :straight t
    :config
    (setq kaolin-themes-bold nil
          kaolin-themes-comments-style 'contrast
          kaolin-themes-italic t
          kaolin-themes-underline t
          kaolin-themes-modeline-border nil))
#+end_src
*** Solaire
#+begin_src emacs-lisp
  (use-package solaire-mode
    :straight t
    :config
    (solaire-global-mode t)
    (solaire-mode-reset))
  (setq solaire-global-mode-hook nil)

  (add-hook 'compilation-mode-hook (lambda () (solaire-mode t) (solaire-mode-reset)))
  (add-hook 'eshell-mode-hook (lambda () (solaire-mode t) (solaire-mode-reset)))
  (add-hook 'gptel-mode-hook (lambda () (solaire-mode t) (solaire-mode-reset)))
  (add-hook 'read-only-mode-hook (lambda () (solaire-mode t) (solaire-mode-reset)))
#+end_src
*** Load theme
#+begin_src emacs-lisp
  (setq niva/theme 'doom-tomorrow-day)
  (load-theme niva/theme)
#+end_src
*** Faces
#+begin_src emacs-lisp
  (defun niva/update-theme-faces ()
    (interactive)
    (when (eq niva/theme 'sitaramv-solaris)
      (set-face-attribute 'org-block                    nil :inherit 'default :background "black")
      (set-face-attribute 'org-block-begin-line         nil :background "black")
      (set-face-attribute 'font-lock-comment-face       nil :inherit 'font-lock-builtin-face :slant 'unspecified :foreground 'unspecified)
      (set-face-attribute 'font-lock-string-face        nil :foreground "cyan")
      (set-face-attribute 'font-lock-function-name-face nil :foreground "yellow")
      (set-face-attribute 'font-lock-preprocessor-face  nil :foreground "green"))
    (when (eq niva/theme 'doom-tomorrow-day)
      (setq treesit-font-lock-level 3)
      (set-face-attribute 'font-lock-number-face       nil :foreground 'unspecified :inherit 'font-lock-builtin-face)
      (set-face-attribute 'font-lock-variable-use-face nil :foreground 'unspecified :inherit 'default)
      (set-face-attribute 'font-lock-constant-face     nil :foreground 'unspecified :inherit 'font-lock-number-face)
      (set-face-attribute 'warning                     nil :foreground 'unspecified :inherit 'font-lock-builtin-face)
      (set-face-attribute 'font-lock-type-face         nil :foreground 'unspecified :inherit 'font-lock-builtin-face)))
  (niva/update-theme-faces)
#+end_src
** Compilaton mode
#+begin_src emacs-lisp
  (use-package xterm-color :straight t)
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun niva/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'niva/advice-compilation-filter)
#+end_src

** Mode line
*** Mode line format
#+begin_src disabled
  (defun is-vc-file ()
    (let ((backend (vc-backend (buffer-file-name))))
      (if backend
          t
        nil)))

  (defun niva/git-state-symbol ()
    (pcase (vc-git-state (buffer-file-name))
      ('ignored ".")
      ('unregistered ".")
      ('removed "-")
      ('edited "*")
      ('added "+")
      ('conflict "‼")
      (_ "")))

  (defvar-local niva--git-mode-line "")
  (make-variable-buffer-local 'niva--git-mode-line)
  (defun niva/update-git-branch-name ()
    (interactive)
    (if vc-mode
        (setq niva--git-mode-line (format " |  %s" (substring vc-mode 5)))
      (setq niva--git-mode-line "")))

  ;; (setq my-git-branch-name-timer (run-with-timer 0 5 'niva/update-git-branch-name))

  (defun niva/git-repository-name ()
    (let ((repository-name (vc-git-repository-url buffer-file-name)))
      (s-replace ".git" "" (s-replace "git@github.com:" "" repository-name))))

  (defun niva/bottom-right-window-p ()
    (let* ((frame (selected-frame))
           (frame-width (frame-width frame))
           (frame-height (frame-height frame)))
      (eq (selected-window)
          (window-at (- frame-width 3) (- frame-height 3)))))

  (defun niva/format-right-mode-line ()
    (propertize
     (format "%s %s %s %s "
             niva--irc-notification
             (if (= niva-elfeed-unread-count 0) ""
               (format "  %-2d" niva-elfeed-unread-count))
             (format-time-string "%R") " ")
     'face 'font-lock-string-face))

  (setq-default mode-line-format
                `((:eval (if (and buffer-file-name (buffer-modified-p)) "*%b" " %b"))
                  (:eval (if vc-mode niva--git-mode-line))
                  " | %l:%c"
                  (:eval (propertize " " 'display (list 'space :align-to (- (window-total-width) (length (niva/format-right-mode-line))))))
                  (:eval (if (niva/bottom-right-window-p) (niva/format-right-mode-line)))))
#+end_src

#+begin_src emacs-lisp
  (setq evil-mode-line-format nil)

  (setq minibuffer-prompt-properties '(read-only t intangible t cursor-intangible t face minibuffer-prompt))

  (setq-default niva/custom-mode-line
                '("%e" mode-line-front-space
                  (:propertize
                   ("" mode-line-mule-info mode-line-client mode-line-modified
                    mode-line-remote mode-line-window-dedicated)
                   display (min-width (6.0)))
                  mode-line-frame-identification
                  "%12b" ;; Remove font weight from buffer name
                  " "
                  mode-line-position (project-mode-line project-mode-line-format)
                  (vc-mode vc-mode) "  " mode-line-modes mode-line-misc-info
                  mode-line-end-spaces))

  (defun niva/change-mode-line ()
    (interactive)
    (setq mode-line-format niva/custom-mode-line))
#+end_src

#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+end_src

*** Display time
#+begin_src emacs-lisp
  (setq display-time-format " %H:%M ")
  (setq display-time-interval 60)
  (setq display-time-default-load-average nil)

  (setq display-time-string-forms
        '((propertize
           (format-time-string display-time-format now)
           'help-echo (format-time-string "%a %b %e, %Y" now))
          " "))
  (display-time-mode 1)
#+end_src
** Font
*** Reset
#+begin_src emacs-lisp
(set-face-attribute 'fixed-pitch nil :family 'unspecified)
#+end_src
*** Remove font weight
#+begin_src emacs-lisp
  (defun niva/remove-font-weight ()
    "Set weights to regular on common faces"
    (interactive)
    (custom-set-faces
     '(default                           ((t (:background unspecified))))
     '(compilation-error                 ((t (:weight     unspecified))))
     '(bold                              ((t (:weight     unspecified))))
     '(outline-1                         ((t (:weight     unspecified))))
     '(outline-2                         ((t (:weight     unspecified))))
     '(outline-3                         ((t (:weight     unspecified))))
     '(font-lock-comment-face            ((t (:weight     unspecified))))
     '(error nil                         ((t (:weight     unspecified)))))

    (set-face-attribute 'bold               nil :weight 'unspecified)
    (set-face-attribute 'buffer-menu-buffer nil :weight 'unspecified)
    (set-face-attribute 'compilation-error  nil :weight 'unspecified)
    (set-face-attribute 'default            nil :weight 'unspecified)
    (set-face-attribute 'help-key-binding   nil :weight 'unspecified :family 'unspecified :box 'unspecified :inherit 'default)
    (set-face-attribute 'outline-1          nil :weight 'unspecified)
    (set-face-attribute 'outline-2          nil :weight 'unspecified)
    (set-face-attribute 'outline-3          nil :weight 'unspecified)
    (set-face-attribute 'tooltip            nil :inherit 'default))
  ;; (add-hook 'prog-mode-hook 'niva/remove-font-weight)
#+end_src

*** Enable chinese characters

#+begin_src disabled
  (use-package cnfonts
    :straight t
    :config
    (setq cnfonts-use-face-font-rescale t
          cnfonts-default-fontsize 16)
    (cnfonts-mode 1))
#+end_src

** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :straight t
    :config
    (global-ligature-mode t)
    (ligature-set-ligatures 'prog-mode '("==" "!=" "<-" "<--" "->" "-->")))
#+end_src

* Controls
** Evil mode
*** evil-mode
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-want-C-u-scroll t
          evil-undo-system 'undo-redo
          evil-scroll-count 8)
    (evil-mode))

  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

*** general
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config (general-evil-setup t))
#+end_src

*** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :straight t
    :diminish evil-collection-unimpaired-mode
    :delight
    :config
    (setq evil-collection-setup-minibuffer t)
    (evil-collection-init))

  (evil-set-initial-state 'dired-mode 'normal)
#+end_src

*** savehist
#+begin_src emacs-lisp
  (use-package savehist
    :straight t
    :init
    (savehist-mode))
#+end_src

** Window management
*** transpose-frame
#+begin_src emacs-lisp
  (use-package transpose-frame :straight t)
#+end_src
** Keybindings

#+begin_src emacs-lisp
  (use-package bind-key
    :straight t)
#+end_src

#+begin_src emacs-lisp
  (setq mac-escape-modifier nil
        mac-option-modifier nil
        mac-right-command-modifier 'meta
        mac-pass-command-to-system t)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-j")  nil)
  (global-set-key (kbd "C-k")  nil)
  (global-set-key (kbd "<f1>") nil)
  (global-set-key (kbd "<f2>") nil)
  (global-set-key (kbd "<f3>") nil)
  (global-set-key (kbd "<f4>") nil)
#+end_src

#+begin_src emacs-lisp
  (global-set-key                   (kbd "€")       (kbd "$"))
  (global-set-key                   (kbd "<f13>")   'evil-invert-char)
  (define-key evil-insert-state-map (kbd "C-c C-e") 'comment-line)
  (define-key evil-visual-state-map (kbd "C-c C-e") 'comment-line)

  (define-key evil-normal-state-map (kbd "C-a C-x") 'kill-this-buffer)
  (define-key help-mode-map         (kbd "C-a C-x") 'evil-delete-buffer)
  (define-key evil-normal-state-map (kbd "C-w C-x") 'delete-window)
  (define-key evil-normal-state-map (kbd "s-e")     'eshell)
  (define-key evil-normal-state-map (kbd "M-e")     'eshell)
  (define-key evil-normal-state-map (kbd "B V")     'org-babel-mark-block)
  (define-key evil-normal-state-map (kbd "SPC e b") 'org-babel-execute-src-block-maybe)

  (define-key evil-normal-state-map (kbd "C-b n")   'evil-next-buffer)
  (define-key evil-normal-state-map (kbd "C-b p")   'evil-previous-buffer)
  (define-key evil-normal-state-map (kbd "C-b C-b") 'evil-switch-to-windows-last-buffer)


  (defun niva/elfeed--move-paragraph-up ()
    (interactive)
    (if (derived-mode-p 'elfeed-show-mode)
        (condition-case nil
            (progn
              (evil-backward-paragraph 2)
              (forward-line 1))
          (beginning-of-buffer
           (message "Previous item")
           (elfeed-show-prev)))))

  (defun niva/elfeed--move-paragraph-down ()
    (interactive)
    (if (derived-mode-p 'elfeed-show-mode)
        (condition-case nil
            (progn
              (evil-forward-paragraph)
              (forward-line 1))
          (end-of-buffer
           (message "Next item")
           (elfeed-show-next)))))

  (define-key evil-normal-state-map (kbd "C-p") 'niva/elfeed--move-paragraph-up)
  (define-key evil-normal-state-map (kbd "C-n") 'niva/elfeed--move-paragraph-down)
  (define-key evil-normal-state-map (kbd "ä") 'niva/elfeed--move-paragraph-up)
  (define-key evil-normal-state-map (kbd "ö") 'niva/elfeed--move-paragraph-down)


  (with-eval-after-load 'evil-maps  (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w n")     'tab-next)
  (define-key evil-normal-state-map (kbd "C-w c")     'tab-new)
  (define-key evil-normal-state-map (kbd "C-<tab>")   'tab-next)
  (define-key evil-normal-state-map (kbd "C-S-<tab>") 'tab-previous)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "s-q")        'save-buffers-kill-terminal)
  (global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
  (global-set-key (kbd "s-t")        'tab-new)
  (global-set-key (kbd "s-w")        'tab-close)
  (global-set-key (kbd "s-z")        nil)
#+end_src

*** Window management
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w -")   'evil-window-split)
  (define-key evil-normal-state-map (kbd "C-w |")   'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w _")   'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w S--") 'evil-window-vsplit)
  (define-key evil-normal-state-map (kbd "C-w SPC") 'transpose-frame)

  (define-key evil-normal-state-map (kbd "C-w H") 'buf-move-left)
  (define-key evil-normal-state-map (kbd "C-w J") 'buf-move-down)
  (define-key evil-normal-state-map (kbd "C-w K") 'buf-move-up)
  (define-key evil-normal-state-map (kbd "C-w L") 'buf-move-right)

  (define-key evil-normal-state-map (kbd "M-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "M->") 'ns-prev-frame)
  (define-key evil-normal-state-map (kbd "s-<") 'ns-next-frame)
  (define-key evil-normal-state-map (kbd "s->") 'ns-prev-frame)
#+end_src

**** Move to next frame if windmove fails
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w h") (lambda() (interactive)
                                                    (condition-case nil
                                                        (windmove-left)
                                                      (error (ns-next-frame)))))

  (define-key evil-normal-state-map (kbd "C-w l") (lambda() (interactive)
                                                    (condition-case nil
                                                        (windmove-right)
                                                      (error (ns-prev-frame)))))
#+end_src

**** Project
#+begin_src emacs-lisp
  (setq project-switch-commands 'project-find-file)
#+end_src

** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :diminish
    :config
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode))

  (nvmap :keymaps 'override :prefix "SPC"
    "SPC"   '(execute-extended-command       :which-key "M-x")
    "B"     '(consult-buffer-other-window    :which-key "consult-buffer-other-window")
    "b"     '(consult-buffer                 :which-key "consult-buffer")
    "c C"   '(recompile                      :which-key "recompile")
    "c a"   '(eglot-code-actions             :which-key "eglot-code-actions")
    "c c"   '(compile                        :which-key "compile")
    "c e"   '(consult-compile-error          :which-key "consult-compile-error")
    "c T"   '(niva/run-test-command          :which-key "niva/run-test-command")
    "p d"   '(project-dired                  :which-key "project-dired")
    "d d"   '(dired                          :which-key "dired")
    "d l"   '(devdocs-lookup                 :which-key "devdocs-lookup")
    "d u"   '(magit-diff-unstaged            :which-key "magit-diff-unstaged")
    "e r"   '(eval-region                    :which-key "eval-region")
    "e i"   '(eglot-inlay-hints-mode         :which-key "eglot-inlay-hints-mode")
    "f f"   '(find-file                      :which-key "find-file")
    "f m"   '(consult-flymake                :which-key "consult-flymake")
    "h p"   '(ff-get-other-file              :which-key "ff-get-other-file")
    "h h"   '(consult-history                :which-key "consult-history")
    "i m"   '(consult-imenu-multi            :which-key "consult-imenu")
    "p p"   '(project-switch-project         :which-key "project-switch-project")
    "p f"   '(project-find-file              :which-key "project-find-file")
    "r o"   '(read-only-mode                 :which-key "read-only-mode")
    "s h"   '(git-gutter:stage-hunk          :which-key "git-gutter:stage-hunk")
    "t t"   '(toggle-truncate-lines          :which-key "Toggle truncate lines")
    "w U"   '(winner-redo                    :which-key "winner-redo")
    "w u"   '(winner-undo                    :which-key "winner-undo")

    "elf"   '(elfeed                         :which-key "elfeed")
    "eww"   '(eww                            :which-key "eww")
    "gpt"   '(gptel                          :which-key "gptel")
    "rec"   '(consult-recent-file            :which-key "consult-recent-file")
    "rip"   '(consult-ripgrep                :which-key "consult-ripgrep")
    "cir"   '(circe                          :which-key "circe")
    "ir"    '(niva/switch-irc-buffers        :which-key "niva/switch-irc-buffers")
    "scr"   '(scratch-buffer                 :which-key "scratch-buffer")

    "time"  '((lambda () (interactive) (message (format-time-string "%a %d %b %H:%M v%W")))           :which-key "Display current time")
    "conf"  '((lambda () (interactive) (find-file "~/.config/emacs/config.org"))                      :which-key "Open config.org")
    "vconf" '((lambda () (interactive) (split-window-right) (find-file "~/.config/emacs/config.org")) :which-key "Open config.org")
    "sconf" '((lambda () (interactive) (split-window-below) (find-file "~/.config/emacs/config.org")) :which-key "Open config.org"))
#+end_src

** Undo
*** undo-fu
#+begin_src emacs-lisp
  (use-package undo-fu
    :straight t
    :bind
    (("s-z" . undo-fu-only-undo)
     ("s-Z" . undo-fu-only-redo)
     :map evil-normal-state-map
     ("u"   . undo-fu-only-undo)
     ("U"   . undo-fu-only-redo))
    :custom
    (undo-fu-allow-undo-in-region t))
#+end_src

*** undo-fu-session
#+begin_src emacs-lisp
  (use-package undo-fu-session
    :straight t
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
    (global-undo-fu-session-mode))
#+end_src

*** vundo
#+begin_src emacs-lisp
  (use-package vundo
    :straight t
    :config
    (setq vundo-glyph-alist vundo-unicode-symbols
          vundo-window-max-height 5
          vundo-compact-display t))
#+end_src
** m-x

#+begin_src emacs-lisp
  (use-package smex
    :straight t)
  (smex-initialize)
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :config
    (setq vertico-count 10
          vertico-resize t)
    :custom (vertico-cycle t))

  (use-package vertico-multiform
    :straight nil
    :load-path "straight/repos/vertico/extensions"
    :after vertico
    :config
    (setq vertico-sort-function #'vertico-sort-history-alpha
          vertico-multiform-commands
          '((consult-theme (vertico-sort-function . vertico-sort-alpha))
            (consult-grep (vertico-count . 20))
            (consult-ripgrep (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center) (vertico-count . 20))))

    (vertico-mode)
    (vertico-multiform-mode))

  (use-package vertico-mouse
    :straight nil
    :load-path "straight/repos/vertico/extensions"
    :after vertico
    :config
    (vertico-mouse-mode +1))
#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    :straight t
    ;;:hook (completion-list-mode . consult-preview-at-point-mode)
    :config
    (consult-customize
     consult-theme
     :preview-key '("M-." "C-SPC"
                    :debounce 0.2 any))
    (setq consult-ripgrep-args "rg \
              --null \
              --line-buffered \
              --color=never \
              --max-columns=1000 \
              --path-separator / \
              --smart-case \
              --no-heading \
              --with-filename \
              --line-number \
              --hidden \
              --follow \
              --glob \"!.git/*\" ."))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-modules 'org-tempo t)
  (use-package yasnippet-snippets :straight t)

  (use-package yasnippet
    :straight t
    :diminish yas-minor-mode
    :config (yas-global-mode 1))
#+end_src

** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :straight (corfu :repo "minad/corfu" :branch "main" :files (:defaults "extensions/*.el"))
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-quit-no-match 'separator)
    (corfu-preselect 'valid)

    (corfu-echo-documentation t)
    (corfu-auto-delay 0.2)
    (corfu-auto-prefix 1)

    ;;:hook ((prog-mode . corfu-mode) (org-mode . corfu-mode))
    ;; :init

    :config
    (corfu-popupinfo-mode t)
    (global-corfu-mode t)
    (setq corfu-popupinfo-delay '(0.3 . 0.2)))

  (add-hook 'eshell-mode-hook (lambda () (setq-local corfu-auto nil) (corfu-mode)))
  (add-hook 'org-mode-hook (lambda () (corfu-mode)))

  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))

  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  (use-package cape
    :straight t
    :config
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-keyword))

  (use-package kind-icon
    :straight t
    :after corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
    (kind-icon-blend-frac 0.08)
    (kind-icon-default-style
     '(:padding -1 :stroke 0 :margin 0 :radius 0 :height 1.0 :scale 1.0))
    (kind-icon-formatted 'variable)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** buffer-move
#+begin_src emacs-lisp
  (use-package buffer-move
    :straight t)
#+end_src

** Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :straight t
    :config
    (setq hydra-is-helpful nil)
    (defhydra hydra-win-resize (evil-normal-state-map "C-w")
      "Resize window"
      ("C-j" (lambda () (interactive) (evil-window-decrease-height 4)))
      ("C-k" (lambda () (interactive) (evil-window-increase-height 4)))
      ("C-h" (lambda () (interactive) (evil-window-decrease-width 8)))
      ("C-l" (lambda () (interactive) (evil-window-increase-width 8)))))

#+end_src

** imenu
#+begin_src emacs-lisp
  (use-package imenu
    :straight (:type built-in)
    :config
    (setq org-imenu-depth 8))
#+end_src
* File management
** Dired
#+begin_src emacs-lisp
  (use-package dirtree :straight t)
  (use-package dired-subtree :straight t
    :after dired
    :hook ((dired-mode . dired-hide-details-mode))
    :config
    (setq dired-subtree-use-backgrounds nil
          dired-subtree-line-prefix "  │"
          dired-kill-when-opening-new-dired-buffer t)

    (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map))
  ;; (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))

  (use-package dired-collapse
    :straight t
    :after dired
    :init
    (evil-define-key 'normal dired-mode-map (kbd "H") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "L") 'dired-find-file)
    (add-hook 'dired-mode-hook 'dired-collapse-mode))

  (use-package async :straight t
    :config
    (autoload 'dired-async-mode "dired-async.el" nil t)
    (dired-async-mode 1))
#+end_src


** Emacs system-files
*** Backup files
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "/tmp/backups/")))
  (make-directory "/tmp/auto-saves/" t)
#+end_src

*** Auto-save files
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix "/tmp/auto-saves/sessions/"
        auto-save-file-name-transforms `((".*" ,"/tmp/auto-saves/" t)))

  (add-hook 'kill-emacs-hook
            (lambda ()
              (dolist (file (directory-files temporary-file-directory t "\\`auto-save-file-name-p\\'"))
                (delete-file file))))
#+end_src

*** Lock files
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** Other
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  (setq vc-follow-symlinks t)
#+end_src

* Performance
** Native compilation
#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src
** GCMH
#+begin_src emacs-lisp
  (use-package gcmh
    :straight t
    :diminish
    :delight
    :hook
    (focus-out-hook . gcmh-idle-garbage-collect)
    :config
    (setq gcmh-idle-delay 10
          garbage-collection-messages t
          gcmh-high-cons-threshold 104857600
          gcmh-mode +1))
#+end_src

** Profiling
#+begin_src emacs-lisp
  (use-package esup
    :straight t)
#+end_src

** Byte-compile config on save
#+begin_src disabled
  (defun niva/compile-config ()
    "Byte-compile config on save"
    (interactive)
    (when (and (buffer-file-name)
               (string= (file-name-nondirectory (buffer-file-name)) "config.org"))
      (org-babel-tangle-file
       (expand-file-name "config.org" user-emacs-directory)
       (expand-file-name "config.el" user-emacs-directory) "emacs-lisp")

      (byte-compile-file (expand-file-name "config.el" user-emacs-directory))))

  (add-hook 'after-save-hook 'niva/compile-config)
#+end_src
* Development
** Elisp
*** Formatter
#+begin_src emacs-lisp
  (defun niva/format-all-elisp-code-blocks ()
    "Format all elisp blocks in current buffer"
    (interactive)
    (setq-local indent-tabs-mode nil)
    (save-excursion
      (let ((message-log-max nil)
            (inhibit-message t)
            (inhibit-redisplay t))

        (org-element-map (org-element-parse-buffer) 'src-block
          (lambda (src-block)
            (when (string= "emacs-lisp" (org-element-property :language src-block))
              (let* ((begin (org-element-property :begin src-block))
                     (end (org-element-property :end src-block)))
                (indent-region begin end nil)
                (untabify begin end)
                (replace-regexp-in-region "\n\n*#\\+end_src" "\n#+end_src" begin end)
                (replace-regexp-in-region "#\\+begin_src emacs-lisp\n\n*" "#+begin_src emacs-lisp\n" begin end)
                (replace-regexp-in-region "\n *#\\+end_src"   "\n#+end_src" begin end)
                (replace-regexp-in-region "\n *#\\+begin_src" "\n#+begin_src" begin end)))))))
    (font-lock-fontify-block))
  ;; (add-hook 'before-save-hook 'niva/format-all-elisp-code-blocks)
#+end_src

*** Polymode
#+begin_src emacs-lisp
  (use-package polymode
    :straight t)

  (use-package poly-org
    :straight t
    :config
    (add-to-list 'org-mode-hook #'poly-org-mode))
#+end_src

** C++
#+begin_src emacs-lisp
  (setq cc-other-file-alist
        '(("\\.h\\'" (".cpp" ".c"))
          ("\\.hpp\\'" (".cpp" ".tpp"))
          ("\\.c\\'" (".h"))
          ("\\.cpp\\'" (".h" ".hpp" ".tpp"))
          ("\\.tpp\\'" (".hpp" ".cpp"))))
#+end_src

** Eldoc
#+begin_src emacs-lisp
  (use-package eldoc
    :straight (:type built-in)
    :diminish
    :config
    (setq eldoc-idle-delay 0.1
    eldoc-echo-area-use-multiline-p t
    eldoc-echo-area-prefer-doc-buffer t)
    (diminish 'eldoc-mode))
  (diminish 'abbrev-mode)
#+end_src

** Language server
*** Eglot
**** -
#+begin_src emacs-lisp
  (use-package eglot
    :straight (:type built-in)
    :config
    (setq eglot-autoshutdown t)
    (add-to-list 'eglot-server-programs '((c-mode c++-mode c++-ts-mode) .
                                          ("clangd"
                                           "--query-driver=/Applications/ARM/**/*"
                                           "--clang-tidy"
                                           "--completion-style=detailed"
                                           "--pch-storage=memory"
                                           "--header-insertion=never"
                                           "-background-index-priority=background"
                                           "-j=8"
                                           "--log=error"
                                           "--function-arg-placeholders")))

    (add-to-list 'eglot-server-programs '((python-mode python-ts-mode) .
                                          ("pyright-langserver"
                                           "--stdio"))))

  (dolist (hook '(c-mode-hook c++-mode-hook c-ts-mode-hook c++-ts-mode-hook python-mode-hook python-ts-mode-hook))
    (add-hook hook 'eglot-ensure))
  (setq eglot-events-buffer-size 0)

  (advice-add 'eglot--mode-line-format :override (lambda () ""))

  (set-face-attribute 'eglot-inlay-hint-face nil
                      :foreground (face-attribute 'font-lock-regexp-grouping-construct :foreground)
                      :italic nil
                      :font (face-attribute 'default :font)
                      :height 0.75
                      :underline 'unspecified
                      :weight 'unspecified)


  (set-face-attribute 'eglot-highlight-symbol-face nil :underline t :weight 'regular)

  (with-eval-after-load 'eglot
    (add-hook 'eglot-managed-mode-hook
              (lambda ()
                (eglot-inlay-hints-mode -1)
                (setq eldoc-documentation-functions
                      (cons #'flymake-eldoc-function
                            (remove #'flymake-eldoc-function eldoc-documentation-functions)))
                (setq eldoc-documentation-strategy #'eldoc-documentation-compose)))
    (set-face-attribute 'eglot-mode-line nil :inherit 'unspecified)

    (defun eglot--format-markup (markup)
      "Format MARKUP according to LSP's spec."
      (pcase-let ((`(,string ,mode)
                   (if (stringp markup) (list markup 'gfm-view-mode)
                     (list (plist-get markup :value)
                           (pcase (plist-get markup :kind)
                             ("markdown" 'gfm-view-mode)
                             ("plaintext" 'text-mode)
                             (_ major-mode))))))
        (with-temp-buffer
          (setq-local markdown-fontify-code-blocks-natively t)
          (setq string (replace-regexp-in-string "\n---" "  " string))
          (insert string)
          (let ((inhibit-message t)
                (message-log-max nil)
                match)
            (ignore-errors (delay-mode-hooks (funcall mode)))
            (font-lock-ensure)
            (goto-char (point-min))
            (let ((inhibit-read-only t))
              (when (fboundp 'text-property-search-forward)
                (while (setq match (text-property-search-forward 'invisible))
                  (delete-region (prop-match-beginning match)
                                 (prop-match-end match)))))
            (string-trim (buffer-string)))))))
#+end_src

**** Format on save
#+begin_src emacs-lisp
  (defun eglot-save-hooks ()
    (add-hook 'before-save-hook #'eglot-format-buffer))

  (add-hook 'c-mode-hook         #'eglot-save-hooks)
  (add-hook 'c-ts-mode-hook      #'eglot-save-hooks)
  (add-hook 'c++-mode-hook       #'eglot-save-hooks)
  (add-hook 'c++-ts-mode-hook    #'eglot-save-hooks)
  (add-hook 'python-ts-mode-hook #'eglot-save-hooks)

  (defun niva/delete-empty-lines-at-top ()
    "Delete topmost lines if they contain no characters"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (looking-at-p "^$")
        (message "Removing empty first line")
        (delete-region (point) (progn (forward-line 1) (point))))))

  (add-hook 'before-save-hook #'niva/delete-empty-lines-at-top)
#+end_src

** Flymake
#+begin_src emacs-lisp
  (use-package flymake
    :straight (:type built-in)
    :config
    (setq flymake-start-on-save-buffer t
          flymake-no-changes-timeout 1
          flymake-fringe-indicator-position 'right-fringe)
    (add-hook 'sh-mode-hook 'flymake-mode))

  (set-face-attribute 'error nil               :weight 'unspecified)
  (set-face-attribute 'compilation-error nil   :weight 'unspecified)
  (set-face-attribute 'compilation-warning nil :weight 'unspecified)
  (set-face-attribute 'warning nil             :weight 'unspecified)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'git-gutter-fringe
    (fringe-helper-define 'exlamation-mark nil
      ".XXX.."
      ".XXX.."
      ".XXX.."
      ".XXX.."
      ".XXX.."
      "..X..."
      "......"
      ".XXX.."
      ".XXX.."
      "......")

    (fringe-helper-define 'flymake-double-exclamation-mark nil
      "........."
      ".XX...XX"
      "..XX.XX."
      "...XXX.."
      "....X..."
      "...XXX.."
      "..XX.XX."
      ".XX...XX"
      ".........")

    (add-hook 'flymake-mode-hook
              (lambda ()
                (unless (string-match-p "kaolin" (prin1-to-string custom-enabled-themes))
                  (defface niva-flymake-fringe-error '((t :inherit 'magit-diff-removed)) nil :group nil)
                  (defface niva-flymake-fringe-warning '((t :inherit 'magit-diff-base)) nil :group nil)
                  (setq flymake-error-bitmap '(flymake-double-exclamation-mark niva-flymake-fringe-error))
                  (setq flymake-warning-bitmap '(exclamation-mark niva-flymake-fringe-warning))))))
#+end_src

** Mode extension
#+begin_src emacs-lisp
  (dolist (pair '(("\\.tpp\\'" . c++-mode)))
    (push pair auto-mode-alist))
#+end_src

** Tree-sitter
*** treesit
#+begin_src emacs-lisp
  (use-package treesit
    :straight (:type built-in)
    :config
    (setq treesit-font-lock-level    2
          c-ts-mode-indent-offset    2
          json-ts-mode-indent-offset 4
          treesit-language-source-alist '((bash         "https://github.com/tree-sitter/tree-sitter-bash")
                                          (c            "https://github.com/tree-sitter/tree-sitter-c")
                                          (cpp          "https://github.com/tree-sitter/tree-sitter-cpp")
                                          (cmake        "https://github.com/uyha/tree-sitter-cmake")
                                          (js           "https://github.com/tree-sitter/tree-sitter-javascript")
                                          (json         "https://github.com/tree-sitter/tree-sitter-json")
                                          (python       "https://github.com/tree-sitter/tree-sitter-python")
                                          (tsx          "https://github.com/tree-sitter/tree-sitter-typescript")
                                          (typescript   "https://github.com/tree-sitter/tree-sitter-typescript")
                                          (yaml         "https://github.com/ikatyang/tree-sitter-yaml")))

    (dolist (pair '(("\\.sh\\'"           . bash-ts-mode)
                    ("\\.c\\'"            . c-ts-mode)
                    ("\\.h\\'"            . c-ts-mode)
                    ("\\.cpp\\'"          . c++-ts-mode)
                    ("\\.hpp\\'"          . c++-ts-mode)
                    ("\\.tpp\\'"          . c++-ts-mode)
                    ("\\.java\\'"         . java-ts-mode)
                    ("\\.js\\'"           . js-ts-mode)
                    ("\\.md\\'"           . json-ts-mode)
                    ("\\.json\\'"         . json-ts-mode)
                    ("\\.ts\\'"           . typescript-ts-mode)
                    ("\\.tsx\\'"          . tsx-ts-mode)
                    ("\\.css\\'"          . css-ts-mode)
                    ("\\.cmake\\'"        . cmake-ts-mode)
                    ("\\.py\\'"           . python-ts-mode)
                    ("\\.yaml\\'"         . yaml-ts-mode)
                    ("\\.clangd\\'"       . yaml-ts-mode)
                    ("\\.yml\\'"          . yaml-ts-mode)
                    ("\\.clang-format\\'" . yaml-ts-mode)
                    ("\\.clang-tidy\\'"   . yaml-ts-mode)))
      (push pair auto-mode-alist)))
#+end_src

** Reformatter
#+begin_src emacs-lisp
  (use-package reformatter
    :straight t
    :config
    (reformatter-define sh-format
      :program "shfmt"
      :group 'sh-mode)

    (reformatter-define black-format
      :program "black"
      :args '("-" "--quiet")
      :group 'python-mode)

    (reformatter-define isort-format
      :program "isort"
      :args '("--apply" "-")
      :group 'python-mode)

    (add-to-list 'sh-mode-hook #'sh-format-on-save-mode)
    (add-to-list 'python-ts-mode-hook #'black-format-on-save-mode)
    (add-to-list 'python-ts-mode-hook #'isort-format-on-save-mode))
#+end_src

** Version control
*** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :straight t
    :diminish
    :config
    (setq git-gutter:update-interval 1
          git-gutter:added-sign    "+"
          git-gutter:modified-sign "="
          git-gutter:deleted-sign  "-"))
#+end_src

**** git-gutter-fringe
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :straight t
    :delight
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode +1)
    (setq git-gutter-fr:side 'left-fringe))

  (add-hook 'git-gutter-mode-hook
            (lambda ()
              (unless (string-match-p "kaolin" (prin1-to-string custom-enabled-themes))
                (set-face-attribute 'git-gutter-fr:added    nil :foreground (face-attribute 'magit-diff-added   :foreground) :background (face-attribute 'magit-diff-added   :background))
                (set-face-attribute 'git-gutter-fr:modified nil :foreground (face-attribute 'magit-diff-base    :foreground) :background (face-attribute 'magit-diff-base    :background))
                (set-face-attribute 'git-gutter-fr:deleted  nil :foreground (face-attribute 'magit-diff-removed :foreground) :background (face-attribute 'magit-diff-removed :background)))))

  (add-hook 'prog-mode-hook
            (lambda () (git-gutter-mode +1)))

  (defun niva/naysayer-faces () (interactive)
         (set-face-attribute 'highlight              nil :background "#335533")
         (set-face-attribute 'compilation-info       nil :foreground "#2ec09c")
         (set-face-attribute 'region                 nil :background "#335533")
         (set-face-attribute 'git-gutter-fr:added    nil :foreground "#5e8203")
         (set-face-attribute 'git-gutter-fr:modified nil :foreground "#00638a")
         (set-face-attribute 'git-gutter-fr:deleted  nil :foreground "#d0372d"))


  (fringe-helper-define 'git-gutter-fr:added nil
    "......."
    "...x..."
    "...x..."
    "...x..."
    "xxxxxxx"
    "...x..."
    "...x..."
    "...x..."
    ".......")

  (fringe-helper-define 'git-gutter-fr:deleted nil
    "......."
    "......."
    "......."
    ".XXXXX."
    "......."
    "......."
    ".......")

  ;; Lines
  (fringe-helper-define 'git-gutter-fr:modified nil
    "......."
    ".xxxxx."
    "......."
    "......."
    ".xxxxx.")
#+end_src

*** magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :config
    (setq ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain)

    (defun disable-y-or-n-p (orig-fun &rest args)
      (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
        (apply orig-fun args)))

    (advice-add 'ediff-quit :around #'disable-y-or-n-p))
#+end_src
** Documentation
*** markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :config
    (set-face-attribute 'markdown-code-face nil :background 'unspecified)
    (set-face-attribute 'markdown-line-break-face nil :underline 'unspecified)
    (setq markdown-hr-display-char nil))
#+end_src
*** helpful
#+begin_src emacs-lisp
  (use-package helpful
    :straight (:host github :repo "wilfred/helpful")
    :bind (("C-h f" . helpful-callable)
  		     ("C-h v" . helpful-variable)
  		     ("C-h k" . helpful-key)
  		     ("C-h F" . helpful-function)
  		     ("C-h C" . helpful-command)
  		     ("C-c C-d" . helpful-at-point)))
#+end_src
*** devdocs
#+begin_src emacs-lisp
  (use-package devdocs
    :straight t
    :init
    (defvar lps/devdocs-alist
      '((python-ts-mode-hook     . "python~3.12")
        (c-ts-mode-hook          . "c")
        (c++-mode-hook           . "cpp")
        (c++-ts-mode-hook        . "cpp")
        (org-mode-hook           . "elisp")
        (emacs-lisp-mode-hook    . "elisp")
        (sh-mode-hook            . "bash")))

    (setq devdocs-window-select t
          shr-max-image-proportion 0.4)

    (dolist (pair lps/devdocs-alist)
      (let ((hook (car pair))
            (doc (cdr pair)))
        (add-hook hook `(lambda () (setq-local devdocs-current-docs (list ,doc))))))

    (define-key evil-normal-state-map (kbd "SPC g d")
                (lambda ()
                  (interactive)
                  (devdocs-lookup nil (thing-at-point 'symbol t)))))
#+end_src

** Running tests
#+begin_src emacs-lisp
  (defun niva/run-test-command ()
    "Run command for testing"
    (interactive)
    (let* ((command-history (symbol-value 'my-run-test-project-command-history))
           (last-command (car command-history))
           (command (read-shell-command "Test command: " last-command 'my-run-test-project-command-history)))
      (compile command)))
  (defvar niva/run-test-command-history nil)
#+end_src
* Terminal
** eshell
#+begin_src emacs-lisp
  (use-package eshell
    :straight (:type built-in)
    :defines eshell-prompt-function
    :config
    (add-hook 'shell-mode-hook 'with-editor-export-editor)
    (add-hook 'eshell-mode-hook
              (lambda ()
                (define-key eshell-hist-mode-map (kbd "C-c C-l") nil)
                (define-key eshell-hist-mode-map (kbd "M-s")     nil)
                (define-key eshell-mode-map      (kbd "C-a")     'eshell-bol)
                (define-key eshell-mode-map      (kbd "C-l")     'eshell/clear)
                (define-key eshell-mode-map      (kbd "C-r")     'eshell-isearch-backward)
                (define-key eshell-mode-map      (kbd "C-u")     'eshell-kill-input)))

    (setq eshell-ask-to-save-history 'always
          eshell-banner-message
          '(format "%s %s\n"
                   (propertize (format " %s " (string-trim (buffer-name)))
                               'face 'mode-line-highlight)
                   (propertize (current-time-string)
                               'face 'font-lock-keyword-face))
          eshell-cmpl-cycle-completions t
          eshell-cmpl-ignore-case t
          eshell-destroy-buffer-when-process-dies nil
          eshell-error-if-no-glob t
          eshell-glob-case-insensitive t
          eshell-hist-ignoredups t
          eshell-input-filter (lambda (input) (not (string-match-p "\\`\\s-+" input)))
          eshell-kill-processes-on-exit t
          eshell-scroll-to-bottom-on-input 'all
          eshell-scroll-to-bottom-on-output nil))

  (setq system-name (car (split-string system-name "\\.")))
  (setq eshell-prompt-regexp "^.+@.+:.+> ")
  (setq eshell-prompt-function
        (lambda ()
          (concat
           (propertize (user-login-name)
                       'face 'font-lock-keyword-face)
           (propertize (format "@%s" (system-name))
                       'face 'default)
           (propertize ":"
                       'face 'font-lock-doc-face)
           (propertize (abbreviate-file-name (eshell/pwd))
                       'face 'font-lock-type-face)
           (propertize " $"
                       'face 'font-lock-doc-face)
           (propertize " "
                       'face 'default))))
#+end_src

*** eshell-syntax-highlighting
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :straight t
    :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

*** Kill buffer on quit
#+begin_src emacs-lisp
  (defun niva/term-handle-exit (&optional process-name msg)
    "Kill buffer on quit"
    (kill-buffer (current-buffer)))

  (advice-add 'term-handle-exit :after 'niva/term-handle-exit)
#+end_src

*** Log coloring
#+begin_src disabled
  (defun niva/font-lock-comment-annotations ()
    "Colorize keywords in eshell buffers"
    (interactive)
    (font-lock-add-keywords
     nil
     '(("\\<\\(.*ERR.*\\)"                                            1 'compilation-error   t)
       ("\\<\\(.*INFO.*\\)"                                           1 'compilation-info    t)
       ("\\<\\(.*DEBUG.*\\)"                                          1 'compilation-info    t)
       ("\\<\\(.*WARN.*\\)"                                           1 'compilation-warning t)
       ("\\<\\(.*DEBUG: --- CMD: POLL(60) REPLY: ISTATR(49) ---.*\\)" 1 'completions-common-part t)
       ("\\<\\(.*DEBUG: --- CMD: OUT(68) REPLY: ACK(40) ---.*\\)"     1 'completions-common-part t))))

  (add-hook 'eshell-mode-hook 'niva/font-lock-comment-annotations)
#+end_src

*** Alias
#+begin_src emacs-lisp
  (defalias 'ff    "for i in ${eshell-flatten-list $*} {find-file $i}")
  (defalias 'emacs "ff")
  (defalias 'fo    "find-file-other-window $1")
  (defalias 'ts    "ts '[%Y-%m-%d %H:%M:%S]'")
#+end_src

** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config (exec-path-from-shell-initialize))
  (when (memq window-system '(mac ns x)) (exec-path-from-shell-initialize))
#+end_src
* Org
** olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :straight t
    :config
    (setq olivetti-style 'fancy))
#+end_src

** org
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-modules 'org-tempo)
  (dolist (pair '(("sh"   . "src sh")
                  ("el"   . "src emacs-lisp")
                  ("sc"   . "src scheme")
                  ("ts"   . "src typescript")
                  ("py"   . "src python")
                  ("go"   . "src go")
                  ("yaml" . "src yaml")
                  ("json" . "src json")
                  ("cpp"  . "src cpp")))
    (add-to-list 'org-structure-template-alist pair))

  (use-package org
    :straight t
    :config
    (setq org-hide-emphasis-markers t
          org-fontify-quote-and-verse-blocks t
          ;; org-startup-indented t
          org-return-follows-link t
          org-pretty-entities t
          org-ellipsis "…"
          org-use-sub-superscripts nil))
#+end_src

** org-modern
#+begin_src disabled
  (use-package org-modern
    :straight t
    :after org
    :config

    (defun niva/setup-org-modern ()
      (set-face-background 'fringe (face-attribute 'default :background))

      (setq org-auto-align-tags nil
            org-tags-column 0
            org-catch-invisible-edits 'show-and-error
            org-special-ctrl-a/e t
            org-insert-heading-respect-content t
            org-hide-emphasis-markers t
            org-pretty-entities t
            org-modern-block-fringe 8
            org-ellipsis "…"
            org-modern-star '("*"))

      (org-modern-mode))

    (add-hook 'org-mode-hook #'niva/setup-org-modern))
#+end_src

#+begin_src disabled
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

  ;; Custom faces for fancy org files
  (defface niva-org-level-1 '((t :inherit 'outline-1 :weight light :height 1.40)) nil :group nil)
  (defface niva-org-level-2 '((t :inherit 'outline-2 :weight light :height 1.20)) nil :group nil)
  (defface niva-org-level-3 '((t :inherit 'outline-3 :weight light :height 1.15)) nil :group nil)
  (defface niva-org-level-4 '((t :inherit 'outline-4 :weight light :height 1.13)) nil :group nil)
  (defface niva-org-level-5 '((t :inherit 'outline-5 :weight light :height 1.12)) nil :group nil)
  (defface niva-org-level-6 '((t :inherit 'outline-6 :weight light :height 1.1))  nil :group nil)
  (defface niva-org-level-7 '((t :inherit 'outline-7 :weight light :height 1.1))  nil :group nil)
  (defface niva-org-level-8 '((t :inherit 'outline-8 :weight light :height 1.1))  nil :group nil))

  (use-package org-superstar
    :straight t)

  (defun niva/org-remove-stars ()
    (font-lock-add-keywords
     nil
     '(("^\\*+ "
        (0
         (prog1 nil
           (put-text-property (match-beginning 0) (match-end 0)
                              'invisible t)))))))

  (defun niva/org-mode-setup ()
    (unless (string= (buffer-name) "config.org")
      (let ((variable-pitch-font "Helvetica")
            (variable-pitch-height 140)
            (fixed-pitch-font "Ubuntu Mono")
            (fixed-pitch-height 130)
            (org-hide-leading-stars t)
            (evil-auto-indent nil))

        ;; (niva/org-remove-stars)

        (setq-local org-level-faces '(niva-org-level-1
                                      niva-org-level-2
                                      niva-org-level-3
                                      niva-org-level-4
                                      niva-org-level-5
                                      niva-org-level-6
                                      niva-org-level-7
                                      niva-org-level-8))

        (set-face-attribute 'variable-pitch nil :family variable-pitch-font :height variable-pitch-height)
        (set-face-attribute 'fixed-pitch    nil :family fixed-pitch-font    :height fixed-pitch-height)

        (set-face-attribute 'org-block      nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-table      nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code       nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-block      nil :inherit 'fixed-pitch)

        (setq-local visual-fill-column-width 80
                    visual-fill-column-center-text t)
        ;; (olivetti-mode 1)
        ;; (org-indent-mode 1)
        (variable-pitch-mode 1)
        (visual-fill-column-mode)
        (auto-fill-mode 0)
        (visual-line-mode 1))))
#+end_src

Only use variable-pitch if explicitly called.

#+begin_src disabled
  (defun niva/variable-pitch-on ()
    (interactive)
    (set-face-attribute 'variable-pitch nil :font "CMU Serif 14" :height 1.4 :inherit 'default))
#+end_src



** org code blocks
#+begin_src emacs-lisp
  (defun narrow-to-region-indirect (start end)
    "Restrict editing in this buffer to the current region, indirectly."
    (interactive "r")
    (deactivate-mark)
    (let ((buf (clone-indirect-buffer nil nil)))
      (with-current-buffer buf
        (narrow-to-region start end))
      (switch-to-buffer buf)))
#+end_src

#+begin_src emacs-lisp
  ;; Disable < matching with (
  (defun niva/org-syntax-remove-angle-bracket-match ()
    "Disable < matching with ("
    (interactive)
    (modify-syntax-entry ?< "." org-mode-syntax-table)
    (modify-syntax-entry ?> "." org-mode-syntax-table))

  (add-hook 'org-mode-hook #'niva/org-syntax-remove-angle-bracket-match)
#+end_src

** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :config
    (when (fboundp 'niva/setup-org-roam)
      (niva/setup-org-roam))
    (org-roam-db-autosync-enable))

  (defun my/org-roam-open-link ()
    (interactive)
    (if (and (eq major-mode 'org-mode) (string-match-p org-link-any-re (thing-at-point 'line)))
        (call-interactively #'org-roam-node-find)
      (evil-ret)))

  (evil-define-key 'normal org-mode-map (kbd "RET") #'my/org-roam-open-link)
#+end_src

*** websocket

#+begin_src emacs-lisp
  (use-package websocket
    :straight t
    :after org-roam)
#+end_src

*** org-roam-ui
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight t
    :after org-roam
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-open-on-start nil
          org-roam-ui-update-on-save t))
#+end_src

*** logseq
#+begin_src emacs-lisp
  ;; (use-package org-roam-logseq
  ;;   :straight (:host github :repo "idanov/org-roam-logseq.el"))

  ;; (setq org-roam-dailies-directory "journals/"
  ;;       org-roam-file-exclude-regexp "\\.st[^/]*\\|logseq/.*$")

  ;; (setq org-roam-capture-templates '(("d" "default"
  ;;                                     plain
  ;;                                     "%?"
  ;;                                     :target (file+head "pages/${slug}.org" "#+title: ${title}\n")
  ;;                                     :unnarrowed t)))

  ;; (setq org-roam-dailies-capture-templates '(("d" "default"
  ;;                                             entry
  ;;                                             "* %?"
  ;;                                             :target (file+head "%<%Y_%m_%d>.org" "#+title: %<%Y-%m-%d>\n"))))
#+end_src

** visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :straight t)
#+end_src
* Tetris
#+begin_src emacs-lisp
  (setq-default tetris-use-color t
                tetris-use-glyphs nil
                tetris-border 4)
  (add-hook 'tetris-mode-hook (lambda ()
                                (set-face-attribute 'gamegrid-face-*Tetris* nil :font "Monaco")))
#+end_src
* Web
** shr
#+begin_src emacs-lisp
  (use-package shr
    :straight (:type built-in)
    :config
    (setq shr-use-fonts nil)
    (setq shr-max-width nil)
    (setq shr-width nil)

    (defun niva/create-image-content (spec size content-type flags)
      (let ((data (if (consp spec)
                      (car spec)
                    spec)))
        (cond
         ((eq size 'original)
          (create-image data nil t :ascent 100 :format content-type))
         ((eq content-type 'image/svg+xml)
          (create-image data 'svg t :ascent 100))
         (t
          (ignore-errors
            (shr-rescale-image data content-type
                               (plist-get flags :width)
                               (plist-get flags :height)))))))

    (setq niva--image-slice-divisor 1)
    (defun niva/handle-image-params (image alt start size)
      (let* ((image-pixel-cons (image-size image t))
             (image-pixel-width (car image-pixel-cons))
             (image-pixel-height (cdr image-pixel-cons))
             (image-scroll-rows (/ (round (/ image-pixel-height (default-font-height))) niva--image-slice-divisor)))
        (when (and (> (current-column) 0) (> image-pixel-width 400))
          (insert "\n"))
        (insert-sliced-image image (or alt "*") nil image-scroll-rows 1)
        (put-text-property start (point) 'image-size size)
        (when (and shr-image-animate
                   (cond ((fboundp 'image-multi-frame-p)
                          (cdr (image-multi-frame-p image)))
                         ((fboundp 'image-animated-p)
                          (image-animated-p image))))
          (image-animate image nil 60))
        image))

    (defun niva/shr-put-image (spec alt &optional flags)
      (if (display-graphic-p)
          (let* ((size (cdr (assq 'size flags)))
                 (content-type (and (consp spec)
                                    (cadr spec)))
                 (start (point))
                 (image (niva/create-image-content spec size content-type flags)))
            (if image
                (niva/handle-image-params image alt start size)))
        (insert (or alt ""))))


    (defun niva/shr-remove-underline-from-images (dom &optional url)
      (let ((start (point)))
        (shr-tag-img dom url)
        (put-text-property start (point) 'face '(:underline nil))))

    (setq shr-external-rendering-functions '((img . niva/shr-remove-underline-from-images))
          shr-put-image-function #'niva/shr-put-image))

  (setq image-transform-fit-width 500)
#+end_src

** eww

#+begin_src emacs-lisp
  (setq-default browse-url-browser-function 'eww-browse-url
                shr-use-fonts nil
                shr-use-colors t
                eww-search-prefix "https://html.duckduckgo.com/html?q=")

  (dolist (face '(shr-h1
                  shr-text
                  shr-code
                  variable-pitch-text
                  gnus-header
                  info-title-1
                  info-title-2
                  info-title-3
                  info-title-4
                  help-for-help-header
                  ;; variable-pitch
                  ;; variable-pitch-text
                  read-multiple-choice-face
                  help-key-binding
                  ;; fixed-pitch
                  ;; fixed-pitch-serif
                  info-menu-header))
    (ignore-errors
      (set-face-attribute face nil
                          :height 'unspecified
                          :inherit 'default
                          :family 'unspecified
                          :weight 'unspecified)))
#+end_src

#+begin_src emacs-lisp
  (defun niva/eww-toggle-images ()
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (eww-reload))
#+end_src

** webkit
#+begin_src emacs-lisp
  (setq browse-url-browser-function (lambda (url session)
                                      (other-window 1)
                                      (xwidget-webkit-browse-url url)))
#+end_src
** elfeed

#+begin_src emacs-lisp
  (if niva/elfeed-enabled
      (progn
#+end_src

*** elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :hook (elfeed-search-mode . elfeed-update)
    :config
    (setq elfeed-search-filter "+unread"
          elfeed-show-truncate-long-urls nil))

  (defun elfeed-olivetti (buff)
    (switch-to-buffer buff)
    (setq-local olivetti-body-width 80)
    (setq-local shr-inhibit-images nil)
    (setq-local shr-max-image-proportion 1)
    (setq-local scroll-margin 10)
    (olivetti-mode)
    (hl-text-block-mode)
    (elfeed-show-refresh))
  (setq elfeed-show-entry-switch 'elfeed-olivetti)

  (defun niva/clear-elfeed ()
    "Clear elfeed database"
    (interactive)
    (setq elfeed-db-directory (expand-file-name "~/.elfeed"))
    (delete-directory elfeed-db-directory t)
    (message "Elfeed database cleared. Restart Elfeed to initialize a new database."))
  (niva/clear-elfeed)

  (defun niva/elfeed-update-loop ()
    (interactive)
    (message "Updating elfeed")
    (elfeed-update))
#+end_src

*** elfeed-protocol
#+begin_src emacs-lisp
  (use-package elfeed-protocol
    :straight t
    :after elfeed
    :config
    (setq elfeed-use-curl t
          elfeed-sort-order 'descending
          elfeed-protocol-enabled-protocols '(fever)
          elfeed-protocol-fever-update-unread-only nil
          elfeed-protocol-fever-maxsize 50
          elfeed-protocol-fever-fetch-category-as-tag t
          elfeed-protocol-feeds (list (list niva/elfeed-fever-url
                                            :api-url niva/elfeed-api-url
                                            :password (niva/lookup-password :host "fever")))))

  (defun niva/elfeed-refresh ()
    (interactive)
    (mark-whole-buffer)
    (cl-loop for entry in (elfeed-search-selected)
             do (elfeed-untag-1 entry 'unread))
    (elfeed-search-update--force)
    (message niva/elfeed-fever-url)
    (elfeed-protocol-fever-reinit niva/elfeed-api-url))
#+end_src

#+begin_src emacs-lisp
  (elfeed-protocol-enable)

  (evil-define-key 'normal elfeed-show-mode-map "I" #'niva/elfeed-toggle-images)
  (define-key elfeed-search-mode-map (kbd "I") #'niva/elfeed-toggle-images)
  (evil-define-key 'normal elfeed-search-mode-map "r" 'elfeed-update)
#+end_src

*** Count unreads
#+begin_src emacs-lisp
  (setq-default niva-elfeed-unread-count 0)
  (defun niva/elfeed-update-unread-count ()
    (interactive)
    (setq niva-elfeed-unread-count
          (cl-loop for entry in elfeed-search-entries
                   count (memq 'unread (elfeed-entry-tags entry)))))

  (add-hook 'elfeed-db-update-hook 'niva/elfeed-update-unread-count)
  (add-hook 'elfeed-search-update-hook 'niva/elfeed-update-unread-count)
#+end_src

*** Window handling
#+begin_src emacs-lisp
  ;; (defun elfeed-entry-buffer ()
  ;;   (get-buffer-create "*elfeed-entry*"))
#+end_src

#+begin_src emacs-lisp
  ;; (defun niva/elfeed-split (buff)
  ;;   (interactive)
  ;;   (let ((w (split-window-below)))
  ;;     (select-window w))
  ;;   (switch-to-buffer buff)
  ;;   (olivetti-mode))
#+end_src

#+begin_src emacs-lisp
  ;; (defun elfeed-kill-buffer ()
  ;;   (interactive)
  ;;   (let* ((buff (get-buffer "*elfeed-entry*"))
  ;;          (window (get-buffer-window buff)))
  ;;     (kill-buffer buff)
  ;;     (delete-window window)))
#+end_src

#+begin_src emacs-lisp
  ;; (defun elfeed-search-quit-window ()
  ;;   (interactive)
  ;;   (elfeed-db-save)
  ;;   (elfeed-kill-buffer)
  ;;   (quit-window))
  ))
#+end_src

*** Customization
#+begin_src emacs-lisp
  (use-package relative-date :straight (relative-date :host github :repo "rougier/relative-date"))
  (defun elfeed-search-format-date (date) (format "%-12s" (relative-date date)))
#+end_src

#+begin_src emacs-lisp
  (setq widest-tag 0)
  (setq widest-feed-title 0)
  (defun niva/elfeed-search-print-entry (entry)
    (let* ((feed (elfeed-entry-feed entry))
           (feed-title (when feed (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (star (if (member "star" (mapcar #'symbol-name (elfeed-entry-tags entry))) "*" " "))
           (tags (delete "unread" (delete "star" (mapcar #'symbol-name (elfeed-entry-tags entry)))))
           (tags-str "%-12s")
           (date (elfeed-search-format-date (elfeed-entry-date entry)))
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (formatted-date (propertize date 'face 'elfeed-search-title-face))
           (formatted-star (propertize star 'face 'elfeed-search-tag-face))

           (formatted-tags
            (if (> (window-width) 120)
                (and tags (propertize (format tags-str (mapconcat 'identity tags " ")) 'face 'elfeed-search-tag-face)) ""))

           (formatted-feed-title (and feed-title (propertize (format "%s" feed-title) 'face 'elfeed-search-feed-face)))

           (title-width (- (window-width)
                           (string-width formatted-date)
                           (string-width formatted-star)
                           (string-width formatted-tags)
                           widest-feed-title 5))

           (title-column (elfeed-format-column
                          title title-width
                          :left))

           (formatted-title (propertize (format "%s " title-column) 'face title-faces 'kbd-help title)))

      (if (< widest-tag (string-width formatted-tags))
          (setq widest-tag (string-width formatted-tags)))

      (if (< widest-feed-title (string-width formatted-feed-title))
          (setq widest-feed-title (string-width formatted-feed-title)))

      (setq tag-padding (format "%%-%ds" widest-tag))
      (setq feed-padding (format "%%-%ds" widest-feed-title))

      (mapc #'insert (list
                      formatted-date
                      " " (format feed-padding formatted-feed-title)
                      " " formatted-title
                      " " formatted-tags
                      formatted-star))))


  (setq elfeed-search-print-entry-function #'niva/elfeed-search-print-entry)

  (defun niva/update-elfeed-on-resize (&optional _)
    (when (eq major-mode 'elfeed-search-mode)
      (elfeed-update)))
  (add-hook 'window-size-change-functions #'niva/update-elfeed-on-resize)
#+end_src

#+begin_src emacs-lisp
  (defun niva/elfeed-sort-by-tags-and-feed (a b)
    (let* ((a-title (format "%s" (elfeed-entry-feed a)))
           (b-title (format "%s" (elfeed-entry-feed b)))
           (a-tags (format "%s" (elfeed-entry-tags a)))
           (b-tags (format "%s" (elfeed-entry-tags b))))
      (if (and (string= a-tags b-tags) (string= a-title b-title))
          (< (elfeed-entry-date b) (elfeed-entry-date a))
        (if (string= a-tags b-tags)
            (string> a-title b-title)
          (string< a-tags b-tags)))))

  (setf elfeed-search-sort-function nil)
#+end_src

*** Graphics handling
#+begin_src emacs-lisp
  (setq shr-inhibit-images t)
  (defun niva/elfeed-toggle-images ()
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (elfeed-show-refresh))
#+end_src

#+begin_src emacs-lisp
  (defun niva/insert-indented-image (spec alt &optional flags)
    (insert "\n        ")
    (shr-put-image spec alt flags)
    (insert "\n\n"))
#+end_src

** irc
*** circe
#+begin_src emacs-lisp
  (use-package circe
    :straight t
    :config
    (setq lui-fill-column                     80
          lui-time-stamp-position             'right
          lui-time-stamp-only-when-changed-p  t
          lui-time-stamp-format               "[%H:%M]"
          lui-fill-type                       "                "
          circe-reduce-lurker-spam            t
          circe-server-buffer-name            "{network}"
          circe-server-max-reconnect-attempts 2
          circe-default-nick                  "niklas"
          circe-default-realname              "niklas"
          circe-format-server-topic           "{new-topic}"
          circe-format-say                    "{nick:-16s}{body}"
          circe-format-self-say               circe-format-say
          circe-default-part-message          nil
          circe-default-quit-message          nil
          circe-chat-buffer-name              " irc://{target}"
          circe-network-defaults              nil
          lui-logging-file-format             "{buffer}/%Y-%m-%d.txt")

    (enable-lui-logging-globally)
    (enable-lui-track)
    (niva/setup-irc-config)
    (enable-circe-color-nicks)

    (add-hook 'circe-channel-mode-hook 'read-only-mode)
    (circe-set-display-handler "353" 'circe-display-ignore)
    (circe-set-display-handler "366" 'circe-display-ignore)

    (setq lui-time-stamp-position 'right-margin
          lui-fill-type nil)

    (defun my-lui-setup ()
      (setq fringes-outside-margins t
            right-margin-width 7
            word-wrap t;
            wrap-prefix "              ")
      (setf (cdr (assoc 'continuation fringe-indicator-alist)) nil)
      (add-hook 'lui-mode-hook 'my-lui-setup)))
#+end_src

*** IRC notifications
#+begin_src emacs-lisp
  (with-eval-after-load 'circe
    (defvar niva--irc-notification "")

    (defun niva/irc-log-face (target)
      (setq-local niva--irc-log-face
                  (if (string-prefix-p "#yos" target)
                      'font-lock-type-face
                    'font-lock-string-face)))

    (defvar niva--irc-busy nil)
    (defun niva/privmsg (nick userhost _command target text)
      (niva/log-to-buffer " irc://history" target nick text)
      (unless niva--irc-busy
        (setq niva--irc-busy t)
        (setq niva--irc-notification (substring (format "%s@%s: \"%s\"" nick target text) 0 20))
        (run-with-timer 3 nil (lambda ()
                                (setq niva--irc-notification "")
                                (force-mode-line-update t)
                                (setq niva--irc-busy nil)))))

    (advice-add 'circe-display-PRIVMSG :after #'niva/privmsg)

    (defun niva/remove-irc-notification-if-read (orig-func buffer-or-name &rest args)
      (let ((buf (get-buffer buffer-or-name)))
        (when (and buf (with-current-buffer buf (derived-mode-p 'circe-channel-mode)))
          (setq niva--irc-notification ""))
        (apply orig-func buffer-or-name args))))
#+end_src

*** IRC log window
#+begin_src emacs-lisp
  (defun niva/log-to-buffer (buffer nick target text)
    (setq my-buffer (get-buffer-create buffer))
    (with-current-buffer my-buffer
      (funcall 'niva/irc-log-mode)
      (setq buffer-read-only nil)
      (goto-char (point-max))
      (insert (format "%s %s %s %s\n"
                      (propertize (format-time-string "[%H:%M]") 'face 'font-lock-comment-face)
                      (propertize target 'face (niva/irc-log-face target))
                      (propertize (format "%s" nick) 'face 'circe-highlight-nick-face)
                      text))
      (goto-char (point-max)))
    (setq buffer-read-only t))
#+end_src

#+begin_src emacs-lisp
  (define-derived-mode niva/irc-log-mode prog-mode ()
    (setq window-point-insertion-type t)
    (solaire-mode 1)
    (read-only-mode t))
#+end_src

*** List IRC buffers
#+begin_src emacs-lisp
  (defvar niva--switch-irc-buffers-times 0)
  (defun niva/switch-irc-buffers ()
    (interactive)
    (let ((original-buffer (current-buffer)))
      (let ((irc-buffers (seq-filter (lambda (buf)
                                       (string-prefix-p " irc://" (buffer-name buf)))
                                     (buffer-list))))
        (if irc-buffers
            (switch-to-buffer (completing-read "Switch to buffer: " (mapcar 'buffer-name irc-buffers)))
          (progn
            (if (= 0 niva--switch-irc-buffers-times)
                (progn
                  (setq niva--switch-irc-buffers-times 1)
                  (message "Starting Circe...")
                  (circe "znc")
                  (switch-to-buffer original-buffer)
                  (sit-for 3)
                  (niva/switch-irc-buffers))
              (message "Circe timed out.")))))))
#+end_src
** gptel
#+begin_src emacs-lisp
  (use-package gptel
    :straight (gptel
               :host github
               :repo "karthink/gptel")
    :config
    (setq-default gptel-default-mode #'org-mode
                  gptel-max-tokens 200
                  gptel-prompt-prefix-alist '((org-mode . "> "))
                  gptel-stream t
                  gptel-model "deepseek-coder:6.7b-instruct"
                  gptel-default-session "gptel"
                  gptel-backend (gptel-make-ollama "localhost" :host "localhost:11434" :stream t))

    (with-eval-after-load 'gptel
      (evil-define-key 'normal gptel-mode-map "q" 'switch-to-prev-buffer))
    (add-to-list 'display-buffer-alist '("gptel" display-buffer-same-window)))
  (add-hook 'gptel-mode-hook 'evil-insert-state)
#+end_src

* My packages
** hl-text-block-mode
#+begin_src emacs-lisp
  (use-package hl-paragraph-mode
    :straight (:host github :repo "niklasva/hl-paragraph-mode")
    :config
    (setq hl-paragraph-highlight-entire-line t)
    (set-face-attribute 'hl-paragraph-face nil
                        :inherit    'unspecified
                        :foreground 'unspecified
                        :background "firebrick"))

    (set-face-attribute 'hl-paragraph-face nil
                        :inherit    'unspecified
                        :foreground 'unspecified
                        :background (face-attribute 'region :background))

#+end_src
